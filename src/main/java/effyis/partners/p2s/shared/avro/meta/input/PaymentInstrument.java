/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package effyis.partners.p2s.shared.avro.meta.input;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

/** Information about the payment instrument used */
@org.apache.avro.specific.AvroGenerated
public class PaymentInstrument extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 6062314384552197087L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"PaymentInstrument\",\"namespace\":\"effyis.partners.p2s.shared.avro.meta.input\",\"doc\":\"Information about the payment instrument used\",\"fields\":[{\"name\":\"paymentInstrumentId\",\"type\":[\"null\",\"string\"],\"doc\":\"Unique identifier for the payment instrument (P2S-00041)\",\"default\":null},{\"name\":\"maskedPan\",\"type\":\"string\",\"doc\":\"The masked (partially obfuscated) PAN of the card used for the transaction (P2S-00043)\"},{\"name\":\"sequence\",\"type\":[\"null\",\"string\"],\"doc\":\"Sequence number to identify the card usage instance (e.g., recurring payments) (P2S-00044)\",\"default\":null},{\"name\":\"expiryDate\",\"type\":[\"null\",\"string\"],\"doc\":\"The expiration date of the card (P2S-00045)\",\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<PaymentInstrument> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<PaymentInstrument> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<PaymentInstrument> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<PaymentInstrument> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<PaymentInstrument> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this PaymentInstrument to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a PaymentInstrument from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a PaymentInstrument instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static PaymentInstrument fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Unique identifier for the payment instrument (P2S-00041) */
  private java.lang.CharSequence paymentInstrumentId;
  /** The masked (partially obfuscated) PAN of the card used for the transaction (P2S-00043) */
  private java.lang.CharSequence maskedPan;
  /** Sequence number to identify the card usage instance (e.g., recurring payments) (P2S-00044) */
  private java.lang.CharSequence sequence;
  /** The expiration date of the card (P2S-00045) */
  private java.lang.CharSequence expiryDate;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public PaymentInstrument() {}

  /**
   * All-args constructor.
   * @param paymentInstrumentId Unique identifier for the payment instrument (P2S-00041)
   * @param maskedPan The masked (partially obfuscated) PAN of the card used for the transaction (P2S-00043)
   * @param sequence Sequence number to identify the card usage instance (e.g., recurring payments) (P2S-00044)
   * @param expiryDate The expiration date of the card (P2S-00045)
   */
  public PaymentInstrument(java.lang.CharSequence paymentInstrumentId, java.lang.CharSequence maskedPan, java.lang.CharSequence sequence, java.lang.CharSequence expiryDate) {
    this.paymentInstrumentId = paymentInstrumentId;
    this.maskedPan = maskedPan;
    this.sequence = sequence;
    this.expiryDate = expiryDate;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return paymentInstrumentId;
    case 1: return maskedPan;
    case 2: return sequence;
    case 3: return expiryDate;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: paymentInstrumentId = (java.lang.CharSequence)value$; break;
    case 1: maskedPan = (java.lang.CharSequence)value$; break;
    case 2: sequence = (java.lang.CharSequence)value$; break;
    case 3: expiryDate = (java.lang.CharSequence)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'paymentInstrumentId' field.
   * @return Unique identifier for the payment instrument (P2S-00041)
   */
  public java.lang.CharSequence getPaymentInstrumentId() {
    return paymentInstrumentId;
  }


  /**
   * Sets the value of the 'paymentInstrumentId' field.
   * Unique identifier for the payment instrument (P2S-00041)
   * @param value the value to set.
   */
  public void setPaymentInstrumentId(java.lang.CharSequence value) {
    this.paymentInstrumentId = value;
  }

  /**
   * Gets the value of the 'maskedPan' field.
   * @return The masked (partially obfuscated) PAN of the card used for the transaction (P2S-00043)
   */
  public java.lang.CharSequence getMaskedPan() {
    return maskedPan;
  }


  /**
   * Sets the value of the 'maskedPan' field.
   * The masked (partially obfuscated) PAN of the card used for the transaction (P2S-00043)
   * @param value the value to set.
   */
  public void setMaskedPan(java.lang.CharSequence value) {
    this.maskedPan = value;
  }

  /**
   * Gets the value of the 'sequence' field.
   * @return Sequence number to identify the card usage instance (e.g., recurring payments) (P2S-00044)
   */
  public java.lang.CharSequence getSequence() {
    return sequence;
  }


  /**
   * Sets the value of the 'sequence' field.
   * Sequence number to identify the card usage instance (e.g., recurring payments) (P2S-00044)
   * @param value the value to set.
   */
  public void setSequence(java.lang.CharSequence value) {
    this.sequence = value;
  }

  /**
   * Gets the value of the 'expiryDate' field.
   * @return The expiration date of the card (P2S-00045)
   */
  public java.lang.CharSequence getExpiryDate() {
    return expiryDate;
  }


  /**
   * Sets the value of the 'expiryDate' field.
   * The expiration date of the card (P2S-00045)
   * @param value the value to set.
   */
  public void setExpiryDate(java.lang.CharSequence value) {
    this.expiryDate = value;
  }

  /**
   * Creates a new PaymentInstrument RecordBuilder.
   * @return A new PaymentInstrument RecordBuilder
   */
  public static effyis.partners.p2s.shared.avro.meta.input.PaymentInstrument.Builder newBuilder() {
    return new effyis.partners.p2s.shared.avro.meta.input.PaymentInstrument.Builder();
  }

  /**
   * Creates a new PaymentInstrument RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new PaymentInstrument RecordBuilder
   */
  public static effyis.partners.p2s.shared.avro.meta.input.PaymentInstrument.Builder newBuilder(effyis.partners.p2s.shared.avro.meta.input.PaymentInstrument.Builder other) {
    if (other == null) {
      return new effyis.partners.p2s.shared.avro.meta.input.PaymentInstrument.Builder();
    } else {
      return new effyis.partners.p2s.shared.avro.meta.input.PaymentInstrument.Builder(other);
    }
  }

  /**
   * Creates a new PaymentInstrument RecordBuilder by copying an existing PaymentInstrument instance.
   * @param other The existing instance to copy.
   * @return A new PaymentInstrument RecordBuilder
   */
  public static effyis.partners.p2s.shared.avro.meta.input.PaymentInstrument.Builder newBuilder(effyis.partners.p2s.shared.avro.meta.input.PaymentInstrument other) {
    if (other == null) {
      return new effyis.partners.p2s.shared.avro.meta.input.PaymentInstrument.Builder();
    } else {
      return new effyis.partners.p2s.shared.avro.meta.input.PaymentInstrument.Builder(other);
    }
  }

  /**
   * RecordBuilder for PaymentInstrument instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<PaymentInstrument>
    implements org.apache.avro.data.RecordBuilder<PaymentInstrument> {

    /** Unique identifier for the payment instrument (P2S-00041) */
    private java.lang.CharSequence paymentInstrumentId;
    /** The masked (partially obfuscated) PAN of the card used for the transaction (P2S-00043) */
    private java.lang.CharSequence maskedPan;
    /** Sequence number to identify the card usage instance (e.g., recurring payments) (P2S-00044) */
    private java.lang.CharSequence sequence;
    /** The expiration date of the card (P2S-00045) */
    private java.lang.CharSequence expiryDate;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(effyis.partners.p2s.shared.avro.meta.input.PaymentInstrument.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.paymentInstrumentId)) {
        this.paymentInstrumentId = data().deepCopy(fields()[0].schema(), other.paymentInstrumentId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.maskedPan)) {
        this.maskedPan = data().deepCopy(fields()[1].schema(), other.maskedPan);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.sequence)) {
        this.sequence = data().deepCopy(fields()[2].schema(), other.sequence);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.expiryDate)) {
        this.expiryDate = data().deepCopy(fields()[3].schema(), other.expiryDate);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
    }

    /**
     * Creates a Builder by copying an existing PaymentInstrument instance
     * @param other The existing instance to copy.
     */
    private Builder(effyis.partners.p2s.shared.avro.meta.input.PaymentInstrument other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.paymentInstrumentId)) {
        this.paymentInstrumentId = data().deepCopy(fields()[0].schema(), other.paymentInstrumentId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.maskedPan)) {
        this.maskedPan = data().deepCopy(fields()[1].schema(), other.maskedPan);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.sequence)) {
        this.sequence = data().deepCopy(fields()[2].schema(), other.sequence);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.expiryDate)) {
        this.expiryDate = data().deepCopy(fields()[3].schema(), other.expiryDate);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'paymentInstrumentId' field.
      * Unique identifier for the payment instrument (P2S-00041)
      * @return The value.
      */
    public java.lang.CharSequence getPaymentInstrumentId() {
      return paymentInstrumentId;
    }


    /**
      * Sets the value of the 'paymentInstrumentId' field.
      * Unique identifier for the payment instrument (P2S-00041)
      * @param value The value of 'paymentInstrumentId'.
      * @return This builder.
      */
    public effyis.partners.p2s.shared.avro.meta.input.PaymentInstrument.Builder setPaymentInstrumentId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.paymentInstrumentId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'paymentInstrumentId' field has been set.
      * Unique identifier for the payment instrument (P2S-00041)
      * @return True if the 'paymentInstrumentId' field has been set, false otherwise.
      */
    public boolean hasPaymentInstrumentId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'paymentInstrumentId' field.
      * Unique identifier for the payment instrument (P2S-00041)
      * @return This builder.
      */
    public effyis.partners.p2s.shared.avro.meta.input.PaymentInstrument.Builder clearPaymentInstrumentId() {
      paymentInstrumentId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'maskedPan' field.
      * The masked (partially obfuscated) PAN of the card used for the transaction (P2S-00043)
      * @return The value.
      */
    public java.lang.CharSequence getMaskedPan() {
      return maskedPan;
    }


    /**
      * Sets the value of the 'maskedPan' field.
      * The masked (partially obfuscated) PAN of the card used for the transaction (P2S-00043)
      * @param value The value of 'maskedPan'.
      * @return This builder.
      */
    public effyis.partners.p2s.shared.avro.meta.input.PaymentInstrument.Builder setMaskedPan(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.maskedPan = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'maskedPan' field has been set.
      * The masked (partially obfuscated) PAN of the card used for the transaction (P2S-00043)
      * @return True if the 'maskedPan' field has been set, false otherwise.
      */
    public boolean hasMaskedPan() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'maskedPan' field.
      * The masked (partially obfuscated) PAN of the card used for the transaction (P2S-00043)
      * @return This builder.
      */
    public effyis.partners.p2s.shared.avro.meta.input.PaymentInstrument.Builder clearMaskedPan() {
      maskedPan = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'sequence' field.
      * Sequence number to identify the card usage instance (e.g., recurring payments) (P2S-00044)
      * @return The value.
      */
    public java.lang.CharSequence getSequence() {
      return sequence;
    }


    /**
      * Sets the value of the 'sequence' field.
      * Sequence number to identify the card usage instance (e.g., recurring payments) (P2S-00044)
      * @param value The value of 'sequence'.
      * @return This builder.
      */
    public effyis.partners.p2s.shared.avro.meta.input.PaymentInstrument.Builder setSequence(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.sequence = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'sequence' field has been set.
      * Sequence number to identify the card usage instance (e.g., recurring payments) (P2S-00044)
      * @return True if the 'sequence' field has been set, false otherwise.
      */
    public boolean hasSequence() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'sequence' field.
      * Sequence number to identify the card usage instance (e.g., recurring payments) (P2S-00044)
      * @return This builder.
      */
    public effyis.partners.p2s.shared.avro.meta.input.PaymentInstrument.Builder clearSequence() {
      sequence = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'expiryDate' field.
      * The expiration date of the card (P2S-00045)
      * @return The value.
      */
    public java.lang.CharSequence getExpiryDate() {
      return expiryDate;
    }


    /**
      * Sets the value of the 'expiryDate' field.
      * The expiration date of the card (P2S-00045)
      * @param value The value of 'expiryDate'.
      * @return This builder.
      */
    public effyis.partners.p2s.shared.avro.meta.input.PaymentInstrument.Builder setExpiryDate(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.expiryDate = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'expiryDate' field has been set.
      * The expiration date of the card (P2S-00045)
      * @return True if the 'expiryDate' field has been set, false otherwise.
      */
    public boolean hasExpiryDate() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'expiryDate' field.
      * The expiration date of the card (P2S-00045)
      * @return This builder.
      */
    public effyis.partners.p2s.shared.avro.meta.input.PaymentInstrument.Builder clearExpiryDate() {
      expiryDate = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public PaymentInstrument build() {
      try {
        PaymentInstrument record = new PaymentInstrument();
        record.paymentInstrumentId = fieldSetFlags()[0] ? this.paymentInstrumentId : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.maskedPan = fieldSetFlags()[1] ? this.maskedPan : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.sequence = fieldSetFlags()[2] ? this.sequence : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.expiryDate = fieldSetFlags()[3] ? this.expiryDate : (java.lang.CharSequence) defaultValue(fields()[3]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<PaymentInstrument>
    WRITER$ = (org.apache.avro.io.DatumWriter<PaymentInstrument>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<PaymentInstrument>
    READER$ = (org.apache.avro.io.DatumReader<PaymentInstrument>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    if (this.paymentInstrumentId == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.paymentInstrumentId);
    }

    out.writeString(this.maskedPan);

    if (this.sequence == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.sequence);
    }

    if (this.expiryDate == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.expiryDate);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (in.readIndex() != 1) {
        in.readNull();
        this.paymentInstrumentId = null;
      } else {
        this.paymentInstrumentId = in.readString(this.paymentInstrumentId instanceof Utf8 ? (Utf8)this.paymentInstrumentId : null);
      }

      this.maskedPan = in.readString(this.maskedPan instanceof Utf8 ? (Utf8)this.maskedPan : null);

      if (in.readIndex() != 1) {
        in.readNull();
        this.sequence = null;
      } else {
        this.sequence = in.readString(this.sequence instanceof Utf8 ? (Utf8)this.sequence : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.expiryDate = null;
      } else {
        this.expiryDate = in.readString(this.expiryDate instanceof Utf8 ? (Utf8)this.expiryDate : null);
      }

    } else {
      for (int i = 0; i < 4; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          if (in.readIndex() != 1) {
            in.readNull();
            this.paymentInstrumentId = null;
          } else {
            this.paymentInstrumentId = in.readString(this.paymentInstrumentId instanceof Utf8 ? (Utf8)this.paymentInstrumentId : null);
          }
          break;

        case 1:
          this.maskedPan = in.readString(this.maskedPan instanceof Utf8 ? (Utf8)this.maskedPan : null);
          break;

        case 2:
          if (in.readIndex() != 1) {
            in.readNull();
            this.sequence = null;
          } else {
            this.sequence = in.readString(this.sequence instanceof Utf8 ? (Utf8)this.sequence : null);
          }
          break;

        case 3:
          if (in.readIndex() != 1) {
            in.readNull();
            this.expiryDate = null;
          } else {
            this.expiryDate = in.readString(this.expiryDate instanceof Utf8 ? (Utf8)this.expiryDate : null);
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










