/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package effyis.partners.p2s.shared.avro.meta.input;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

/** Information about the settlement of the transaction */
@org.apache.avro.specific.AvroGenerated
public class Settlement extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -1671180550625512033L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Settlement\",\"namespace\":\"effyis.partners.p2s.shared.avro.meta.input\",\"doc\":\"Information about the settlement of the transaction\",\"fields\":[{\"name\":\"settlementNetwork\",\"type\":[\"null\",\"string\"],\"doc\":\"The payment network used in the settlement (e.g., Visa, Mastercard) (P2S-00050)\",\"default\":null},{\"name\":\"settlementId\",\"type\":[\"null\",\"string\"],\"doc\":\"The transaction ID used for settlement (P2S-00051)\",\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Settlement> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Settlement> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Settlement> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Settlement> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Settlement> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Settlement to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Settlement from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Settlement instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Settlement fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** The payment network used in the settlement (e.g., Visa, Mastercard) (P2S-00050) */
  private java.lang.CharSequence settlementNetwork;
  /** The transaction ID used for settlement (P2S-00051) */
  private java.lang.CharSequence settlementId;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Settlement() {}

  /**
   * All-args constructor.
   * @param settlementNetwork The payment network used in the settlement (e.g., Visa, Mastercard) (P2S-00050)
   * @param settlementId The transaction ID used for settlement (P2S-00051)
   */
  public Settlement(java.lang.CharSequence settlementNetwork, java.lang.CharSequence settlementId) {
    this.settlementNetwork = settlementNetwork;
    this.settlementId = settlementId;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return settlementNetwork;
    case 1: return settlementId;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: settlementNetwork = (java.lang.CharSequence)value$; break;
    case 1: settlementId = (java.lang.CharSequence)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'settlementNetwork' field.
   * @return The payment network used in the settlement (e.g., Visa, Mastercard) (P2S-00050)
   */
  public java.lang.CharSequence getSettlementNetwork() {
    return settlementNetwork;
  }


  /**
   * Sets the value of the 'settlementNetwork' field.
   * The payment network used in the settlement (e.g., Visa, Mastercard) (P2S-00050)
   * @param value the value to set.
   */
  public void setSettlementNetwork(java.lang.CharSequence value) {
    this.settlementNetwork = value;
  }

  /**
   * Gets the value of the 'settlementId' field.
   * @return The transaction ID used for settlement (P2S-00051)
   */
  public java.lang.CharSequence getSettlementId() {
    return settlementId;
  }


  /**
   * Sets the value of the 'settlementId' field.
   * The transaction ID used for settlement (P2S-00051)
   * @param value the value to set.
   */
  public void setSettlementId(java.lang.CharSequence value) {
    this.settlementId = value;
  }

  /**
   * Creates a new Settlement RecordBuilder.
   * @return A new Settlement RecordBuilder
   */
  public static effyis.partners.p2s.shared.avro.meta.input.Settlement.Builder newBuilder() {
    return new effyis.partners.p2s.shared.avro.meta.input.Settlement.Builder();
  }

  /**
   * Creates a new Settlement RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Settlement RecordBuilder
   */
  public static effyis.partners.p2s.shared.avro.meta.input.Settlement.Builder newBuilder(effyis.partners.p2s.shared.avro.meta.input.Settlement.Builder other) {
    if (other == null) {
      return new effyis.partners.p2s.shared.avro.meta.input.Settlement.Builder();
    } else {
      return new effyis.partners.p2s.shared.avro.meta.input.Settlement.Builder(other);
    }
  }

  /**
   * Creates a new Settlement RecordBuilder by copying an existing Settlement instance.
   * @param other The existing instance to copy.
   * @return A new Settlement RecordBuilder
   */
  public static effyis.partners.p2s.shared.avro.meta.input.Settlement.Builder newBuilder(effyis.partners.p2s.shared.avro.meta.input.Settlement other) {
    if (other == null) {
      return new effyis.partners.p2s.shared.avro.meta.input.Settlement.Builder();
    } else {
      return new effyis.partners.p2s.shared.avro.meta.input.Settlement.Builder(other);
    }
  }

  /**
   * RecordBuilder for Settlement instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Settlement>
    implements org.apache.avro.data.RecordBuilder<Settlement> {

    /** The payment network used in the settlement (e.g., Visa, Mastercard) (P2S-00050) */
    private java.lang.CharSequence settlementNetwork;
    /** The transaction ID used for settlement (P2S-00051) */
    private java.lang.CharSequence settlementId;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(effyis.partners.p2s.shared.avro.meta.input.Settlement.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.settlementNetwork)) {
        this.settlementNetwork = data().deepCopy(fields()[0].schema(), other.settlementNetwork);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.settlementId)) {
        this.settlementId = data().deepCopy(fields()[1].schema(), other.settlementId);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
    }

    /**
     * Creates a Builder by copying an existing Settlement instance
     * @param other The existing instance to copy.
     */
    private Builder(effyis.partners.p2s.shared.avro.meta.input.Settlement other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.settlementNetwork)) {
        this.settlementNetwork = data().deepCopy(fields()[0].schema(), other.settlementNetwork);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.settlementId)) {
        this.settlementId = data().deepCopy(fields()[1].schema(), other.settlementId);
        fieldSetFlags()[1] = true;
      }
    }

    /**
      * Gets the value of the 'settlementNetwork' field.
      * The payment network used in the settlement (e.g., Visa, Mastercard) (P2S-00050)
      * @return The value.
      */
    public java.lang.CharSequence getSettlementNetwork() {
      return settlementNetwork;
    }


    /**
      * Sets the value of the 'settlementNetwork' field.
      * The payment network used in the settlement (e.g., Visa, Mastercard) (P2S-00050)
      * @param value The value of 'settlementNetwork'.
      * @return This builder.
      */
    public effyis.partners.p2s.shared.avro.meta.input.Settlement.Builder setSettlementNetwork(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.settlementNetwork = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'settlementNetwork' field has been set.
      * The payment network used in the settlement (e.g., Visa, Mastercard) (P2S-00050)
      * @return True if the 'settlementNetwork' field has been set, false otherwise.
      */
    public boolean hasSettlementNetwork() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'settlementNetwork' field.
      * The payment network used in the settlement (e.g., Visa, Mastercard) (P2S-00050)
      * @return This builder.
      */
    public effyis.partners.p2s.shared.avro.meta.input.Settlement.Builder clearSettlementNetwork() {
      settlementNetwork = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'settlementId' field.
      * The transaction ID used for settlement (P2S-00051)
      * @return The value.
      */
    public java.lang.CharSequence getSettlementId() {
      return settlementId;
    }


    /**
      * Sets the value of the 'settlementId' field.
      * The transaction ID used for settlement (P2S-00051)
      * @param value The value of 'settlementId'.
      * @return This builder.
      */
    public effyis.partners.p2s.shared.avro.meta.input.Settlement.Builder setSettlementId(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.settlementId = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'settlementId' field has been set.
      * The transaction ID used for settlement (P2S-00051)
      * @return True if the 'settlementId' field has been set, false otherwise.
      */
    public boolean hasSettlementId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'settlementId' field.
      * The transaction ID used for settlement (P2S-00051)
      * @return This builder.
      */
    public effyis.partners.p2s.shared.avro.meta.input.Settlement.Builder clearSettlementId() {
      settlementId = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Settlement build() {
      try {
        Settlement record = new Settlement();
        record.settlementNetwork = fieldSetFlags()[0] ? this.settlementNetwork : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.settlementId = fieldSetFlags()[1] ? this.settlementId : (java.lang.CharSequence) defaultValue(fields()[1]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Settlement>
    WRITER$ = (org.apache.avro.io.DatumWriter<Settlement>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Settlement>
    READER$ = (org.apache.avro.io.DatumReader<Settlement>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    if (this.settlementNetwork == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.settlementNetwork);
    }

    if (this.settlementId == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.settlementId);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (in.readIndex() != 1) {
        in.readNull();
        this.settlementNetwork = null;
      } else {
        this.settlementNetwork = in.readString(this.settlementNetwork instanceof Utf8 ? (Utf8)this.settlementNetwork : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.settlementId = null;
      } else {
        this.settlementId = in.readString(this.settlementId instanceof Utf8 ? (Utf8)this.settlementId : null);
      }

    } else {
      for (int i = 0; i < 2; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          if (in.readIndex() != 1) {
            in.readNull();
            this.settlementNetwork = null;
          } else {
            this.settlementNetwork = in.readString(this.settlementNetwork instanceof Utf8 ? (Utf8)this.settlementNetwork : null);
          }
          break;

        case 1:
          if (in.readIndex() != 1) {
            in.readNull();
            this.settlementId = null;
          } else {
            this.settlementId = in.readString(this.settlementId instanceof Utf8 ? (Utf8)this.settlementId : null);
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










