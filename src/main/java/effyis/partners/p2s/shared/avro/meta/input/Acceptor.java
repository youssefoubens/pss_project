/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package effyis.partners.p2s.shared.avro.meta.input;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

/** Information about the merchant accepting the transaction */
@org.apache.avro.specific.AvroGenerated
public class Acceptor extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 1882718634907216939L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Acceptor\",\"namespace\":\"effyis.partners.p2s.shared.avro.meta.input\",\"doc\":\"Information about the merchant accepting the transaction\",\"fields\":[{\"name\":\"id\",\"type\":\"string\",\"doc\":\"Unique ID of the merchant accepting the transaction (P2S-00001)\"},{\"name\":\"subId\",\"type\":[\"null\",\"string\"],\"doc\":\"Sub-merchant ID, used when there are multiple merchants under a single account (P2S-00002)\",\"default\":null},{\"name\":\"terminalId\",\"type\":\"string\",\"doc\":\"ID of the terminal where the transaction was made (P2S-00003)\"},{\"name\":\"pricingRuleCode\",\"type\":[\"null\",\"string\"],\"doc\":\"Merchant pricing model applied by the acquirer or PSP (P2S-00004)\",\"default\":null},{\"name\":\"merchantCategoryCode\",\"type\":\"string\",\"doc\":\"Merchant category code indicating the type of merchant (e.g., retail, restaurant) (P2S-00005)\"},{\"name\":\"name\",\"type\":[\"null\",\"string\"],\"doc\":\"The name of the merchant (P2S-00006)\",\"default\":null},{\"name\":\"city\",\"type\":[\"null\",\"string\"],\"doc\":\"The city where the merchant is located (P2S-00007)\",\"default\":null},{\"name\":\"country\",\"type\":\"string\",\"doc\":\"The country where the merchant is located (P2S-00008)\"},{\"name\":\"identifier\",\"type\":[\"null\",\"string\"],\"doc\":\"Additional identifier for the merchant (e.g., NFC Field 55, TLV data) (P2S-00009)\",\"default\":null},{\"name\":\"referenceNumber\",\"type\":[\"null\",\"string\"],\"doc\":\"Internal reference number used by the merchant for the transaction (P2S-00010)\",\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Acceptor> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Acceptor> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Acceptor> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Acceptor> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Acceptor> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Acceptor to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Acceptor from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Acceptor instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Acceptor fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Unique ID of the merchant accepting the transaction (P2S-00001) */
  private java.lang.CharSequence id;
  /** Sub-merchant ID, used when there are multiple merchants under a single account (P2S-00002) */
  private java.lang.CharSequence subId;
  /** ID of the terminal where the transaction was made (P2S-00003) */
  private java.lang.CharSequence terminalId;
  /** Merchant pricing model applied by the acquirer or PSP (P2S-00004) */
  private java.lang.CharSequence pricingRuleCode;
  /** Merchant category code indicating the type of merchant (e.g., retail, restaurant) (P2S-00005) */
  private java.lang.CharSequence merchantCategoryCode;
  /** The name of the merchant (P2S-00006) */
  private java.lang.CharSequence name;
  /** The city where the merchant is located (P2S-00007) */
  private java.lang.CharSequence city;
  /** The country where the merchant is located (P2S-00008) */
  private java.lang.CharSequence country;
  /** Additional identifier for the merchant (e.g., NFC Field 55, TLV data) (P2S-00009) */
  private java.lang.CharSequence identifier;
  /** Internal reference number used by the merchant for the transaction (P2S-00010) */
  private java.lang.CharSequence referenceNumber;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Acceptor() {}

  /**
   * All-args constructor.
   * @param id Unique ID of the merchant accepting the transaction (P2S-00001)
   * @param subId Sub-merchant ID, used when there are multiple merchants under a single account (P2S-00002)
   * @param terminalId ID of the terminal where the transaction was made (P2S-00003)
   * @param pricingRuleCode Merchant pricing model applied by the acquirer or PSP (P2S-00004)
   * @param merchantCategoryCode Merchant category code indicating the type of merchant (e.g., retail, restaurant) (P2S-00005)
   * @param name The name of the merchant (P2S-00006)
   * @param city The city where the merchant is located (P2S-00007)
   * @param country The country where the merchant is located (P2S-00008)
   * @param identifier Additional identifier for the merchant (e.g., NFC Field 55, TLV data) (P2S-00009)
   * @param referenceNumber Internal reference number used by the merchant for the transaction (P2S-00010)
   */
  public Acceptor(java.lang.CharSequence id, java.lang.CharSequence subId, java.lang.CharSequence terminalId, java.lang.CharSequence pricingRuleCode, java.lang.CharSequence merchantCategoryCode, java.lang.CharSequence name, java.lang.CharSequence city, java.lang.CharSequence country, java.lang.CharSequence identifier, java.lang.CharSequence referenceNumber) {
    this.id = id;
    this.subId = subId;
    this.terminalId = terminalId;
    this.pricingRuleCode = pricingRuleCode;
    this.merchantCategoryCode = merchantCategoryCode;
    this.name = name;
    this.city = city;
    this.country = country;
    this.identifier = identifier;
    this.referenceNumber = referenceNumber;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return subId;
    case 2: return terminalId;
    case 3: return pricingRuleCode;
    case 4: return merchantCategoryCode;
    case 5: return name;
    case 6: return city;
    case 7: return country;
    case 8: return identifier;
    case 9: return referenceNumber;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.CharSequence)value$; break;
    case 1: subId = (java.lang.CharSequence)value$; break;
    case 2: terminalId = (java.lang.CharSequence)value$; break;
    case 3: pricingRuleCode = (java.lang.CharSequence)value$; break;
    case 4: merchantCategoryCode = (java.lang.CharSequence)value$; break;
    case 5: name = (java.lang.CharSequence)value$; break;
    case 6: city = (java.lang.CharSequence)value$; break;
    case 7: country = (java.lang.CharSequence)value$; break;
    case 8: identifier = (java.lang.CharSequence)value$; break;
    case 9: referenceNumber = (java.lang.CharSequence)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return Unique ID of the merchant accepting the transaction (P2S-00001)
   */
  public java.lang.CharSequence getId() {
    return id;
  }


  /**
   * Sets the value of the 'id' field.
   * Unique ID of the merchant accepting the transaction (P2S-00001)
   * @param value the value to set.
   */
  public void setId(java.lang.CharSequence value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'subId' field.
   * @return Sub-merchant ID, used when there are multiple merchants under a single account (P2S-00002)
   */
  public java.lang.CharSequence getSubId() {
    return subId;
  }


  /**
   * Sets the value of the 'subId' field.
   * Sub-merchant ID, used when there are multiple merchants under a single account (P2S-00002)
   * @param value the value to set.
   */
  public void setSubId(java.lang.CharSequence value) {
    this.subId = value;
  }

  /**
   * Gets the value of the 'terminalId' field.
   * @return ID of the terminal where the transaction was made (P2S-00003)
   */
  public java.lang.CharSequence getTerminalId() {
    return terminalId;
  }


  /**
   * Sets the value of the 'terminalId' field.
   * ID of the terminal where the transaction was made (P2S-00003)
   * @param value the value to set.
   */
  public void setTerminalId(java.lang.CharSequence value) {
    this.terminalId = value;
  }

  /**
   * Gets the value of the 'pricingRuleCode' field.
   * @return Merchant pricing model applied by the acquirer or PSP (P2S-00004)
   */
  public java.lang.CharSequence getPricingRuleCode() {
    return pricingRuleCode;
  }


  /**
   * Sets the value of the 'pricingRuleCode' field.
   * Merchant pricing model applied by the acquirer or PSP (P2S-00004)
   * @param value the value to set.
   */
  public void setPricingRuleCode(java.lang.CharSequence value) {
    this.pricingRuleCode = value;
  }

  /**
   * Gets the value of the 'merchantCategoryCode' field.
   * @return Merchant category code indicating the type of merchant (e.g., retail, restaurant) (P2S-00005)
   */
  public java.lang.CharSequence getMerchantCategoryCode() {
    return merchantCategoryCode;
  }


  /**
   * Sets the value of the 'merchantCategoryCode' field.
   * Merchant category code indicating the type of merchant (e.g., retail, restaurant) (P2S-00005)
   * @param value the value to set.
   */
  public void setMerchantCategoryCode(java.lang.CharSequence value) {
    this.merchantCategoryCode = value;
  }

  /**
   * Gets the value of the 'name' field.
   * @return The name of the merchant (P2S-00006)
   */
  public java.lang.CharSequence getName() {
    return name;
  }


  /**
   * Sets the value of the 'name' field.
   * The name of the merchant (P2S-00006)
   * @param value the value to set.
   */
  public void setName(java.lang.CharSequence value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'city' field.
   * @return The city where the merchant is located (P2S-00007)
   */
  public java.lang.CharSequence getCity() {
    return city;
  }


  /**
   * Sets the value of the 'city' field.
   * The city where the merchant is located (P2S-00007)
   * @param value the value to set.
   */
  public void setCity(java.lang.CharSequence value) {
    this.city = value;
  }

  /**
   * Gets the value of the 'country' field.
   * @return The country where the merchant is located (P2S-00008)
   */
  public java.lang.CharSequence getCountry() {
    return country;
  }


  /**
   * Sets the value of the 'country' field.
   * The country where the merchant is located (P2S-00008)
   * @param value the value to set.
   */
  public void setCountry(java.lang.CharSequence value) {
    this.country = value;
  }

  /**
   * Gets the value of the 'identifier' field.
   * @return Additional identifier for the merchant (e.g., NFC Field 55, TLV data) (P2S-00009)
   */
  public java.lang.CharSequence getIdentifier() {
    return identifier;
  }


  /**
   * Sets the value of the 'identifier' field.
   * Additional identifier for the merchant (e.g., NFC Field 55, TLV data) (P2S-00009)
   * @param value the value to set.
   */
  public void setIdentifier(java.lang.CharSequence value) {
    this.identifier = value;
  }

  /**
   * Gets the value of the 'referenceNumber' field.
   * @return Internal reference number used by the merchant for the transaction (P2S-00010)
   */
  public java.lang.CharSequence getReferenceNumber() {
    return referenceNumber;
  }


  /**
   * Sets the value of the 'referenceNumber' field.
   * Internal reference number used by the merchant for the transaction (P2S-00010)
   * @param value the value to set.
   */
  public void setReferenceNumber(java.lang.CharSequence value) {
    this.referenceNumber = value;
  }

  /**
   * Creates a new Acceptor RecordBuilder.
   * @return A new Acceptor RecordBuilder
   */
  public static effyis.partners.p2s.shared.avro.meta.input.Acceptor.Builder newBuilder() {
    return new effyis.partners.p2s.shared.avro.meta.input.Acceptor.Builder();
  }

  /**
   * Creates a new Acceptor RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Acceptor RecordBuilder
   */
  public static effyis.partners.p2s.shared.avro.meta.input.Acceptor.Builder newBuilder(effyis.partners.p2s.shared.avro.meta.input.Acceptor.Builder other) {
    if (other == null) {
      return new effyis.partners.p2s.shared.avro.meta.input.Acceptor.Builder();
    } else {
      return new effyis.partners.p2s.shared.avro.meta.input.Acceptor.Builder(other);
    }
  }

  /**
   * Creates a new Acceptor RecordBuilder by copying an existing Acceptor instance.
   * @param other The existing instance to copy.
   * @return A new Acceptor RecordBuilder
   */
  public static effyis.partners.p2s.shared.avro.meta.input.Acceptor.Builder newBuilder(effyis.partners.p2s.shared.avro.meta.input.Acceptor other) {
    if (other == null) {
      return new effyis.partners.p2s.shared.avro.meta.input.Acceptor.Builder();
    } else {
      return new effyis.partners.p2s.shared.avro.meta.input.Acceptor.Builder(other);
    }
  }

  /**
   * RecordBuilder for Acceptor instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Acceptor>
    implements org.apache.avro.data.RecordBuilder<Acceptor> {

    /** Unique ID of the merchant accepting the transaction (P2S-00001) */
    private java.lang.CharSequence id;
    /** Sub-merchant ID, used when there are multiple merchants under a single account (P2S-00002) */
    private java.lang.CharSequence subId;
    /** ID of the terminal where the transaction was made (P2S-00003) */
    private java.lang.CharSequence terminalId;
    /** Merchant pricing model applied by the acquirer or PSP (P2S-00004) */
    private java.lang.CharSequence pricingRuleCode;
    /** Merchant category code indicating the type of merchant (e.g., retail, restaurant) (P2S-00005) */
    private java.lang.CharSequence merchantCategoryCode;
    /** The name of the merchant (P2S-00006) */
    private java.lang.CharSequence name;
    /** The city where the merchant is located (P2S-00007) */
    private java.lang.CharSequence city;
    /** The country where the merchant is located (P2S-00008) */
    private java.lang.CharSequence country;
    /** Additional identifier for the merchant (e.g., NFC Field 55, TLV data) (P2S-00009) */
    private java.lang.CharSequence identifier;
    /** Internal reference number used by the merchant for the transaction (P2S-00010) */
    private java.lang.CharSequence referenceNumber;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(effyis.partners.p2s.shared.avro.meta.input.Acceptor.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.subId)) {
        this.subId = data().deepCopy(fields()[1].schema(), other.subId);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.terminalId)) {
        this.terminalId = data().deepCopy(fields()[2].schema(), other.terminalId);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.pricingRuleCode)) {
        this.pricingRuleCode = data().deepCopy(fields()[3].schema(), other.pricingRuleCode);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.merchantCategoryCode)) {
        this.merchantCategoryCode = data().deepCopy(fields()[4].schema(), other.merchantCategoryCode);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.name)) {
        this.name = data().deepCopy(fields()[5].schema(), other.name);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.city)) {
        this.city = data().deepCopy(fields()[6].schema(), other.city);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.country)) {
        this.country = data().deepCopy(fields()[7].schema(), other.country);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.identifier)) {
        this.identifier = data().deepCopy(fields()[8].schema(), other.identifier);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (isValidValue(fields()[9], other.referenceNumber)) {
        this.referenceNumber = data().deepCopy(fields()[9].schema(), other.referenceNumber);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
    }

    /**
     * Creates a Builder by copying an existing Acceptor instance
     * @param other The existing instance to copy.
     */
    private Builder(effyis.partners.p2s.shared.avro.meta.input.Acceptor other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.subId)) {
        this.subId = data().deepCopy(fields()[1].schema(), other.subId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.terminalId)) {
        this.terminalId = data().deepCopy(fields()[2].schema(), other.terminalId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.pricingRuleCode)) {
        this.pricingRuleCode = data().deepCopy(fields()[3].schema(), other.pricingRuleCode);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.merchantCategoryCode)) {
        this.merchantCategoryCode = data().deepCopy(fields()[4].schema(), other.merchantCategoryCode);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.name)) {
        this.name = data().deepCopy(fields()[5].schema(), other.name);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.city)) {
        this.city = data().deepCopy(fields()[6].schema(), other.city);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.country)) {
        this.country = data().deepCopy(fields()[7].schema(), other.country);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.identifier)) {
        this.identifier = data().deepCopy(fields()[8].schema(), other.identifier);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.referenceNumber)) {
        this.referenceNumber = data().deepCopy(fields()[9].schema(), other.referenceNumber);
        fieldSetFlags()[9] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * Unique ID of the merchant accepting the transaction (P2S-00001)
      * @return The value.
      */
    public java.lang.CharSequence getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * Unique ID of the merchant accepting the transaction (P2S-00001)
      * @param value The value of 'id'.
      * @return This builder.
      */
    public effyis.partners.p2s.shared.avro.meta.input.Acceptor.Builder setId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * Unique ID of the merchant accepting the transaction (P2S-00001)
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * Unique ID of the merchant accepting the transaction (P2S-00001)
      * @return This builder.
      */
    public effyis.partners.p2s.shared.avro.meta.input.Acceptor.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'subId' field.
      * Sub-merchant ID, used when there are multiple merchants under a single account (P2S-00002)
      * @return The value.
      */
    public java.lang.CharSequence getSubId() {
      return subId;
    }


    /**
      * Sets the value of the 'subId' field.
      * Sub-merchant ID, used when there are multiple merchants under a single account (P2S-00002)
      * @param value The value of 'subId'.
      * @return This builder.
      */
    public effyis.partners.p2s.shared.avro.meta.input.Acceptor.Builder setSubId(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.subId = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'subId' field has been set.
      * Sub-merchant ID, used when there are multiple merchants under a single account (P2S-00002)
      * @return True if the 'subId' field has been set, false otherwise.
      */
    public boolean hasSubId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'subId' field.
      * Sub-merchant ID, used when there are multiple merchants under a single account (P2S-00002)
      * @return This builder.
      */
    public effyis.partners.p2s.shared.avro.meta.input.Acceptor.Builder clearSubId() {
      subId = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'terminalId' field.
      * ID of the terminal where the transaction was made (P2S-00003)
      * @return The value.
      */
    public java.lang.CharSequence getTerminalId() {
      return terminalId;
    }


    /**
      * Sets the value of the 'terminalId' field.
      * ID of the terminal where the transaction was made (P2S-00003)
      * @param value The value of 'terminalId'.
      * @return This builder.
      */
    public effyis.partners.p2s.shared.avro.meta.input.Acceptor.Builder setTerminalId(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.terminalId = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'terminalId' field has been set.
      * ID of the terminal where the transaction was made (P2S-00003)
      * @return True if the 'terminalId' field has been set, false otherwise.
      */
    public boolean hasTerminalId() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'terminalId' field.
      * ID of the terminal where the transaction was made (P2S-00003)
      * @return This builder.
      */
    public effyis.partners.p2s.shared.avro.meta.input.Acceptor.Builder clearTerminalId() {
      terminalId = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'pricingRuleCode' field.
      * Merchant pricing model applied by the acquirer or PSP (P2S-00004)
      * @return The value.
      */
    public java.lang.CharSequence getPricingRuleCode() {
      return pricingRuleCode;
    }


    /**
      * Sets the value of the 'pricingRuleCode' field.
      * Merchant pricing model applied by the acquirer or PSP (P2S-00004)
      * @param value The value of 'pricingRuleCode'.
      * @return This builder.
      */
    public effyis.partners.p2s.shared.avro.meta.input.Acceptor.Builder setPricingRuleCode(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.pricingRuleCode = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'pricingRuleCode' field has been set.
      * Merchant pricing model applied by the acquirer or PSP (P2S-00004)
      * @return True if the 'pricingRuleCode' field has been set, false otherwise.
      */
    public boolean hasPricingRuleCode() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'pricingRuleCode' field.
      * Merchant pricing model applied by the acquirer or PSP (P2S-00004)
      * @return This builder.
      */
    public effyis.partners.p2s.shared.avro.meta.input.Acceptor.Builder clearPricingRuleCode() {
      pricingRuleCode = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'merchantCategoryCode' field.
      * Merchant category code indicating the type of merchant (e.g., retail, restaurant) (P2S-00005)
      * @return The value.
      */
    public java.lang.CharSequence getMerchantCategoryCode() {
      return merchantCategoryCode;
    }


    /**
      * Sets the value of the 'merchantCategoryCode' field.
      * Merchant category code indicating the type of merchant (e.g., retail, restaurant) (P2S-00005)
      * @param value The value of 'merchantCategoryCode'.
      * @return This builder.
      */
    public effyis.partners.p2s.shared.avro.meta.input.Acceptor.Builder setMerchantCategoryCode(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.merchantCategoryCode = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'merchantCategoryCode' field has been set.
      * Merchant category code indicating the type of merchant (e.g., retail, restaurant) (P2S-00005)
      * @return True if the 'merchantCategoryCode' field has been set, false otherwise.
      */
    public boolean hasMerchantCategoryCode() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'merchantCategoryCode' field.
      * Merchant category code indicating the type of merchant (e.g., retail, restaurant) (P2S-00005)
      * @return This builder.
      */
    public effyis.partners.p2s.shared.avro.meta.input.Acceptor.Builder clearMerchantCategoryCode() {
      merchantCategoryCode = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'name' field.
      * The name of the merchant (P2S-00006)
      * @return The value.
      */
    public java.lang.CharSequence getName() {
      return name;
    }


    /**
      * Sets the value of the 'name' field.
      * The name of the merchant (P2S-00006)
      * @param value The value of 'name'.
      * @return This builder.
      */
    public effyis.partners.p2s.shared.avro.meta.input.Acceptor.Builder setName(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.name = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'name' field has been set.
      * The name of the merchant (P2S-00006)
      * @return True if the 'name' field has been set, false otherwise.
      */
    public boolean hasName() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'name' field.
      * The name of the merchant (P2S-00006)
      * @return This builder.
      */
    public effyis.partners.p2s.shared.avro.meta.input.Acceptor.Builder clearName() {
      name = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'city' field.
      * The city where the merchant is located (P2S-00007)
      * @return The value.
      */
    public java.lang.CharSequence getCity() {
      return city;
    }


    /**
      * Sets the value of the 'city' field.
      * The city where the merchant is located (P2S-00007)
      * @param value The value of 'city'.
      * @return This builder.
      */
    public effyis.partners.p2s.shared.avro.meta.input.Acceptor.Builder setCity(java.lang.CharSequence value) {
      validate(fields()[6], value);
      this.city = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'city' field has been set.
      * The city where the merchant is located (P2S-00007)
      * @return True if the 'city' field has been set, false otherwise.
      */
    public boolean hasCity() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'city' field.
      * The city where the merchant is located (P2S-00007)
      * @return This builder.
      */
    public effyis.partners.p2s.shared.avro.meta.input.Acceptor.Builder clearCity() {
      city = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'country' field.
      * The country where the merchant is located (P2S-00008)
      * @return The value.
      */
    public java.lang.CharSequence getCountry() {
      return country;
    }


    /**
      * Sets the value of the 'country' field.
      * The country where the merchant is located (P2S-00008)
      * @param value The value of 'country'.
      * @return This builder.
      */
    public effyis.partners.p2s.shared.avro.meta.input.Acceptor.Builder setCountry(java.lang.CharSequence value) {
      validate(fields()[7], value);
      this.country = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'country' field has been set.
      * The country where the merchant is located (P2S-00008)
      * @return True if the 'country' field has been set, false otherwise.
      */
    public boolean hasCountry() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'country' field.
      * The country where the merchant is located (P2S-00008)
      * @return This builder.
      */
    public effyis.partners.p2s.shared.avro.meta.input.Acceptor.Builder clearCountry() {
      country = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'identifier' field.
      * Additional identifier for the merchant (e.g., NFC Field 55, TLV data) (P2S-00009)
      * @return The value.
      */
    public java.lang.CharSequence getIdentifier() {
      return identifier;
    }


    /**
      * Sets the value of the 'identifier' field.
      * Additional identifier for the merchant (e.g., NFC Field 55, TLV data) (P2S-00009)
      * @param value The value of 'identifier'.
      * @return This builder.
      */
    public effyis.partners.p2s.shared.avro.meta.input.Acceptor.Builder setIdentifier(java.lang.CharSequence value) {
      validate(fields()[8], value);
      this.identifier = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'identifier' field has been set.
      * Additional identifier for the merchant (e.g., NFC Field 55, TLV data) (P2S-00009)
      * @return True if the 'identifier' field has been set, false otherwise.
      */
    public boolean hasIdentifier() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'identifier' field.
      * Additional identifier for the merchant (e.g., NFC Field 55, TLV data) (P2S-00009)
      * @return This builder.
      */
    public effyis.partners.p2s.shared.avro.meta.input.Acceptor.Builder clearIdentifier() {
      identifier = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'referenceNumber' field.
      * Internal reference number used by the merchant for the transaction (P2S-00010)
      * @return The value.
      */
    public java.lang.CharSequence getReferenceNumber() {
      return referenceNumber;
    }


    /**
      * Sets the value of the 'referenceNumber' field.
      * Internal reference number used by the merchant for the transaction (P2S-00010)
      * @param value The value of 'referenceNumber'.
      * @return This builder.
      */
    public effyis.partners.p2s.shared.avro.meta.input.Acceptor.Builder setReferenceNumber(java.lang.CharSequence value) {
      validate(fields()[9], value);
      this.referenceNumber = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'referenceNumber' field has been set.
      * Internal reference number used by the merchant for the transaction (P2S-00010)
      * @return True if the 'referenceNumber' field has been set, false otherwise.
      */
    public boolean hasReferenceNumber() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'referenceNumber' field.
      * Internal reference number used by the merchant for the transaction (P2S-00010)
      * @return This builder.
      */
    public effyis.partners.p2s.shared.avro.meta.input.Acceptor.Builder clearReferenceNumber() {
      referenceNumber = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Acceptor build() {
      try {
        Acceptor record = new Acceptor();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.subId = fieldSetFlags()[1] ? this.subId : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.terminalId = fieldSetFlags()[2] ? this.terminalId : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.pricingRuleCode = fieldSetFlags()[3] ? this.pricingRuleCode : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.merchantCategoryCode = fieldSetFlags()[4] ? this.merchantCategoryCode : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.name = fieldSetFlags()[5] ? this.name : (java.lang.CharSequence) defaultValue(fields()[5]);
        record.city = fieldSetFlags()[6] ? this.city : (java.lang.CharSequence) defaultValue(fields()[6]);
        record.country = fieldSetFlags()[7] ? this.country : (java.lang.CharSequence) defaultValue(fields()[7]);
        record.identifier = fieldSetFlags()[8] ? this.identifier : (java.lang.CharSequence) defaultValue(fields()[8]);
        record.referenceNumber = fieldSetFlags()[9] ? this.referenceNumber : (java.lang.CharSequence) defaultValue(fields()[9]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Acceptor>
    WRITER$ = (org.apache.avro.io.DatumWriter<Acceptor>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Acceptor>
    READER$ = (org.apache.avro.io.DatumReader<Acceptor>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.id);

    if (this.subId == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.subId);
    }

    out.writeString(this.terminalId);

    if (this.pricingRuleCode == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.pricingRuleCode);
    }

    out.writeString(this.merchantCategoryCode);

    if (this.name == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.name);
    }

    if (this.city == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.city);
    }

    out.writeString(this.country);

    if (this.identifier == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.identifier);
    }

    if (this.referenceNumber == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.referenceNumber);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.id = in.readString(this.id instanceof Utf8 ? (Utf8)this.id : null);

      if (in.readIndex() != 1) {
        in.readNull();
        this.subId = null;
      } else {
        this.subId = in.readString(this.subId instanceof Utf8 ? (Utf8)this.subId : null);
      }

      this.terminalId = in.readString(this.terminalId instanceof Utf8 ? (Utf8)this.terminalId : null);

      if (in.readIndex() != 1) {
        in.readNull();
        this.pricingRuleCode = null;
      } else {
        this.pricingRuleCode = in.readString(this.pricingRuleCode instanceof Utf8 ? (Utf8)this.pricingRuleCode : null);
      }

      this.merchantCategoryCode = in.readString(this.merchantCategoryCode instanceof Utf8 ? (Utf8)this.merchantCategoryCode : null);

      if (in.readIndex() != 1) {
        in.readNull();
        this.name = null;
      } else {
        this.name = in.readString(this.name instanceof Utf8 ? (Utf8)this.name : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.city = null;
      } else {
        this.city = in.readString(this.city instanceof Utf8 ? (Utf8)this.city : null);
      }

      this.country = in.readString(this.country instanceof Utf8 ? (Utf8)this.country : null);

      if (in.readIndex() != 1) {
        in.readNull();
        this.identifier = null;
      } else {
        this.identifier = in.readString(this.identifier instanceof Utf8 ? (Utf8)this.identifier : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.referenceNumber = null;
      } else {
        this.referenceNumber = in.readString(this.referenceNumber instanceof Utf8 ? (Utf8)this.referenceNumber : null);
      }

    } else {
      for (int i = 0; i < 10; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.id = in.readString(this.id instanceof Utf8 ? (Utf8)this.id : null);
          break;

        case 1:
          if (in.readIndex() != 1) {
            in.readNull();
            this.subId = null;
          } else {
            this.subId = in.readString(this.subId instanceof Utf8 ? (Utf8)this.subId : null);
          }
          break;

        case 2:
          this.terminalId = in.readString(this.terminalId instanceof Utf8 ? (Utf8)this.terminalId : null);
          break;

        case 3:
          if (in.readIndex() != 1) {
            in.readNull();
            this.pricingRuleCode = null;
          } else {
            this.pricingRuleCode = in.readString(this.pricingRuleCode instanceof Utf8 ? (Utf8)this.pricingRuleCode : null);
          }
          break;

        case 4:
          this.merchantCategoryCode = in.readString(this.merchantCategoryCode instanceof Utf8 ? (Utf8)this.merchantCategoryCode : null);
          break;

        case 5:
          if (in.readIndex() != 1) {
            in.readNull();
            this.name = null;
          } else {
            this.name = in.readString(this.name instanceof Utf8 ? (Utf8)this.name : null);
          }
          break;

        case 6:
          if (in.readIndex() != 1) {
            in.readNull();
            this.city = null;
          } else {
            this.city = in.readString(this.city instanceof Utf8 ? (Utf8)this.city : null);
          }
          break;

        case 7:
          this.country = in.readString(this.country instanceof Utf8 ? (Utf8)this.country : null);
          break;

        case 8:
          if (in.readIndex() != 1) {
            in.readNull();
            this.identifier = null;
          } else {
            this.identifier = in.readString(this.identifier instanceof Utf8 ? (Utf8)this.identifier : null);
          }
          break;

        case 9:
          if (in.readIndex() != 1) {
            in.readNull();
            this.referenceNumber = null;
          } else {
            this.referenceNumber = in.readString(this.referenceNumber instanceof Utf8 ? (Utf8)this.referenceNumber : null);
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










