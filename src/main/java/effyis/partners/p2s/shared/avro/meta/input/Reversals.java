/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package effyis.partners.p2s.shared.avro.meta.input;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

/** Information about any reversals applied to the transaction */
@org.apache.avro.specific.AvroGenerated
public class Reversals extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -5713108920397544163L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Reversals\",\"namespace\":\"effyis.partners.p2s.shared.avro.meta.input\",\"doc\":\"Information about any reversals applied to the transaction\",\"fields\":[{\"name\":\"datetime\",\"type\":[\"null\",\"string\"],\"doc\":\"Reversal datetime (P2S-00046)\",\"default\":null},{\"name\":\"type\",\"type\":[\"null\",\"string\"],\"doc\":\"Reversal type (Partial/Total) (P2S-00047)\",\"default\":null},{\"name\":\"reason\",\"type\":[\"null\",\"string\"],\"doc\":\"Reason for reversal (P2S-00048)\",\"default\":null},{\"name\":\"amount\",\"type\":[\"null\",{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":20,\"scale\":10}],\"doc\":\"Reversed amount (P2S-00049)\",\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();
  static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.Conversions.DecimalConversion());
  }

  private static final BinaryMessageEncoder<Reversals> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Reversals> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Reversals> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Reversals> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Reversals> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Reversals to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Reversals from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Reversals instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Reversals fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Reversal datetime (P2S-00046) */
  private java.lang.CharSequence datetime;
  /** Reversal type (Partial/Total) (P2S-00047) */
  private java.lang.CharSequence type;
  /** Reason for reversal (P2S-00048) */
  private java.lang.CharSequence reason;
  /** Reversed amount (P2S-00049) */
  private java.math.BigDecimal amount;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Reversals() {}

  /**
   * All-args constructor.
   * @param datetime Reversal datetime (P2S-00046)
   * @param type Reversal type (Partial/Total) (P2S-00047)
   * @param reason Reason for reversal (P2S-00048)
   * @param amount Reversed amount (P2S-00049)
   */
  public Reversals(java.lang.CharSequence datetime, java.lang.CharSequence type, java.lang.CharSequence reason, java.math.BigDecimal amount) {
    this.datetime = datetime;
    this.type = type;
    this.reason = reason;
    this.amount = amount;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return datetime;
    case 1: return type;
    case 2: return reason;
    case 3: return amount;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: datetime = (java.lang.CharSequence)value$; break;
    case 1: type = (java.lang.CharSequence)value$; break;
    case 2: reason = (java.lang.CharSequence)value$; break;
    case 3: amount = (java.math.BigDecimal)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'datetime' field.
   * @return Reversal datetime (P2S-00046)
   */
  public java.lang.CharSequence getDatetime() {
    return datetime;
  }


  /**
   * Sets the value of the 'datetime' field.
   * Reversal datetime (P2S-00046)
   * @param value the value to set.
   */
  public void setDatetime(java.lang.CharSequence value) {
    this.datetime = value;
  }

  /**
   * Gets the value of the 'type' field.
   * @return Reversal type (Partial/Total) (P2S-00047)
   */
  public java.lang.CharSequence getType() {
    return type;
  }


  /**
   * Sets the value of the 'type' field.
   * Reversal type (Partial/Total) (P2S-00047)
   * @param value the value to set.
   */
  public void setType(java.lang.CharSequence value) {
    this.type = value;
  }

  /**
   * Gets the value of the 'reason' field.
   * @return Reason for reversal (P2S-00048)
   */
  public java.lang.CharSequence getReason() {
    return reason;
  }


  /**
   * Sets the value of the 'reason' field.
   * Reason for reversal (P2S-00048)
   * @param value the value to set.
   */
  public void setReason(java.lang.CharSequence value) {
    this.reason = value;
  }

  /**
   * Gets the value of the 'amount' field.
   * @return Reversed amount (P2S-00049)
   */
  public java.math.BigDecimal getAmount() {
    return amount;
  }


  /**
   * Sets the value of the 'amount' field.
   * Reversed amount (P2S-00049)
   * @param value the value to set.
   */
  public void setAmount(java.math.BigDecimal value) {
    this.amount = value;
  }

  /**
   * Creates a new Reversals RecordBuilder.
   * @return A new Reversals RecordBuilder
   */
  public static effyis.partners.p2s.shared.avro.meta.input.Reversals.Builder newBuilder() {
    return new effyis.partners.p2s.shared.avro.meta.input.Reversals.Builder();
  }

  /**
   * Creates a new Reversals RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Reversals RecordBuilder
   */
  public static effyis.partners.p2s.shared.avro.meta.input.Reversals.Builder newBuilder(effyis.partners.p2s.shared.avro.meta.input.Reversals.Builder other) {
    if (other == null) {
      return new effyis.partners.p2s.shared.avro.meta.input.Reversals.Builder();
    } else {
      return new effyis.partners.p2s.shared.avro.meta.input.Reversals.Builder(other);
    }
  }

  /**
   * Creates a new Reversals RecordBuilder by copying an existing Reversals instance.
   * @param other The existing instance to copy.
   * @return A new Reversals RecordBuilder
   */
  public static effyis.partners.p2s.shared.avro.meta.input.Reversals.Builder newBuilder(effyis.partners.p2s.shared.avro.meta.input.Reversals other) {
    if (other == null) {
      return new effyis.partners.p2s.shared.avro.meta.input.Reversals.Builder();
    } else {
      return new effyis.partners.p2s.shared.avro.meta.input.Reversals.Builder(other);
    }
  }

  /**
   * RecordBuilder for Reversals instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Reversals>
    implements org.apache.avro.data.RecordBuilder<Reversals> {

    /** Reversal datetime (P2S-00046) */
    private java.lang.CharSequence datetime;
    /** Reversal type (Partial/Total) (P2S-00047) */
    private java.lang.CharSequence type;
    /** Reason for reversal (P2S-00048) */
    private java.lang.CharSequence reason;
    /** Reversed amount (P2S-00049) */
    private java.math.BigDecimal amount;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(effyis.partners.p2s.shared.avro.meta.input.Reversals.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.datetime)) {
        this.datetime = data().deepCopy(fields()[0].schema(), other.datetime);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.type)) {
        this.type = data().deepCopy(fields()[1].schema(), other.type);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.reason)) {
        this.reason = data().deepCopy(fields()[2].schema(), other.reason);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.amount)) {
        this.amount = data().deepCopy(fields()[3].schema(), other.amount);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
    }

    /**
     * Creates a Builder by copying an existing Reversals instance
     * @param other The existing instance to copy.
     */
    private Builder(effyis.partners.p2s.shared.avro.meta.input.Reversals other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.datetime)) {
        this.datetime = data().deepCopy(fields()[0].schema(), other.datetime);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.type)) {
        this.type = data().deepCopy(fields()[1].schema(), other.type);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.reason)) {
        this.reason = data().deepCopy(fields()[2].schema(), other.reason);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.amount)) {
        this.amount = data().deepCopy(fields()[3].schema(), other.amount);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'datetime' field.
      * Reversal datetime (P2S-00046)
      * @return The value.
      */
    public java.lang.CharSequence getDatetime() {
      return datetime;
    }


    /**
      * Sets the value of the 'datetime' field.
      * Reversal datetime (P2S-00046)
      * @param value The value of 'datetime'.
      * @return This builder.
      */
    public effyis.partners.p2s.shared.avro.meta.input.Reversals.Builder setDatetime(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.datetime = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'datetime' field has been set.
      * Reversal datetime (P2S-00046)
      * @return True if the 'datetime' field has been set, false otherwise.
      */
    public boolean hasDatetime() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'datetime' field.
      * Reversal datetime (P2S-00046)
      * @return This builder.
      */
    public effyis.partners.p2s.shared.avro.meta.input.Reversals.Builder clearDatetime() {
      datetime = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'type' field.
      * Reversal type (Partial/Total) (P2S-00047)
      * @return The value.
      */
    public java.lang.CharSequence getType() {
      return type;
    }


    /**
      * Sets the value of the 'type' field.
      * Reversal type (Partial/Total) (P2S-00047)
      * @param value The value of 'type'.
      * @return This builder.
      */
    public effyis.partners.p2s.shared.avro.meta.input.Reversals.Builder setType(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.type = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'type' field has been set.
      * Reversal type (Partial/Total) (P2S-00047)
      * @return True if the 'type' field has been set, false otherwise.
      */
    public boolean hasType() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'type' field.
      * Reversal type (Partial/Total) (P2S-00047)
      * @return This builder.
      */
    public effyis.partners.p2s.shared.avro.meta.input.Reversals.Builder clearType() {
      type = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'reason' field.
      * Reason for reversal (P2S-00048)
      * @return The value.
      */
    public java.lang.CharSequence getReason() {
      return reason;
    }


    /**
      * Sets the value of the 'reason' field.
      * Reason for reversal (P2S-00048)
      * @param value The value of 'reason'.
      * @return This builder.
      */
    public effyis.partners.p2s.shared.avro.meta.input.Reversals.Builder setReason(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.reason = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'reason' field has been set.
      * Reason for reversal (P2S-00048)
      * @return True if the 'reason' field has been set, false otherwise.
      */
    public boolean hasReason() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'reason' field.
      * Reason for reversal (P2S-00048)
      * @return This builder.
      */
    public effyis.partners.p2s.shared.avro.meta.input.Reversals.Builder clearReason() {
      reason = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'amount' field.
      * Reversed amount (P2S-00049)
      * @return The value.
      */
    public java.math.BigDecimal getAmount() {
      return amount;
    }


    /**
      * Sets the value of the 'amount' field.
      * Reversed amount (P2S-00049)
      * @param value The value of 'amount'.
      * @return This builder.
      */
    public effyis.partners.p2s.shared.avro.meta.input.Reversals.Builder setAmount(java.math.BigDecimal value) {
      validate(fields()[3], value);
      this.amount = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'amount' field has been set.
      * Reversed amount (P2S-00049)
      * @return True if the 'amount' field has been set, false otherwise.
      */
    public boolean hasAmount() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'amount' field.
      * Reversed amount (P2S-00049)
      * @return This builder.
      */
    public effyis.partners.p2s.shared.avro.meta.input.Reversals.Builder clearAmount() {
      amount = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Reversals build() {
      try {
        Reversals record = new Reversals();
        record.datetime = fieldSetFlags()[0] ? this.datetime : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.type = fieldSetFlags()[1] ? this.type : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.reason = fieldSetFlags()[2] ? this.reason : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.amount = fieldSetFlags()[3] ? this.amount : (java.math.BigDecimal) defaultValue(fields()[3]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Reversals>
    WRITER$ = (org.apache.avro.io.DatumWriter<Reversals>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Reversals>
    READER$ = (org.apache.avro.io.DatumReader<Reversals>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










