/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package effyis.partners.p2s.shared.avro.meta.input;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

/** Details of the transaction */
@org.apache.avro.specific.AvroGenerated
public class Transaction extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 3760158153421722290L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Transaction\",\"namespace\":\"effyis.partners.p2s.shared.avro.meta.input\",\"doc\":\"Details of the transaction\",\"fields\":[{\"name\":\"type\",\"type\":\"string\",\"doc\":\"Transaction type (Purchase, Load, etc.) (P2S-00053)\"},{\"name\":\"transactionExternalId\",\"type\":\"string\",\"doc\":\"Id sent by the processor (P2S-00056)\"},{\"name\":\"transactionCountryCode\",\"type\":\"string\",\"doc\":\"Country code of the transaction (P2S-00057)\"},{\"name\":\"transactionStatus\",\"type\":\"string\",\"doc\":\"Lifecycle of the transaction (P2S-00058)\"},{\"name\":\"transactionAmount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":20,\"scale\":10},\"doc\":\"Amount based on transaction status (P2S-00060)\"},{\"name\":\"currency\",\"type\":\"string\",\"doc\":\"Currency of amount (ISO4217 or numeric) (P2S-00062)\"},{\"name\":\"transactionAdditionalAmount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":20,\"scale\":10},\"doc\":\"Additional Amount, Field 54 ISO8583 (P2S-00130)\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();
  static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.Conversions.DecimalConversion());
  }

  private static final BinaryMessageEncoder<Transaction> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Transaction> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Transaction> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Transaction> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Transaction> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Transaction to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Transaction from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Transaction instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Transaction fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Transaction type (Purchase, Load, etc.) (P2S-00053) */
  private java.lang.CharSequence type;
  /** Id sent by the processor (P2S-00056) */
  private java.lang.CharSequence transactionExternalId;
  /** Country code of the transaction (P2S-00057) */
  private java.lang.CharSequence transactionCountryCode;
  /** Lifecycle of the transaction (P2S-00058) */
  private java.lang.CharSequence transactionStatus;
  /** Amount based on transaction status (P2S-00060) */
  private java.math.BigDecimal transactionAmount;
  /** Currency of amount (ISO4217 or numeric) (P2S-00062) */
  private java.lang.CharSequence currency;
  /** Additional Amount, Field 54 ISO8583 (P2S-00130) */
  private java.math.BigDecimal transactionAdditionalAmount;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Transaction() {}

  /**
   * All-args constructor.
   * @param type Transaction type (Purchase, Load, etc.) (P2S-00053)
   * @param transactionExternalId Id sent by the processor (P2S-00056)
   * @param transactionCountryCode Country code of the transaction (P2S-00057)
   * @param transactionStatus Lifecycle of the transaction (P2S-00058)
   * @param transactionAmount Amount based on transaction status (P2S-00060)
   * @param currency Currency of amount (ISO4217 or numeric) (P2S-00062)
   * @param transactionAdditionalAmount Additional Amount, Field 54 ISO8583 (P2S-00130)
   */
  public Transaction(java.lang.CharSequence type, java.lang.CharSequence transactionExternalId, java.lang.CharSequence transactionCountryCode, java.lang.CharSequence transactionStatus, java.math.BigDecimal transactionAmount, java.lang.CharSequence currency, java.math.BigDecimal transactionAdditionalAmount) {
    this.type = type;
    this.transactionExternalId = transactionExternalId;
    this.transactionCountryCode = transactionCountryCode;
    this.transactionStatus = transactionStatus;
    this.transactionAmount = transactionAmount;
    this.currency = currency;
    this.transactionAdditionalAmount = transactionAdditionalAmount;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return type;
    case 1: return transactionExternalId;
    case 2: return transactionCountryCode;
    case 3: return transactionStatus;
    case 4: return transactionAmount;
    case 5: return currency;
    case 6: return transactionAdditionalAmount;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  private static final org.apache.avro.Conversion<?>[] conversions =
      new org.apache.avro.Conversion<?>[] {
      null,
      null,
      null,
      null,
      new org.apache.avro.Conversions.DecimalConversion(),
      null,
      new org.apache.avro.Conversions.DecimalConversion(),
      null
  };

  @Override
  public org.apache.avro.Conversion<?> getConversion(int field) {
    return conversions[field];
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: type = (java.lang.CharSequence)value$; break;
    case 1: transactionExternalId = (java.lang.CharSequence)value$; break;
    case 2: transactionCountryCode = (java.lang.CharSequence)value$; break;
    case 3: transactionStatus = (java.lang.CharSequence)value$; break;
    case 4: transactionAmount = (java.math.BigDecimal)value$; break;
    case 5: currency = (java.lang.CharSequence)value$; break;
    case 6: transactionAdditionalAmount = (java.math.BigDecimal)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'type' field.
   * @return Transaction type (Purchase, Load, etc.) (P2S-00053)
   */
  public java.lang.CharSequence getType() {
    return type;
  }


  /**
   * Sets the value of the 'type' field.
   * Transaction type (Purchase, Load, etc.) (P2S-00053)
   * @param value the value to set.
   */
  public void setType(java.lang.CharSequence value) {
    this.type = value;
  }

  /**
   * Gets the value of the 'transactionExternalId' field.
   * @return Id sent by the processor (P2S-00056)
   */
  public java.lang.CharSequence getTransactionExternalId() {
    return transactionExternalId;
  }


  /**
   * Sets the value of the 'transactionExternalId' field.
   * Id sent by the processor (P2S-00056)
   * @param value the value to set.
   */
  public void setTransactionExternalId(java.lang.CharSequence value) {
    this.transactionExternalId = value;
  }

  /**
   * Gets the value of the 'transactionCountryCode' field.
   * @return Country code of the transaction (P2S-00057)
   */
  public java.lang.CharSequence getTransactionCountryCode() {
    return transactionCountryCode;
  }


  /**
   * Sets the value of the 'transactionCountryCode' field.
   * Country code of the transaction (P2S-00057)
   * @param value the value to set.
   */
  public void setTransactionCountryCode(java.lang.CharSequence value) {
    this.transactionCountryCode = value;
  }

  /**
   * Gets the value of the 'transactionStatus' field.
   * @return Lifecycle of the transaction (P2S-00058)
   */
  public java.lang.CharSequence getTransactionStatus() {
    return transactionStatus;
  }


  /**
   * Sets the value of the 'transactionStatus' field.
   * Lifecycle of the transaction (P2S-00058)
   * @param value the value to set.
   */
  public void setTransactionStatus(java.lang.CharSequence value) {
    this.transactionStatus = value;
  }

  /**
   * Gets the value of the 'transactionAmount' field.
   * @return Amount based on transaction status (P2S-00060)
   */
  public java.math.BigDecimal getTransactionAmount() {
    return transactionAmount;
  }


  /**
   * Sets the value of the 'transactionAmount' field.
   * Amount based on transaction status (P2S-00060)
   * @param value the value to set.
   */
  public void setTransactionAmount(java.math.BigDecimal value) {
    this.transactionAmount = value;
  }

  /**
   * Gets the value of the 'currency' field.
   * @return Currency of amount (ISO4217 or numeric) (P2S-00062)
   */
  public java.lang.CharSequence getCurrency() {
    return currency;
  }


  /**
   * Sets the value of the 'currency' field.
   * Currency of amount (ISO4217 or numeric) (P2S-00062)
   * @param value the value to set.
   */
  public void setCurrency(java.lang.CharSequence value) {
    this.currency = value;
  }

  /**
   * Gets the value of the 'transactionAdditionalAmount' field.
   * @return Additional Amount, Field 54 ISO8583 (P2S-00130)
   */
  public java.math.BigDecimal getTransactionAdditionalAmount() {
    return transactionAdditionalAmount;
  }


  /**
   * Sets the value of the 'transactionAdditionalAmount' field.
   * Additional Amount, Field 54 ISO8583 (P2S-00130)
   * @param value the value to set.
   */
  public void setTransactionAdditionalAmount(java.math.BigDecimal value) {
    this.transactionAdditionalAmount = value;
  }

  /**
   * Creates a new Transaction RecordBuilder.
   * @return A new Transaction RecordBuilder
   */
  public static effyis.partners.p2s.shared.avro.meta.input.Transaction.Builder newBuilder() {
    return new effyis.partners.p2s.shared.avro.meta.input.Transaction.Builder();
  }

  /**
   * Creates a new Transaction RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Transaction RecordBuilder
   */
  public static effyis.partners.p2s.shared.avro.meta.input.Transaction.Builder newBuilder(effyis.partners.p2s.shared.avro.meta.input.Transaction.Builder other) {
    if (other == null) {
      return new effyis.partners.p2s.shared.avro.meta.input.Transaction.Builder();
    } else {
      return new effyis.partners.p2s.shared.avro.meta.input.Transaction.Builder(other);
    }
  }

  /**
   * Creates a new Transaction RecordBuilder by copying an existing Transaction instance.
   * @param other The existing instance to copy.
   * @return A new Transaction RecordBuilder
   */
  public static effyis.partners.p2s.shared.avro.meta.input.Transaction.Builder newBuilder(effyis.partners.p2s.shared.avro.meta.input.Transaction other) {
    if (other == null) {
      return new effyis.partners.p2s.shared.avro.meta.input.Transaction.Builder();
    } else {
      return new effyis.partners.p2s.shared.avro.meta.input.Transaction.Builder(other);
    }
  }

  /**
   * RecordBuilder for Transaction instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Transaction>
    implements org.apache.avro.data.RecordBuilder<Transaction> {

    /** Transaction type (Purchase, Load, etc.) (P2S-00053) */
    private java.lang.CharSequence type;
    /** Id sent by the processor (P2S-00056) */
    private java.lang.CharSequence transactionExternalId;
    /** Country code of the transaction (P2S-00057) */
    private java.lang.CharSequence transactionCountryCode;
    /** Lifecycle of the transaction (P2S-00058) */
    private java.lang.CharSequence transactionStatus;
    /** Amount based on transaction status (P2S-00060) */
    private java.math.BigDecimal transactionAmount;
    /** Currency of amount (ISO4217 or numeric) (P2S-00062) */
    private java.lang.CharSequence currency;
    /** Additional Amount, Field 54 ISO8583 (P2S-00130) */
    private java.math.BigDecimal transactionAdditionalAmount;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(effyis.partners.p2s.shared.avro.meta.input.Transaction.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.type)) {
        this.type = data().deepCopy(fields()[0].schema(), other.type);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.transactionExternalId)) {
        this.transactionExternalId = data().deepCopy(fields()[1].schema(), other.transactionExternalId);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.transactionCountryCode)) {
        this.transactionCountryCode = data().deepCopy(fields()[2].schema(), other.transactionCountryCode);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.transactionStatus)) {
        this.transactionStatus = data().deepCopy(fields()[3].schema(), other.transactionStatus);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.transactionAmount)) {
        this.transactionAmount = data().deepCopy(fields()[4].schema(), other.transactionAmount);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.currency)) {
        this.currency = data().deepCopy(fields()[5].schema(), other.currency);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.transactionAdditionalAmount)) {
        this.transactionAdditionalAmount = data().deepCopy(fields()[6].schema(), other.transactionAdditionalAmount);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
    }

    /**
     * Creates a Builder by copying an existing Transaction instance
     * @param other The existing instance to copy.
     */
    private Builder(effyis.partners.p2s.shared.avro.meta.input.Transaction other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.type)) {
        this.type = data().deepCopy(fields()[0].schema(), other.type);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.transactionExternalId)) {
        this.transactionExternalId = data().deepCopy(fields()[1].schema(), other.transactionExternalId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.transactionCountryCode)) {
        this.transactionCountryCode = data().deepCopy(fields()[2].schema(), other.transactionCountryCode);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.transactionStatus)) {
        this.transactionStatus = data().deepCopy(fields()[3].schema(), other.transactionStatus);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.transactionAmount)) {
        this.transactionAmount = data().deepCopy(fields()[4].schema(), other.transactionAmount);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.currency)) {
        this.currency = data().deepCopy(fields()[5].schema(), other.currency);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.transactionAdditionalAmount)) {
        this.transactionAdditionalAmount = data().deepCopy(fields()[6].schema(), other.transactionAdditionalAmount);
        fieldSetFlags()[6] = true;
      }
    }

    /**
      * Gets the value of the 'type' field.
      * Transaction type (Purchase, Load, etc.) (P2S-00053)
      * @return The value.
      */
    public java.lang.CharSequence getType() {
      return type;
    }


    /**
      * Sets the value of the 'type' field.
      * Transaction type (Purchase, Load, etc.) (P2S-00053)
      * @param value The value of 'type'.
      * @return This builder.
      */
    public effyis.partners.p2s.shared.avro.meta.input.Transaction.Builder setType(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.type = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'type' field has been set.
      * Transaction type (Purchase, Load, etc.) (P2S-00053)
      * @return True if the 'type' field has been set, false otherwise.
      */
    public boolean hasType() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'type' field.
      * Transaction type (Purchase, Load, etc.) (P2S-00053)
      * @return This builder.
      */
    public effyis.partners.p2s.shared.avro.meta.input.Transaction.Builder clearType() {
      type = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'transactionExternalId' field.
      * Id sent by the processor (P2S-00056)
      * @return The value.
      */
    public java.lang.CharSequence getTransactionExternalId() {
      return transactionExternalId;
    }


    /**
      * Sets the value of the 'transactionExternalId' field.
      * Id sent by the processor (P2S-00056)
      * @param value The value of 'transactionExternalId'.
      * @return This builder.
      */
    public effyis.partners.p2s.shared.avro.meta.input.Transaction.Builder setTransactionExternalId(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.transactionExternalId = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'transactionExternalId' field has been set.
      * Id sent by the processor (P2S-00056)
      * @return True if the 'transactionExternalId' field has been set, false otherwise.
      */
    public boolean hasTransactionExternalId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'transactionExternalId' field.
      * Id sent by the processor (P2S-00056)
      * @return This builder.
      */
    public effyis.partners.p2s.shared.avro.meta.input.Transaction.Builder clearTransactionExternalId() {
      transactionExternalId = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'transactionCountryCode' field.
      * Country code of the transaction (P2S-00057)
      * @return The value.
      */
    public java.lang.CharSequence getTransactionCountryCode() {
      return transactionCountryCode;
    }


    /**
      * Sets the value of the 'transactionCountryCode' field.
      * Country code of the transaction (P2S-00057)
      * @param value The value of 'transactionCountryCode'.
      * @return This builder.
      */
    public effyis.partners.p2s.shared.avro.meta.input.Transaction.Builder setTransactionCountryCode(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.transactionCountryCode = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'transactionCountryCode' field has been set.
      * Country code of the transaction (P2S-00057)
      * @return True if the 'transactionCountryCode' field has been set, false otherwise.
      */
    public boolean hasTransactionCountryCode() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'transactionCountryCode' field.
      * Country code of the transaction (P2S-00057)
      * @return This builder.
      */
    public effyis.partners.p2s.shared.avro.meta.input.Transaction.Builder clearTransactionCountryCode() {
      transactionCountryCode = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'transactionStatus' field.
      * Lifecycle of the transaction (P2S-00058)
      * @return The value.
      */
    public java.lang.CharSequence getTransactionStatus() {
      return transactionStatus;
    }


    /**
      * Sets the value of the 'transactionStatus' field.
      * Lifecycle of the transaction (P2S-00058)
      * @param value The value of 'transactionStatus'.
      * @return This builder.
      */
    public effyis.partners.p2s.shared.avro.meta.input.Transaction.Builder setTransactionStatus(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.transactionStatus = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'transactionStatus' field has been set.
      * Lifecycle of the transaction (P2S-00058)
      * @return True if the 'transactionStatus' field has been set, false otherwise.
      */
    public boolean hasTransactionStatus() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'transactionStatus' field.
      * Lifecycle of the transaction (P2S-00058)
      * @return This builder.
      */
    public effyis.partners.p2s.shared.avro.meta.input.Transaction.Builder clearTransactionStatus() {
      transactionStatus = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'transactionAmount' field.
      * Amount based on transaction status (P2S-00060)
      * @return The value.
      */
    public java.math.BigDecimal getTransactionAmount() {
      return transactionAmount;
    }


    /**
      * Sets the value of the 'transactionAmount' field.
      * Amount based on transaction status (P2S-00060)
      * @param value The value of 'transactionAmount'.
      * @return This builder.
      */
    public effyis.partners.p2s.shared.avro.meta.input.Transaction.Builder setTransactionAmount(java.math.BigDecimal value) {
      validate(fields()[4], value);
      this.transactionAmount = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'transactionAmount' field has been set.
      * Amount based on transaction status (P2S-00060)
      * @return True if the 'transactionAmount' field has been set, false otherwise.
      */
    public boolean hasTransactionAmount() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'transactionAmount' field.
      * Amount based on transaction status (P2S-00060)
      * @return This builder.
      */
    public effyis.partners.p2s.shared.avro.meta.input.Transaction.Builder clearTransactionAmount() {
      transactionAmount = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'currency' field.
      * Currency of amount (ISO4217 or numeric) (P2S-00062)
      * @return The value.
      */
    public java.lang.CharSequence getCurrency() {
      return currency;
    }


    /**
      * Sets the value of the 'currency' field.
      * Currency of amount (ISO4217 or numeric) (P2S-00062)
      * @param value The value of 'currency'.
      * @return This builder.
      */
    public effyis.partners.p2s.shared.avro.meta.input.Transaction.Builder setCurrency(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.currency = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'currency' field has been set.
      * Currency of amount (ISO4217 or numeric) (P2S-00062)
      * @return True if the 'currency' field has been set, false otherwise.
      */
    public boolean hasCurrency() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'currency' field.
      * Currency of amount (ISO4217 or numeric) (P2S-00062)
      * @return This builder.
      */
    public effyis.partners.p2s.shared.avro.meta.input.Transaction.Builder clearCurrency() {
      currency = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'transactionAdditionalAmount' field.
      * Additional Amount, Field 54 ISO8583 (P2S-00130)
      * @return The value.
      */
    public java.math.BigDecimal getTransactionAdditionalAmount() {
      return transactionAdditionalAmount;
    }


    /**
      * Sets the value of the 'transactionAdditionalAmount' field.
      * Additional Amount, Field 54 ISO8583 (P2S-00130)
      * @param value The value of 'transactionAdditionalAmount'.
      * @return This builder.
      */
    public effyis.partners.p2s.shared.avro.meta.input.Transaction.Builder setTransactionAdditionalAmount(java.math.BigDecimal value) {
      validate(fields()[6], value);
      this.transactionAdditionalAmount = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'transactionAdditionalAmount' field has been set.
      * Additional Amount, Field 54 ISO8583 (P2S-00130)
      * @return True if the 'transactionAdditionalAmount' field has been set, false otherwise.
      */
    public boolean hasTransactionAdditionalAmount() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'transactionAdditionalAmount' field.
      * Additional Amount, Field 54 ISO8583 (P2S-00130)
      * @return This builder.
      */
    public effyis.partners.p2s.shared.avro.meta.input.Transaction.Builder clearTransactionAdditionalAmount() {
      transactionAdditionalAmount = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Transaction build() {
      try {
        Transaction record = new Transaction();
        record.type = fieldSetFlags()[0] ? this.type : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.transactionExternalId = fieldSetFlags()[1] ? this.transactionExternalId : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.transactionCountryCode = fieldSetFlags()[2] ? this.transactionCountryCode : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.transactionStatus = fieldSetFlags()[3] ? this.transactionStatus : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.transactionAmount = fieldSetFlags()[4] ? this.transactionAmount : (java.math.BigDecimal) defaultValue(fields()[4]);
        record.currency = fieldSetFlags()[5] ? this.currency : (java.lang.CharSequence) defaultValue(fields()[5]);
        record.transactionAdditionalAmount = fieldSetFlags()[6] ? this.transactionAdditionalAmount : (java.math.BigDecimal) defaultValue(fields()[6]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Transaction>
    WRITER$ = (org.apache.avro.io.DatumWriter<Transaction>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Transaction>
    READER$ = (org.apache.avro.io.DatumReader<Transaction>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










