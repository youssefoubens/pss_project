/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package effyis.partners.p2s.shared.avro.meta.input;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

/** Dynamic Currency Conversion details */
@org.apache.avro.specific.AvroGenerated
public class DynamicCurrencyConversion extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 1537478975656305384L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"DynamicCurrencyConversion\",\"namespace\":\"effyis.partners.p2s.shared.avro.meta.input\",\"doc\":\"Dynamic Currency Conversion details\",\"fields\":[{\"name\":\"isDcc\",\"type\":\"boolean\",\"doc\":\"Indicates if this is a DCC (Dynamic Currency Conversion) transaction (P2S-00038)\"},{\"name\":\"dccCurrency\",\"type\":[\"null\",\"string\"],\"doc\":\"The DCC currency used in the transaction (P2S-00039)\",\"default\":null},{\"name\":\"dccMarkup\",\"type\":[\"null\",\"string\"],\"doc\":\"The markup added to the DCC transaction (P2S-00040)\",\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<DynamicCurrencyConversion> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<DynamicCurrencyConversion> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<DynamicCurrencyConversion> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<DynamicCurrencyConversion> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<DynamicCurrencyConversion> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this DynamicCurrencyConversion to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a DynamicCurrencyConversion from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a DynamicCurrencyConversion instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static DynamicCurrencyConversion fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Indicates if this is a DCC (Dynamic Currency Conversion) transaction (P2S-00038) */
  private boolean isDcc;
  /** The DCC currency used in the transaction (P2S-00039) */
  private java.lang.CharSequence dccCurrency;
  /** The markup added to the DCC transaction (P2S-00040) */
  private java.lang.CharSequence dccMarkup;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public DynamicCurrencyConversion() {}

  /**
   * All-args constructor.
   * @param isDcc Indicates if this is a DCC (Dynamic Currency Conversion) transaction (P2S-00038)
   * @param dccCurrency The DCC currency used in the transaction (P2S-00039)
   * @param dccMarkup The markup added to the DCC transaction (P2S-00040)
   */
  public DynamicCurrencyConversion(java.lang.Boolean isDcc, java.lang.CharSequence dccCurrency, java.lang.CharSequence dccMarkup) {
    this.isDcc = isDcc;
    this.dccCurrency = dccCurrency;
    this.dccMarkup = dccMarkup;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return isDcc;
    case 1: return dccCurrency;
    case 2: return dccMarkup;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: isDcc = (java.lang.Boolean)value$; break;
    case 1: dccCurrency = (java.lang.CharSequence)value$; break;
    case 2: dccMarkup = (java.lang.CharSequence)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'isDcc' field.
   * @return Indicates if this is a DCC (Dynamic Currency Conversion) transaction (P2S-00038)
   */
  public boolean getIsDcc() {
    return isDcc;
  }


  /**
   * Sets the value of the 'isDcc' field.
   * Indicates if this is a DCC (Dynamic Currency Conversion) transaction (P2S-00038)
   * @param value the value to set.
   */
  public void setIsDcc(boolean value) {
    this.isDcc = value;
  }

  /**
   * Gets the value of the 'dccCurrency' field.
   * @return The DCC currency used in the transaction (P2S-00039)
   */
  public java.lang.CharSequence getDccCurrency() {
    return dccCurrency;
  }


  /**
   * Sets the value of the 'dccCurrency' field.
   * The DCC currency used in the transaction (P2S-00039)
   * @param value the value to set.
   */
  public void setDccCurrency(java.lang.CharSequence value) {
    this.dccCurrency = value;
  }

  /**
   * Gets the value of the 'dccMarkup' field.
   * @return The markup added to the DCC transaction (P2S-00040)
   */
  public java.lang.CharSequence getDccMarkup() {
    return dccMarkup;
  }


  /**
   * Sets the value of the 'dccMarkup' field.
   * The markup added to the DCC transaction (P2S-00040)
   * @param value the value to set.
   */
  public void setDccMarkup(java.lang.CharSequence value) {
    this.dccMarkup = value;
  }

  /**
   * Creates a new DynamicCurrencyConversion RecordBuilder.
   * @return A new DynamicCurrencyConversion RecordBuilder
   */
  public static effyis.partners.p2s.shared.avro.meta.input.DynamicCurrencyConversion.Builder newBuilder() {
    return new effyis.partners.p2s.shared.avro.meta.input.DynamicCurrencyConversion.Builder();
  }

  /**
   * Creates a new DynamicCurrencyConversion RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new DynamicCurrencyConversion RecordBuilder
   */
  public static effyis.partners.p2s.shared.avro.meta.input.DynamicCurrencyConversion.Builder newBuilder(effyis.partners.p2s.shared.avro.meta.input.DynamicCurrencyConversion.Builder other) {
    if (other == null) {
      return new effyis.partners.p2s.shared.avro.meta.input.DynamicCurrencyConversion.Builder();
    } else {
      return new effyis.partners.p2s.shared.avro.meta.input.DynamicCurrencyConversion.Builder(other);
    }
  }

  /**
   * Creates a new DynamicCurrencyConversion RecordBuilder by copying an existing DynamicCurrencyConversion instance.
   * @param other The existing instance to copy.
   * @return A new DynamicCurrencyConversion RecordBuilder
   */
  public static effyis.partners.p2s.shared.avro.meta.input.DynamicCurrencyConversion.Builder newBuilder(effyis.partners.p2s.shared.avro.meta.input.DynamicCurrencyConversion other) {
    if (other == null) {
      return new effyis.partners.p2s.shared.avro.meta.input.DynamicCurrencyConversion.Builder();
    } else {
      return new effyis.partners.p2s.shared.avro.meta.input.DynamicCurrencyConversion.Builder(other);
    }
  }

  /**
   * RecordBuilder for DynamicCurrencyConversion instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<DynamicCurrencyConversion>
    implements org.apache.avro.data.RecordBuilder<DynamicCurrencyConversion> {

    /** Indicates if this is a DCC (Dynamic Currency Conversion) transaction (P2S-00038) */
    private boolean isDcc;
    /** The DCC currency used in the transaction (P2S-00039) */
    private java.lang.CharSequence dccCurrency;
    /** The markup added to the DCC transaction (P2S-00040) */
    private java.lang.CharSequence dccMarkup;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(effyis.partners.p2s.shared.avro.meta.input.DynamicCurrencyConversion.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.isDcc)) {
        this.isDcc = data().deepCopy(fields()[0].schema(), other.isDcc);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.dccCurrency)) {
        this.dccCurrency = data().deepCopy(fields()[1].schema(), other.dccCurrency);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.dccMarkup)) {
        this.dccMarkup = data().deepCopy(fields()[2].schema(), other.dccMarkup);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
    }

    /**
     * Creates a Builder by copying an existing DynamicCurrencyConversion instance
     * @param other The existing instance to copy.
     */
    private Builder(effyis.partners.p2s.shared.avro.meta.input.DynamicCurrencyConversion other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.isDcc)) {
        this.isDcc = data().deepCopy(fields()[0].schema(), other.isDcc);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.dccCurrency)) {
        this.dccCurrency = data().deepCopy(fields()[1].schema(), other.dccCurrency);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.dccMarkup)) {
        this.dccMarkup = data().deepCopy(fields()[2].schema(), other.dccMarkup);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'isDcc' field.
      * Indicates if this is a DCC (Dynamic Currency Conversion) transaction (P2S-00038)
      * @return The value.
      */
    public boolean getIsDcc() {
      return isDcc;
    }


    /**
      * Sets the value of the 'isDcc' field.
      * Indicates if this is a DCC (Dynamic Currency Conversion) transaction (P2S-00038)
      * @param value The value of 'isDcc'.
      * @return This builder.
      */
    public effyis.partners.p2s.shared.avro.meta.input.DynamicCurrencyConversion.Builder setIsDcc(boolean value) {
      validate(fields()[0], value);
      this.isDcc = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'isDcc' field has been set.
      * Indicates if this is a DCC (Dynamic Currency Conversion) transaction (P2S-00038)
      * @return True if the 'isDcc' field has been set, false otherwise.
      */
    public boolean hasIsDcc() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'isDcc' field.
      * Indicates if this is a DCC (Dynamic Currency Conversion) transaction (P2S-00038)
      * @return This builder.
      */
    public effyis.partners.p2s.shared.avro.meta.input.DynamicCurrencyConversion.Builder clearIsDcc() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'dccCurrency' field.
      * The DCC currency used in the transaction (P2S-00039)
      * @return The value.
      */
    public java.lang.CharSequence getDccCurrency() {
      return dccCurrency;
    }


    /**
      * Sets the value of the 'dccCurrency' field.
      * The DCC currency used in the transaction (P2S-00039)
      * @param value The value of 'dccCurrency'.
      * @return This builder.
      */
    public effyis.partners.p2s.shared.avro.meta.input.DynamicCurrencyConversion.Builder setDccCurrency(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.dccCurrency = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'dccCurrency' field has been set.
      * The DCC currency used in the transaction (P2S-00039)
      * @return True if the 'dccCurrency' field has been set, false otherwise.
      */
    public boolean hasDccCurrency() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'dccCurrency' field.
      * The DCC currency used in the transaction (P2S-00039)
      * @return This builder.
      */
    public effyis.partners.p2s.shared.avro.meta.input.DynamicCurrencyConversion.Builder clearDccCurrency() {
      dccCurrency = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'dccMarkup' field.
      * The markup added to the DCC transaction (P2S-00040)
      * @return The value.
      */
    public java.lang.CharSequence getDccMarkup() {
      return dccMarkup;
    }


    /**
      * Sets the value of the 'dccMarkup' field.
      * The markup added to the DCC transaction (P2S-00040)
      * @param value The value of 'dccMarkup'.
      * @return This builder.
      */
    public effyis.partners.p2s.shared.avro.meta.input.DynamicCurrencyConversion.Builder setDccMarkup(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.dccMarkup = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'dccMarkup' field has been set.
      * The markup added to the DCC transaction (P2S-00040)
      * @return True if the 'dccMarkup' field has been set, false otherwise.
      */
    public boolean hasDccMarkup() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'dccMarkup' field.
      * The markup added to the DCC transaction (P2S-00040)
      * @return This builder.
      */
    public effyis.partners.p2s.shared.avro.meta.input.DynamicCurrencyConversion.Builder clearDccMarkup() {
      dccMarkup = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public DynamicCurrencyConversion build() {
      try {
        DynamicCurrencyConversion record = new DynamicCurrencyConversion();
        record.isDcc = fieldSetFlags()[0] ? this.isDcc : (java.lang.Boolean) defaultValue(fields()[0]);
        record.dccCurrency = fieldSetFlags()[1] ? this.dccCurrency : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.dccMarkup = fieldSetFlags()[2] ? this.dccMarkup : (java.lang.CharSequence) defaultValue(fields()[2]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<DynamicCurrencyConversion>
    WRITER$ = (org.apache.avro.io.DatumWriter<DynamicCurrencyConversion>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<DynamicCurrencyConversion>
    READER$ = (org.apache.avro.io.DatumReader<DynamicCurrencyConversion>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeBoolean(this.isDcc);

    if (this.dccCurrency == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.dccCurrency);
    }

    if (this.dccMarkup == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.dccMarkup);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.isDcc = in.readBoolean();

      if (in.readIndex() != 1) {
        in.readNull();
        this.dccCurrency = null;
      } else {
        this.dccCurrency = in.readString(this.dccCurrency instanceof Utf8 ? (Utf8)this.dccCurrency : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.dccMarkup = null;
      } else {
        this.dccMarkup = in.readString(this.dccMarkup instanceof Utf8 ? (Utf8)this.dccMarkup : null);
      }

    } else {
      for (int i = 0; i < 3; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.isDcc = in.readBoolean();
          break;

        case 1:
          if (in.readIndex() != 1) {
            in.readNull();
            this.dccCurrency = null;
          } else {
            this.dccCurrency = in.readString(this.dccCurrency instanceof Utf8 ? (Utf8)this.dccCurrency : null);
          }
          break;

        case 2:
          if (in.readIndex() != 1) {
            in.readNull();
            this.dccMarkup = null;
          } else {
            this.dccMarkup = in.readString(this.dccMarkup instanceof Utf8 ? (Utf8)this.dccMarkup : null);
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










