/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package effyis.partners.p2s.shared.avro.meta.input;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

/** Information about the transaction response */
@org.apache.avro.specific.AvroGenerated
public class TransactionResponse extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 3560760931955523366L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"TransactionResponse\",\"namespace\":\"effyis.partners.p2s.shared.avro.meta.input\",\"doc\":\"Information about the transaction response\",\"fields\":[{\"name\":\"code\",\"type\":\"string\",\"doc\":\"The approval code from the issuer (P2S-00125)\"},{\"name\":\"amount\",\"type\":[\"null\",{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":20,\"scale\":10}],\"doc\":\"The amount authorized by the issuer (P2S-00126)\",\"default\":null},{\"name\":\"datetime\",\"type\":[\"null\",\"string\"],\"doc\":\"Response timestamp from the issuer (P2S-00127)\",\"default\":null},{\"name\":\"reason\",\"type\":\"string\",\"doc\":\"Reason for rejection if the transaction was declined (P2S-00128)\"},{\"name\":\"authorizationId\",\"type\":\"string\",\"doc\":\"The authorization number returned by the issuer (P2S-00129)\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();
  static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.Conversions.DecimalConversion());
  }

  private static final BinaryMessageEncoder<TransactionResponse> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<TransactionResponse> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<TransactionResponse> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<TransactionResponse> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<TransactionResponse> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this TransactionResponse to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a TransactionResponse from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a TransactionResponse instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static TransactionResponse fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** The approval code from the issuer (P2S-00125) */
  private java.lang.CharSequence code;
  /** The amount authorized by the issuer (P2S-00126) */
  private java.math.BigDecimal amount;
  /** Response timestamp from the issuer (P2S-00127) */
  private java.lang.CharSequence datetime;
  /** Reason for rejection if the transaction was declined (P2S-00128) */
  private java.lang.CharSequence reason;
  /** The authorization number returned by the issuer (P2S-00129) */
  private java.lang.CharSequence authorizationId;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public TransactionResponse() {}

  /**
   * All-args constructor.
   * @param code The approval code from the issuer (P2S-00125)
   * @param amount The amount authorized by the issuer (P2S-00126)
   * @param datetime Response timestamp from the issuer (P2S-00127)
   * @param reason Reason for rejection if the transaction was declined (P2S-00128)
   * @param authorizationId The authorization number returned by the issuer (P2S-00129)
   */
  public TransactionResponse(java.lang.CharSequence code, java.math.BigDecimal amount, java.lang.CharSequence datetime, java.lang.CharSequence reason, java.lang.CharSequence authorizationId) {
    this.code = code;
    this.amount = amount;
    this.datetime = datetime;
    this.reason = reason;
    this.authorizationId = authorizationId;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return code;
    case 1: return amount;
    case 2: return datetime;
    case 3: return reason;
    case 4: return authorizationId;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: code = (java.lang.CharSequence)value$; break;
    case 1: amount = (java.math.BigDecimal)value$; break;
    case 2: datetime = (java.lang.CharSequence)value$; break;
    case 3: reason = (java.lang.CharSequence)value$; break;
    case 4: authorizationId = (java.lang.CharSequence)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'code' field.
   * @return The approval code from the issuer (P2S-00125)
   */
  public java.lang.CharSequence getCode() {
    return code;
  }


  /**
   * Sets the value of the 'code' field.
   * The approval code from the issuer (P2S-00125)
   * @param value the value to set.
   */
  public void setCode(java.lang.CharSequence value) {
    this.code = value;
  }

  /**
   * Gets the value of the 'amount' field.
   * @return The amount authorized by the issuer (P2S-00126)
   */
  public java.math.BigDecimal getAmount() {
    return amount;
  }


  /**
   * Sets the value of the 'amount' field.
   * The amount authorized by the issuer (P2S-00126)
   * @param value the value to set.
   */
  public void setAmount(java.math.BigDecimal value) {
    this.amount = value;
  }

  /**
   * Gets the value of the 'datetime' field.
   * @return Response timestamp from the issuer (P2S-00127)
   */
  public java.lang.CharSequence getDatetime() {
    return datetime;
  }


  /**
   * Sets the value of the 'datetime' field.
   * Response timestamp from the issuer (P2S-00127)
   * @param value the value to set.
   */
  public void setDatetime(java.lang.CharSequence value) {
    this.datetime = value;
  }

  /**
   * Gets the value of the 'reason' field.
   * @return Reason for rejection if the transaction was declined (P2S-00128)
   */
  public java.lang.CharSequence getReason() {
    return reason;
  }


  /**
   * Sets the value of the 'reason' field.
   * Reason for rejection if the transaction was declined (P2S-00128)
   * @param value the value to set.
   */
  public void setReason(java.lang.CharSequence value) {
    this.reason = value;
  }

  /**
   * Gets the value of the 'authorizationId' field.
   * @return The authorization number returned by the issuer (P2S-00129)
   */
  public java.lang.CharSequence getAuthorizationId() {
    return authorizationId;
  }


  /**
   * Sets the value of the 'authorizationId' field.
   * The authorization number returned by the issuer (P2S-00129)
   * @param value the value to set.
   */
  public void setAuthorizationId(java.lang.CharSequence value) {
    this.authorizationId = value;
  }

  /**
   * Creates a new TransactionResponse RecordBuilder.
   * @return A new TransactionResponse RecordBuilder
   */
  public static effyis.partners.p2s.shared.avro.meta.input.TransactionResponse.Builder newBuilder() {
    return new effyis.partners.p2s.shared.avro.meta.input.TransactionResponse.Builder();
  }

  /**
   * Creates a new TransactionResponse RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new TransactionResponse RecordBuilder
   */
  public static effyis.partners.p2s.shared.avro.meta.input.TransactionResponse.Builder newBuilder(effyis.partners.p2s.shared.avro.meta.input.TransactionResponse.Builder other) {
    if (other == null) {
      return new effyis.partners.p2s.shared.avro.meta.input.TransactionResponse.Builder();
    } else {
      return new effyis.partners.p2s.shared.avro.meta.input.TransactionResponse.Builder(other);
    }
  }

  /**
   * Creates a new TransactionResponse RecordBuilder by copying an existing TransactionResponse instance.
   * @param other The existing instance to copy.
   * @return A new TransactionResponse RecordBuilder
   */
  public static effyis.partners.p2s.shared.avro.meta.input.TransactionResponse.Builder newBuilder(effyis.partners.p2s.shared.avro.meta.input.TransactionResponse other) {
    if (other == null) {
      return new effyis.partners.p2s.shared.avro.meta.input.TransactionResponse.Builder();
    } else {
      return new effyis.partners.p2s.shared.avro.meta.input.TransactionResponse.Builder(other);
    }
  }

  /**
   * RecordBuilder for TransactionResponse instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<TransactionResponse>
    implements org.apache.avro.data.RecordBuilder<TransactionResponse> {

    /** The approval code from the issuer (P2S-00125) */
    private java.lang.CharSequence code;
    /** The amount authorized by the issuer (P2S-00126) */
    private java.math.BigDecimal amount;
    /** Response timestamp from the issuer (P2S-00127) */
    private java.lang.CharSequence datetime;
    /** Reason for rejection if the transaction was declined (P2S-00128) */
    private java.lang.CharSequence reason;
    /** The authorization number returned by the issuer (P2S-00129) */
    private java.lang.CharSequence authorizationId;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(effyis.partners.p2s.shared.avro.meta.input.TransactionResponse.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.code)) {
        this.code = data().deepCopy(fields()[0].schema(), other.code);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.amount)) {
        this.amount = data().deepCopy(fields()[1].schema(), other.amount);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.datetime)) {
        this.datetime = data().deepCopy(fields()[2].schema(), other.datetime);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.reason)) {
        this.reason = data().deepCopy(fields()[3].schema(), other.reason);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.authorizationId)) {
        this.authorizationId = data().deepCopy(fields()[4].schema(), other.authorizationId);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
    }

    /**
     * Creates a Builder by copying an existing TransactionResponse instance
     * @param other The existing instance to copy.
     */
    private Builder(effyis.partners.p2s.shared.avro.meta.input.TransactionResponse other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.code)) {
        this.code = data().deepCopy(fields()[0].schema(), other.code);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.amount)) {
        this.amount = data().deepCopy(fields()[1].schema(), other.amount);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.datetime)) {
        this.datetime = data().deepCopy(fields()[2].schema(), other.datetime);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.reason)) {
        this.reason = data().deepCopy(fields()[3].schema(), other.reason);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.authorizationId)) {
        this.authorizationId = data().deepCopy(fields()[4].schema(), other.authorizationId);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'code' field.
      * The approval code from the issuer (P2S-00125)
      * @return The value.
      */
    public java.lang.CharSequence getCode() {
      return code;
    }


    /**
      * Sets the value of the 'code' field.
      * The approval code from the issuer (P2S-00125)
      * @param value The value of 'code'.
      * @return This builder.
      */
    public effyis.partners.p2s.shared.avro.meta.input.TransactionResponse.Builder setCode(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.code = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'code' field has been set.
      * The approval code from the issuer (P2S-00125)
      * @return True if the 'code' field has been set, false otherwise.
      */
    public boolean hasCode() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'code' field.
      * The approval code from the issuer (P2S-00125)
      * @return This builder.
      */
    public effyis.partners.p2s.shared.avro.meta.input.TransactionResponse.Builder clearCode() {
      code = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'amount' field.
      * The amount authorized by the issuer (P2S-00126)
      * @return The value.
      */
    public java.math.BigDecimal getAmount() {
      return amount;
    }


    /**
      * Sets the value of the 'amount' field.
      * The amount authorized by the issuer (P2S-00126)
      * @param value The value of 'amount'.
      * @return This builder.
      */
    public effyis.partners.p2s.shared.avro.meta.input.TransactionResponse.Builder setAmount(java.math.BigDecimal value) {
      validate(fields()[1], value);
      this.amount = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'amount' field has been set.
      * The amount authorized by the issuer (P2S-00126)
      * @return True if the 'amount' field has been set, false otherwise.
      */
    public boolean hasAmount() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'amount' field.
      * The amount authorized by the issuer (P2S-00126)
      * @return This builder.
      */
    public effyis.partners.p2s.shared.avro.meta.input.TransactionResponse.Builder clearAmount() {
      amount = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'datetime' field.
      * Response timestamp from the issuer (P2S-00127)
      * @return The value.
      */
    public java.lang.CharSequence getDatetime() {
      return datetime;
    }


    /**
      * Sets the value of the 'datetime' field.
      * Response timestamp from the issuer (P2S-00127)
      * @param value The value of 'datetime'.
      * @return This builder.
      */
    public effyis.partners.p2s.shared.avro.meta.input.TransactionResponse.Builder setDatetime(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.datetime = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'datetime' field has been set.
      * Response timestamp from the issuer (P2S-00127)
      * @return True if the 'datetime' field has been set, false otherwise.
      */
    public boolean hasDatetime() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'datetime' field.
      * Response timestamp from the issuer (P2S-00127)
      * @return This builder.
      */
    public effyis.partners.p2s.shared.avro.meta.input.TransactionResponse.Builder clearDatetime() {
      datetime = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'reason' field.
      * Reason for rejection if the transaction was declined (P2S-00128)
      * @return The value.
      */
    public java.lang.CharSequence getReason() {
      return reason;
    }


    /**
      * Sets the value of the 'reason' field.
      * Reason for rejection if the transaction was declined (P2S-00128)
      * @param value The value of 'reason'.
      * @return This builder.
      */
    public effyis.partners.p2s.shared.avro.meta.input.TransactionResponse.Builder setReason(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.reason = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'reason' field has been set.
      * Reason for rejection if the transaction was declined (P2S-00128)
      * @return True if the 'reason' field has been set, false otherwise.
      */
    public boolean hasReason() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'reason' field.
      * Reason for rejection if the transaction was declined (P2S-00128)
      * @return This builder.
      */
    public effyis.partners.p2s.shared.avro.meta.input.TransactionResponse.Builder clearReason() {
      reason = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'authorizationId' field.
      * The authorization number returned by the issuer (P2S-00129)
      * @return The value.
      */
    public java.lang.CharSequence getAuthorizationId() {
      return authorizationId;
    }


    /**
      * Sets the value of the 'authorizationId' field.
      * The authorization number returned by the issuer (P2S-00129)
      * @param value The value of 'authorizationId'.
      * @return This builder.
      */
    public effyis.partners.p2s.shared.avro.meta.input.TransactionResponse.Builder setAuthorizationId(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.authorizationId = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'authorizationId' field has been set.
      * The authorization number returned by the issuer (P2S-00129)
      * @return True if the 'authorizationId' field has been set, false otherwise.
      */
    public boolean hasAuthorizationId() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'authorizationId' field.
      * The authorization number returned by the issuer (P2S-00129)
      * @return This builder.
      */
    public effyis.partners.p2s.shared.avro.meta.input.TransactionResponse.Builder clearAuthorizationId() {
      authorizationId = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public TransactionResponse build() {
      try {
        TransactionResponse record = new TransactionResponse();
        record.code = fieldSetFlags()[0] ? this.code : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.amount = fieldSetFlags()[1] ? this.amount : (java.math.BigDecimal) defaultValue(fields()[1]);
        record.datetime = fieldSetFlags()[2] ? this.datetime : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.reason = fieldSetFlags()[3] ? this.reason : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.authorizationId = fieldSetFlags()[4] ? this.authorizationId : (java.lang.CharSequence) defaultValue(fields()[4]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<TransactionResponse>
    WRITER$ = (org.apache.avro.io.DatumWriter<TransactionResponse>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<TransactionResponse>
    READER$ = (org.apache.avro.io.DatumReader<TransactionResponse>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










