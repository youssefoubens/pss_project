/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package effyis.partners.p2s.shared.avro.meta.input;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

/** Information about the transaction request */
@org.apache.avro.specific.AvroGenerated
public class TransactionRequest extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 1520330657767207150L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"TransactionRequest\",\"namespace\":\"effyis.partners.p2s.shared.avro.meta.input\",\"doc\":\"Information about the transaction request\",\"fields\":[{\"name\":\"xPayWalletAuthMethod\",\"type\":[\"null\",\"string\"],\"doc\":\"Authentication method used in the wallet transaction (e.g., biometric, PIN) (P2S-00073)\",\"default\":null},{\"name\":\"transactionRequestDatetime\",\"type\":\"string\",\"doc\":\"Acceptor local time (P2S-00074)\"},{\"name\":\"transactionRequestBillingAmount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":20,\"scale\":10},\"doc\":\"Amount billed in issuer currency (P2S-00075)\"},{\"name\":\"transactionRequestBillingCurrency\",\"type\":\"string\",\"doc\":\"Billing currency (ISO4217) (P2S-00076)\"},{\"name\":\"transactionRequestStan\",\"type\":\"string\",\"doc\":\"Systems Trace Audit Number (P2S-00077)\"},{\"name\":\"transactionRequestRetrievalReferenceNumber\",\"type\":\"string\",\"doc\":\"Retrieval Reference Number (P2S-00078)\"},{\"name\":\"transactionRequestAmount\",\"type\":[\"null\",{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":20,\"scale\":10}],\"doc\":\"Requested amount in local currency (P2S-00079)\",\"default\":null},{\"name\":\"transactionRequestCurrency\",\"type\":[\"null\",\"string\"],\"doc\":\"Currency of requested amount (P2S-00080)\",\"default\":null},{\"name\":\"transactionRequestTransmissionDatetime\",\"type\":\"string\",\"doc\":\"UTC transmission datetime (P2S-00081)\"},{\"name\":\"transactionRequestBillingRate\",\"type\":\"string\",\"doc\":\"Conversion rate (P2S-00082)\"},{\"name\":\"transactionRequestScheme\",\"type\":\"string\",\"doc\":\"Scheme processed the transaction (P2S-00083)\"},{\"name\":\"recurringFlag\",\"type\":[\"null\",\"boolean\"],\"doc\":\"Recurring payment flag (P2S-00084)\",\"default\":null},{\"name\":\"technologyentryMode\",\"type\":\"string\",\"doc\":\"Technology entry mode (P2S-00085)\"},{\"name\":\"technologyentryModemagneticStripe\",\"type\":\"boolean\",\"doc\":\"Indicates if the card was swiped (magnetic stripe entry) (P2S-00086)\"},{\"name\":\"technologyentryModeEMVChip\",\"type\":\"boolean\",\"doc\":\"Indicates if the card was inserted for EMV chip-based processing (P2S-00087)\"},{\"name\":\"technologyentryModeContactless\",\"type\":\"boolean\",\"doc\":\"Indicates if the card was used for a contactless transaction (NFC) (P2S-00088)\"},{\"name\":\"technologyentryModemanualEntry\",\"type\":\"boolean\",\"doc\":\"Indicates if the card details were manually entered (P2S-00089)\"},{\"name\":\"technologyentryModeFallback\",\"type\":\"boolean\",\"doc\":\"Indicates if fallback processing was used (in case of EMV failure) (P2S-00090)\"},{\"name\":\"technologyentryModeNFC\",\"type\":\"boolean\",\"doc\":\"Indicates if NFC was used for the transaction (P2S-00091)\"},{\"name\":\"technologyPOSConditionCode\",\"type\":\"string\",\"doc\":\"POS condition code (P2S-00092)\"},{\"name\":\"technologyPOSConditionCodeCardPresent\",\"type\":\"boolean\",\"doc\":\"Indicates whether the card was physically present during the transaction (P2S-00093)\"},{\"name\":\"technologyPOSConditionCodetransactionCondition\",\"type\":[\"null\",\"string\"],\"doc\":\"Condition of the transaction (e.g., standard, refund) (P2S-00094)\",\"default\":null},{\"name\":\"technologyPOSConditionCodePinVerification\",\"type\":\"boolean\",\"doc\":\"Indicates if PIN verification was performed (P2S-00095)\"},{\"name\":\"technologyPOSConditionCodeSignatureAuthorization\",\"type\":[\"null\",\"boolean\"],\"doc\":\"Indicates if signature authorization was used (P2S-00096)\",\"default\":null},{\"name\":\"technologyPOSConditionCodeOnlineAuthorization\",\"type\":\"boolean\",\"doc\":\"Indicates whether online authorization was performed (P2S-00097)\"},{\"name\":\"technologyPOSConditionCodeOfflineAuthorization\",\"type\":[\"null\",\"boolean\"],\"doc\":\"Indicates whether offline authorization was used (P2S-00098)\",\"default\":null},{\"name\":\"technologyPOSConditionCodeFaceToFace\",\"type\":[\"null\",\"boolean\"],\"doc\":\"Indicates whether the transaction is face-to-face or remote (P2S-00099)\",\"default\":null},{\"name\":\"technologyEMVtagsServiceCode\",\"type\":[\"null\",\"string\"],\"doc\":\"Specifies the card service type (e.g., debit, credit) (P2S-00101)\",\"default\":null},{\"name\":\"technologyEMVtagsTransactionSequenceCounter\",\"type\":[\"null\",\"string\"],\"doc\":\"A unique sequence number for the transaction (P2S-00102)\",\"default\":null},{\"name\":\"technologyEMVtagsTerminalType\",\"type\":[\"null\",\"string\"],\"doc\":\"Type of terminal used to process the transaction (e.g., POS, ATM) (P2S-00103)\",\"default\":null},{\"name\":\"technologyEMVtagsTerminalCapabilities\",\"type\":[\"null\",\"string\"],\"doc\":\"Defines terminal capabilities (e.g., EMV, NFC) (P2S-00104)\",\"default\":null},{\"name\":\"technologyEMVtagsIAC\",\"type\":[\"null\",\"string\"],\"doc\":\"Issuer Action Code (indicates transaction outcome) (P2S-00105)\",\"default\":null},{\"name\":\"technologyEMVtagsAC\",\"type\":[\"null\",\"string\"],\"doc\":\"Cryptogram used in authorization (ARQC/TC/AAC) (P2S-00106)\",\"default\":null},{\"name\":\"technologyEMVtagsCID\",\"type\":[\"null\",\"string\"],\"doc\":\"Cryptogram Identifier, indicates the type of cryptogram (P2S-00107)\",\"default\":null},{\"name\":\"technologyEMVtagsAIP\",\"type\":[\"null\",\"string\"],\"doc\":\"Application Interchange Profile, defines card capabilities (P2S-00108)\",\"default\":null},{\"name\":\"technologyEMVtagsIAD\",\"type\":[\"null\",\"string\"],\"doc\":\"Issuer Application Data, used for issuer-specific risk management (P2S-00109)\",\"default\":null},{\"name\":\"technology3DSecureAuthenticationIndicator\",\"type\":[\"null\",\"string\"],\"doc\":\"Indicates the result of 3D Secure authentication (e.g., successful, failed) (P2S-00110)\",\"default\":null},{\"name\":\"technology3DSecure3DSVersion\",\"type\":[\"null\",\"string\"],\"doc\":\"Specifies the version of 3D Secure used (P2S-00111)\",\"default\":null},{\"name\":\"technology3DSecureIssuerAuthenticationData\",\"type\":[\"null\",\"string\"],\"doc\":\"Data used by the issuer for authentication (P2S-00112)\",\"default\":null},{\"name\":\"technology3DSecureAuthenticationResponse\",\"type\":[\"null\",\"string\"],\"doc\":\"Response from the issuer regarding authentication outcome (P2S-00113)\",\"default\":null},{\"name\":\"technology3DSecureCAVV\",\"type\":[\"null\",\"string\"],\"doc\":\"Cardholder Authentication Verification Value (used in 3D Secure) (P2S-00114)\",\"default\":null},{\"name\":\"technology3DSecureDSTransID\",\"type\":[\"null\",\"string\"],\"doc\":\"3D Secure 2 transaction identifier (P2S-00115)\",\"default\":null},{\"name\":\"technology3DSecureDeviceChannel\",\"type\":[\"null\",\"string\"],\"doc\":\"Indicates whether the transaction was made using a mobile device or desktop (P2S-00116)\",\"default\":null},{\"name\":\"technology3DSecureAMID\",\"type\":[\"null\",\"string\"],\"doc\":\"Authentication Method Indicator used in 3D Secure (e.g., biometric, PIN) (P2S-00117)\",\"default\":null},{\"name\":\"technology3DSecureAAV\",\"type\":[\"null\",\"string\"],\"doc\":\"Mastercard's equivalent of CAVV used in 3D Secure for cardholder authentication (P2S-00118)\",\"default\":null},{\"name\":\"technology3DSecureECI\",\"type\":[\"null\",\"string\"],\"doc\":\"Electronic Commerce Indicator used in 3D Secure transactions (P2S-00119)\",\"default\":null},{\"name\":\"xPayWalletWalletID\",\"type\":[\"null\",\"string\"],\"doc\":\"Unique identifier for the wallet user in the xPay system (P2S-00120)\",\"default\":null},{\"name\":\"xPayWalletTokenizedPAN\",\"type\":[\"null\",\"string\"],\"doc\":\"Token representing the actual PAN (Primary Account Number) for the transaction (P2S-00121)\",\"default\":null},{\"name\":\"xPayWalletDeviceId\",\"type\":[\"null\",\"string\"],\"doc\":\"Identifier for the mobile device used for the transaction (P2S-00122)\",\"default\":null},{\"name\":\"xPayWalletTransactionToken\",\"type\":[\"null\",\"string\"],\"doc\":\"One-time token used for this specific transaction (P2S-00123)\",\"default\":null},{\"name\":\"xPayWalletWalletType\",\"type\":[\"null\",\"string\"],\"doc\":\"Identifies the wallet provider (e.g., Apple Pay, Google Pay) (P2S-00124)\",\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();
  static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.Conversions.DecimalConversion());
  }

  private static final BinaryMessageEncoder<TransactionRequest> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<TransactionRequest> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<TransactionRequest> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<TransactionRequest> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<TransactionRequest> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this TransactionRequest to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a TransactionRequest from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a TransactionRequest instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static TransactionRequest fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Authentication method used in the wallet transaction (e.g., biometric, PIN) (P2S-00073) */
  private java.lang.CharSequence xPayWalletAuthMethod;
  /** Acceptor local time (P2S-00074) */
  private java.lang.CharSequence transactionRequestDatetime;
  /** Amount billed in issuer currency (P2S-00075) */
  private java.math.BigDecimal transactionRequestBillingAmount;
  /** Billing currency (ISO4217) (P2S-00076) */
  private java.lang.CharSequence transactionRequestBillingCurrency;
  /** Systems Trace Audit Number (P2S-00077) */
  private java.lang.CharSequence transactionRequestStan;
  /** Retrieval Reference Number (P2S-00078) */
  private java.lang.CharSequence transactionRequestRetrievalReferenceNumber;
  /** Requested amount in local currency (P2S-00079) */
  private java.math.BigDecimal transactionRequestAmount;
  /** Currency of requested amount (P2S-00080) */
  private java.lang.CharSequence transactionRequestCurrency;
  /** UTC transmission datetime (P2S-00081) */
  private java.lang.CharSequence transactionRequestTransmissionDatetime;
  /** Conversion rate (P2S-00082) */
  private java.lang.CharSequence transactionRequestBillingRate;
  /** Scheme processed the transaction (P2S-00083) */
  private java.lang.CharSequence transactionRequestScheme;
  /** Recurring payment flag (P2S-00084) */
  private java.lang.Boolean recurringFlag;
  /** Technology entry mode (P2S-00085) */
  private java.lang.CharSequence technologyentryMode;
  /** Indicates if the card was swiped (magnetic stripe entry) (P2S-00086) */
  private boolean technologyentryModemagneticStripe;
  /** Indicates if the card was inserted for EMV chip-based processing (P2S-00087) */
  private boolean technologyentryModeEMVChip;
  /** Indicates if the card was used for a contactless transaction (NFC) (P2S-00088) */
  private boolean technologyentryModeContactless;
  /** Indicates if the card details were manually entered (P2S-00089) */
  private boolean technologyentryModemanualEntry;
  /** Indicates if fallback processing was used (in case of EMV failure) (P2S-00090) */
  private boolean technologyentryModeFallback;
  /** Indicates if NFC was used for the transaction (P2S-00091) */
  private boolean technologyentryModeNFC;
  /** POS condition code (P2S-00092) */
  private java.lang.CharSequence technologyPOSConditionCode;
  /** Indicates whether the card was physically present during the transaction (P2S-00093) */
  private boolean technologyPOSConditionCodeCardPresent;
  /** Condition of the transaction (e.g., standard, refund) (P2S-00094) */
  private java.lang.CharSequence technologyPOSConditionCodetransactionCondition;
  /** Indicates if PIN verification was performed (P2S-00095) */
  private boolean technologyPOSConditionCodePinVerification;
  /** Indicates if signature authorization was used (P2S-00096) */
  private java.lang.Boolean technologyPOSConditionCodeSignatureAuthorization;
  /** Indicates whether online authorization was performed (P2S-00097) */
  private boolean technologyPOSConditionCodeOnlineAuthorization;
  /** Indicates whether offline authorization was used (P2S-00098) */
  private java.lang.Boolean technologyPOSConditionCodeOfflineAuthorization;
  /** Indicates whether the transaction is face-to-face or remote (P2S-00099) */
  private java.lang.Boolean technologyPOSConditionCodeFaceToFace;
  /** Specifies the card service type (e.g., debit, credit) (P2S-00101) */
  private java.lang.CharSequence technologyEMVtagsServiceCode;
  /** A unique sequence number for the transaction (P2S-00102) */
  private java.lang.CharSequence technologyEMVtagsTransactionSequenceCounter;
  /** Type of terminal used to process the transaction (e.g., POS, ATM) (P2S-00103) */
  private java.lang.CharSequence technologyEMVtagsTerminalType;
  /** Defines terminal capabilities (e.g., EMV, NFC) (P2S-00104) */
  private java.lang.CharSequence technologyEMVtagsTerminalCapabilities;
  /** Issuer Action Code (indicates transaction outcome) (P2S-00105) */
  private java.lang.CharSequence technologyEMVtagsIAC;
  /** Cryptogram used in authorization (ARQC/TC/AAC) (P2S-00106) */
  private java.lang.CharSequence technologyEMVtagsAC;
  /** Cryptogram Identifier, indicates the type of cryptogram (P2S-00107) */
  private java.lang.CharSequence technologyEMVtagsCID;
  /** Application Interchange Profile, defines card capabilities (P2S-00108) */
  private java.lang.CharSequence technologyEMVtagsAIP;
  /** Issuer Application Data, used for issuer-specific risk management (P2S-00109) */
  private java.lang.CharSequence technologyEMVtagsIAD;
  /** Indicates the result of 3D Secure authentication (e.g., successful, failed) (P2S-00110) */
  private java.lang.CharSequence technology3DSecureAuthenticationIndicator;
  /** Specifies the version of 3D Secure used (P2S-00111) */
  private java.lang.CharSequence technology3DSecure3DSVersion;
  /** Data used by the issuer for authentication (P2S-00112) */
  private java.lang.CharSequence technology3DSecureIssuerAuthenticationData;
  /** Response from the issuer regarding authentication outcome (P2S-00113) */
  private java.lang.CharSequence technology3DSecureAuthenticationResponse;
  /** Cardholder Authentication Verification Value (used in 3D Secure) (P2S-00114) */
  private java.lang.CharSequence technology3DSecureCAVV;
  /** 3D Secure 2 transaction identifier (P2S-00115) */
  private java.lang.CharSequence technology3DSecureDSTransID;
  /** Indicates whether the transaction was made using a mobile device or desktop (P2S-00116) */
  private java.lang.CharSequence technology3DSecureDeviceChannel;
  /** Authentication Method Indicator used in 3D Secure (e.g., biometric, PIN) (P2S-00117) */
  private java.lang.CharSequence technology3DSecureAMID;
  /** Mastercard's equivalent of CAVV used in 3D Secure for cardholder authentication (P2S-00118) */
  private java.lang.CharSequence technology3DSecureAAV;
  /** Electronic Commerce Indicator used in 3D Secure transactions (P2S-00119) */
  private java.lang.CharSequence technology3DSecureECI;
  /** Unique identifier for the wallet user in the xPay system (P2S-00120) */
  private java.lang.CharSequence xPayWalletWalletID;
  /** Token representing the actual PAN (Primary Account Number) for the transaction (P2S-00121) */
  private java.lang.CharSequence xPayWalletTokenizedPAN;
  /** Identifier for the mobile device used for the transaction (P2S-00122) */
  private java.lang.CharSequence xPayWalletDeviceId;
  /** One-time token used for this specific transaction (P2S-00123) */
  private java.lang.CharSequence xPayWalletTransactionToken;
  /** Identifies the wallet provider (e.g., Apple Pay, Google Pay) (P2S-00124) */
  private java.lang.CharSequence xPayWalletWalletType;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public TransactionRequest() {}

  /**
   * All-args constructor.
   * @param xPayWalletAuthMethod Authentication method used in the wallet transaction (e.g., biometric, PIN) (P2S-00073)
   * @param transactionRequestDatetime Acceptor local time (P2S-00074)
   * @param transactionRequestBillingAmount Amount billed in issuer currency (P2S-00075)
   * @param transactionRequestBillingCurrency Billing currency (ISO4217) (P2S-00076)
   * @param transactionRequestStan Systems Trace Audit Number (P2S-00077)
   * @param transactionRequestRetrievalReferenceNumber Retrieval Reference Number (P2S-00078)
   * @param transactionRequestAmount Requested amount in local currency (P2S-00079)
   * @param transactionRequestCurrency Currency of requested amount (P2S-00080)
   * @param transactionRequestTransmissionDatetime UTC transmission datetime (P2S-00081)
   * @param transactionRequestBillingRate Conversion rate (P2S-00082)
   * @param transactionRequestScheme Scheme processed the transaction (P2S-00083)
   * @param recurringFlag Recurring payment flag (P2S-00084)
   * @param technologyentryMode Technology entry mode (P2S-00085)
   * @param technologyentryModemagneticStripe Indicates if the card was swiped (magnetic stripe entry) (P2S-00086)
   * @param technologyentryModeEMVChip Indicates if the card was inserted for EMV chip-based processing (P2S-00087)
   * @param technologyentryModeContactless Indicates if the card was used for a contactless transaction (NFC) (P2S-00088)
   * @param technologyentryModemanualEntry Indicates if the card details were manually entered (P2S-00089)
   * @param technologyentryModeFallback Indicates if fallback processing was used (in case of EMV failure) (P2S-00090)
   * @param technologyentryModeNFC Indicates if NFC was used for the transaction (P2S-00091)
   * @param technologyPOSConditionCode POS condition code (P2S-00092)
   * @param technologyPOSConditionCodeCardPresent Indicates whether the card was physically present during the transaction (P2S-00093)
   * @param technologyPOSConditionCodetransactionCondition Condition of the transaction (e.g., standard, refund) (P2S-00094)
   * @param technologyPOSConditionCodePinVerification Indicates if PIN verification was performed (P2S-00095)
   * @param technologyPOSConditionCodeSignatureAuthorization Indicates if signature authorization was used (P2S-00096)
   * @param technologyPOSConditionCodeOnlineAuthorization Indicates whether online authorization was performed (P2S-00097)
   * @param technologyPOSConditionCodeOfflineAuthorization Indicates whether offline authorization was used (P2S-00098)
   * @param technologyPOSConditionCodeFaceToFace Indicates whether the transaction is face-to-face or remote (P2S-00099)
   * @param technologyEMVtagsServiceCode Specifies the card service type (e.g., debit, credit) (P2S-00101)
   * @param technologyEMVtagsTransactionSequenceCounter A unique sequence number for the transaction (P2S-00102)
   * @param technologyEMVtagsTerminalType Type of terminal used to process the transaction (e.g., POS, ATM) (P2S-00103)
   * @param technologyEMVtagsTerminalCapabilities Defines terminal capabilities (e.g., EMV, NFC) (P2S-00104)
   * @param technologyEMVtagsIAC Issuer Action Code (indicates transaction outcome) (P2S-00105)
   * @param technologyEMVtagsAC Cryptogram used in authorization (ARQC/TC/AAC) (P2S-00106)
   * @param technologyEMVtagsCID Cryptogram Identifier, indicates the type of cryptogram (P2S-00107)
   * @param technologyEMVtagsAIP Application Interchange Profile, defines card capabilities (P2S-00108)
   * @param technologyEMVtagsIAD Issuer Application Data, used for issuer-specific risk management (P2S-00109)
   * @param technology3DSecureAuthenticationIndicator Indicates the result of 3D Secure authentication (e.g., successful, failed) (P2S-00110)
   * @param technology3DSecure3DSVersion Specifies the version of 3D Secure used (P2S-00111)
   * @param technology3DSecureIssuerAuthenticationData Data used by the issuer for authentication (P2S-00112)
   * @param technology3DSecureAuthenticationResponse Response from the issuer regarding authentication outcome (P2S-00113)
   * @param technology3DSecureCAVV Cardholder Authentication Verification Value (used in 3D Secure) (P2S-00114)
   * @param technology3DSecureDSTransID 3D Secure 2 transaction identifier (P2S-00115)
   * @param technology3DSecureDeviceChannel Indicates whether the transaction was made using a mobile device or desktop (P2S-00116)
   * @param technology3DSecureAMID Authentication Method Indicator used in 3D Secure (e.g., biometric, PIN) (P2S-00117)
   * @param technology3DSecureAAV Mastercard's equivalent of CAVV used in 3D Secure for cardholder authentication (P2S-00118)
   * @param technology3DSecureECI Electronic Commerce Indicator used in 3D Secure transactions (P2S-00119)
   * @param xPayWalletWalletID Unique identifier for the wallet user in the xPay system (P2S-00120)
   * @param xPayWalletTokenizedPAN Token representing the actual PAN (Primary Account Number) for the transaction (P2S-00121)
   * @param xPayWalletDeviceId Identifier for the mobile device used for the transaction (P2S-00122)
   * @param xPayWalletTransactionToken One-time token used for this specific transaction (P2S-00123)
   * @param xPayWalletWalletType Identifies the wallet provider (e.g., Apple Pay, Google Pay) (P2S-00124)
   */
  public TransactionRequest(java.lang.CharSequence xPayWalletAuthMethod, java.lang.CharSequence transactionRequestDatetime, java.math.BigDecimal transactionRequestBillingAmount, java.lang.CharSequence transactionRequestBillingCurrency, java.lang.CharSequence transactionRequestStan, java.lang.CharSequence transactionRequestRetrievalReferenceNumber, java.math.BigDecimal transactionRequestAmount, java.lang.CharSequence transactionRequestCurrency, java.lang.CharSequence transactionRequestTransmissionDatetime, java.lang.CharSequence transactionRequestBillingRate, java.lang.CharSequence transactionRequestScheme, java.lang.Boolean recurringFlag, java.lang.CharSequence technologyentryMode, java.lang.Boolean technologyentryModemagneticStripe, java.lang.Boolean technologyentryModeEMVChip, java.lang.Boolean technologyentryModeContactless, java.lang.Boolean technologyentryModemanualEntry, java.lang.Boolean technologyentryModeFallback, java.lang.Boolean technologyentryModeNFC, java.lang.CharSequence technologyPOSConditionCode, java.lang.Boolean technologyPOSConditionCodeCardPresent, java.lang.CharSequence technologyPOSConditionCodetransactionCondition, java.lang.Boolean technologyPOSConditionCodePinVerification, java.lang.Boolean technologyPOSConditionCodeSignatureAuthorization, java.lang.Boolean technologyPOSConditionCodeOnlineAuthorization, java.lang.Boolean technologyPOSConditionCodeOfflineAuthorization, java.lang.Boolean technologyPOSConditionCodeFaceToFace, java.lang.CharSequence technologyEMVtagsServiceCode, java.lang.CharSequence technologyEMVtagsTransactionSequenceCounter, java.lang.CharSequence technologyEMVtagsTerminalType, java.lang.CharSequence technologyEMVtagsTerminalCapabilities, java.lang.CharSequence technologyEMVtagsIAC, java.lang.CharSequence technologyEMVtagsAC, java.lang.CharSequence technologyEMVtagsCID, java.lang.CharSequence technologyEMVtagsAIP, java.lang.CharSequence technologyEMVtagsIAD, java.lang.CharSequence technology3DSecureAuthenticationIndicator, java.lang.CharSequence technology3DSecure3DSVersion, java.lang.CharSequence technology3DSecureIssuerAuthenticationData, java.lang.CharSequence technology3DSecureAuthenticationResponse, java.lang.CharSequence technology3DSecureCAVV, java.lang.CharSequence technology3DSecureDSTransID, java.lang.CharSequence technology3DSecureDeviceChannel, java.lang.CharSequence technology3DSecureAMID, java.lang.CharSequence technology3DSecureAAV, java.lang.CharSequence technology3DSecureECI, java.lang.CharSequence xPayWalletWalletID, java.lang.CharSequence xPayWalletTokenizedPAN, java.lang.CharSequence xPayWalletDeviceId, java.lang.CharSequence xPayWalletTransactionToken, java.lang.CharSequence xPayWalletWalletType) {
    this.xPayWalletAuthMethod = xPayWalletAuthMethod;
    this.transactionRequestDatetime = transactionRequestDatetime;
    this.transactionRequestBillingAmount = transactionRequestBillingAmount;
    this.transactionRequestBillingCurrency = transactionRequestBillingCurrency;
    this.transactionRequestStan = transactionRequestStan;
    this.transactionRequestRetrievalReferenceNumber = transactionRequestRetrievalReferenceNumber;
    this.transactionRequestAmount = transactionRequestAmount;
    this.transactionRequestCurrency = transactionRequestCurrency;
    this.transactionRequestTransmissionDatetime = transactionRequestTransmissionDatetime;
    this.transactionRequestBillingRate = transactionRequestBillingRate;
    this.transactionRequestScheme = transactionRequestScheme;
    this.recurringFlag = recurringFlag;
    this.technologyentryMode = technologyentryMode;
    this.technologyentryModemagneticStripe = technologyentryModemagneticStripe;
    this.technologyentryModeEMVChip = technologyentryModeEMVChip;
    this.technologyentryModeContactless = technologyentryModeContactless;
    this.technologyentryModemanualEntry = technologyentryModemanualEntry;
    this.technologyentryModeFallback = technologyentryModeFallback;
    this.technologyentryModeNFC = technologyentryModeNFC;
    this.technologyPOSConditionCode = technologyPOSConditionCode;
    this.technologyPOSConditionCodeCardPresent = technologyPOSConditionCodeCardPresent;
    this.technologyPOSConditionCodetransactionCondition = technologyPOSConditionCodetransactionCondition;
    this.technologyPOSConditionCodePinVerification = technologyPOSConditionCodePinVerification;
    this.technologyPOSConditionCodeSignatureAuthorization = technologyPOSConditionCodeSignatureAuthorization;
    this.technologyPOSConditionCodeOnlineAuthorization = technologyPOSConditionCodeOnlineAuthorization;
    this.technologyPOSConditionCodeOfflineAuthorization = technologyPOSConditionCodeOfflineAuthorization;
    this.technologyPOSConditionCodeFaceToFace = technologyPOSConditionCodeFaceToFace;
    this.technologyEMVtagsServiceCode = technologyEMVtagsServiceCode;
    this.technologyEMVtagsTransactionSequenceCounter = technologyEMVtagsTransactionSequenceCounter;
    this.technologyEMVtagsTerminalType = technologyEMVtagsTerminalType;
    this.technologyEMVtagsTerminalCapabilities = technologyEMVtagsTerminalCapabilities;
    this.technologyEMVtagsIAC = technologyEMVtagsIAC;
    this.technologyEMVtagsAC = technologyEMVtagsAC;
    this.technologyEMVtagsCID = technologyEMVtagsCID;
    this.technologyEMVtagsAIP = technologyEMVtagsAIP;
    this.technologyEMVtagsIAD = technologyEMVtagsIAD;
    this.technology3DSecureAuthenticationIndicator = technology3DSecureAuthenticationIndicator;
    this.technology3DSecure3DSVersion = technology3DSecure3DSVersion;
    this.technology3DSecureIssuerAuthenticationData = technology3DSecureIssuerAuthenticationData;
    this.technology3DSecureAuthenticationResponse = technology3DSecureAuthenticationResponse;
    this.technology3DSecureCAVV = technology3DSecureCAVV;
    this.technology3DSecureDSTransID = technology3DSecureDSTransID;
    this.technology3DSecureDeviceChannel = technology3DSecureDeviceChannel;
    this.technology3DSecureAMID = technology3DSecureAMID;
    this.technology3DSecureAAV = technology3DSecureAAV;
    this.technology3DSecureECI = technology3DSecureECI;
    this.xPayWalletWalletID = xPayWalletWalletID;
    this.xPayWalletTokenizedPAN = xPayWalletTokenizedPAN;
    this.xPayWalletDeviceId = xPayWalletDeviceId;
    this.xPayWalletTransactionToken = xPayWalletTransactionToken;
    this.xPayWalletWalletType = xPayWalletWalletType;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return xPayWalletAuthMethod;
    case 1: return transactionRequestDatetime;
    case 2: return transactionRequestBillingAmount;
    case 3: return transactionRequestBillingCurrency;
    case 4: return transactionRequestStan;
    case 5: return transactionRequestRetrievalReferenceNumber;
    case 6: return transactionRequestAmount;
    case 7: return transactionRequestCurrency;
    case 8: return transactionRequestTransmissionDatetime;
    case 9: return transactionRequestBillingRate;
    case 10: return transactionRequestScheme;
    case 11: return recurringFlag;
    case 12: return technologyentryMode;
    case 13: return technologyentryModemagneticStripe;
    case 14: return technologyentryModeEMVChip;
    case 15: return technologyentryModeContactless;
    case 16: return technologyentryModemanualEntry;
    case 17: return technologyentryModeFallback;
    case 18: return technologyentryModeNFC;
    case 19: return technologyPOSConditionCode;
    case 20: return technologyPOSConditionCodeCardPresent;
    case 21: return technologyPOSConditionCodetransactionCondition;
    case 22: return technologyPOSConditionCodePinVerification;
    case 23: return technologyPOSConditionCodeSignatureAuthorization;
    case 24: return technologyPOSConditionCodeOnlineAuthorization;
    case 25: return technologyPOSConditionCodeOfflineAuthorization;
    case 26: return technologyPOSConditionCodeFaceToFace;
    case 27: return technologyEMVtagsServiceCode;
    case 28: return technologyEMVtagsTransactionSequenceCounter;
    case 29: return technologyEMVtagsTerminalType;
    case 30: return technologyEMVtagsTerminalCapabilities;
    case 31: return technologyEMVtagsIAC;
    case 32: return technologyEMVtagsAC;
    case 33: return technologyEMVtagsCID;
    case 34: return technologyEMVtagsAIP;
    case 35: return technologyEMVtagsIAD;
    case 36: return technology3DSecureAuthenticationIndicator;
    case 37: return technology3DSecure3DSVersion;
    case 38: return technology3DSecureIssuerAuthenticationData;
    case 39: return technology3DSecureAuthenticationResponse;
    case 40: return technology3DSecureCAVV;
    case 41: return technology3DSecureDSTransID;
    case 42: return technology3DSecureDeviceChannel;
    case 43: return technology3DSecureAMID;
    case 44: return technology3DSecureAAV;
    case 45: return technology3DSecureECI;
    case 46: return xPayWalletWalletID;
    case 47: return xPayWalletTokenizedPAN;
    case 48: return xPayWalletDeviceId;
    case 49: return xPayWalletTransactionToken;
    case 50: return xPayWalletWalletType;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  private static final org.apache.avro.Conversion<?>[] conversions =
      new org.apache.avro.Conversion<?>[] {
      null,
      null,
      new org.apache.avro.Conversions.DecimalConversion(),
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null
  };

  @Override
  public org.apache.avro.Conversion<?> getConversion(int field) {
    return conversions[field];
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: xPayWalletAuthMethod = (java.lang.CharSequence)value$; break;
    case 1: transactionRequestDatetime = (java.lang.CharSequence)value$; break;
    case 2: transactionRequestBillingAmount = (java.math.BigDecimal)value$; break;
    case 3: transactionRequestBillingCurrency = (java.lang.CharSequence)value$; break;
    case 4: transactionRequestStan = (java.lang.CharSequence)value$; break;
    case 5: transactionRequestRetrievalReferenceNumber = (java.lang.CharSequence)value$; break;
    case 6: transactionRequestAmount = (java.math.BigDecimal)value$; break;
    case 7: transactionRequestCurrency = (java.lang.CharSequence)value$; break;
    case 8: transactionRequestTransmissionDatetime = (java.lang.CharSequence)value$; break;
    case 9: transactionRequestBillingRate = (java.lang.CharSequence)value$; break;
    case 10: transactionRequestScheme = (java.lang.CharSequence)value$; break;
    case 11: recurringFlag = (java.lang.Boolean)value$; break;
    case 12: technologyentryMode = (java.lang.CharSequence)value$; break;
    case 13: technologyentryModemagneticStripe = (java.lang.Boolean)value$; break;
    case 14: technologyentryModeEMVChip = (java.lang.Boolean)value$; break;
    case 15: technologyentryModeContactless = (java.lang.Boolean)value$; break;
    case 16: technologyentryModemanualEntry = (java.lang.Boolean)value$; break;
    case 17: technologyentryModeFallback = (java.lang.Boolean)value$; break;
    case 18: technologyentryModeNFC = (java.lang.Boolean)value$; break;
    case 19: technologyPOSConditionCode = (java.lang.CharSequence)value$; break;
    case 20: technologyPOSConditionCodeCardPresent = (java.lang.Boolean)value$; break;
    case 21: technologyPOSConditionCodetransactionCondition = (java.lang.CharSequence)value$; break;
    case 22: technologyPOSConditionCodePinVerification = (java.lang.Boolean)value$; break;
    case 23: technologyPOSConditionCodeSignatureAuthorization = (java.lang.Boolean)value$; break;
    case 24: technologyPOSConditionCodeOnlineAuthorization = (java.lang.Boolean)value$; break;
    case 25: technologyPOSConditionCodeOfflineAuthorization = (java.lang.Boolean)value$; break;
    case 26: technologyPOSConditionCodeFaceToFace = (java.lang.Boolean)value$; break;
    case 27: technologyEMVtagsServiceCode = (java.lang.CharSequence)value$; break;
    case 28: technologyEMVtagsTransactionSequenceCounter = (java.lang.CharSequence)value$; break;
    case 29: technologyEMVtagsTerminalType = (java.lang.CharSequence)value$; break;
    case 30: technologyEMVtagsTerminalCapabilities = (java.lang.CharSequence)value$; break;
    case 31: technologyEMVtagsIAC = (java.lang.CharSequence)value$; break;
    case 32: technologyEMVtagsAC = (java.lang.CharSequence)value$; break;
    case 33: technologyEMVtagsCID = (java.lang.CharSequence)value$; break;
    case 34: technologyEMVtagsAIP = (java.lang.CharSequence)value$; break;
    case 35: technologyEMVtagsIAD = (java.lang.CharSequence)value$; break;
    case 36: technology3DSecureAuthenticationIndicator = (java.lang.CharSequence)value$; break;
    case 37: technology3DSecure3DSVersion = (java.lang.CharSequence)value$; break;
    case 38: technology3DSecureIssuerAuthenticationData = (java.lang.CharSequence)value$; break;
    case 39: technology3DSecureAuthenticationResponse = (java.lang.CharSequence)value$; break;
    case 40: technology3DSecureCAVV = (java.lang.CharSequence)value$; break;
    case 41: technology3DSecureDSTransID = (java.lang.CharSequence)value$; break;
    case 42: technology3DSecureDeviceChannel = (java.lang.CharSequence)value$; break;
    case 43: technology3DSecureAMID = (java.lang.CharSequence)value$; break;
    case 44: technology3DSecureAAV = (java.lang.CharSequence)value$; break;
    case 45: technology3DSecureECI = (java.lang.CharSequence)value$; break;
    case 46: xPayWalletWalletID = (java.lang.CharSequence)value$; break;
    case 47: xPayWalletTokenizedPAN = (java.lang.CharSequence)value$; break;
    case 48: xPayWalletDeviceId = (java.lang.CharSequence)value$; break;
    case 49: xPayWalletTransactionToken = (java.lang.CharSequence)value$; break;
    case 50: xPayWalletWalletType = (java.lang.CharSequence)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'xPayWalletAuthMethod' field.
   * @return Authentication method used in the wallet transaction (e.g., biometric, PIN) (P2S-00073)
   */
  public java.lang.CharSequence getXPayWalletAuthMethod() {
    return xPayWalletAuthMethod;
  }


  /**
   * Sets the value of the 'xPayWalletAuthMethod' field.
   * Authentication method used in the wallet transaction (e.g., biometric, PIN) (P2S-00073)
   * @param value the value to set.
   */
  public void setXPayWalletAuthMethod(java.lang.CharSequence value) {
    this.xPayWalletAuthMethod = value;
  }

  /**
   * Gets the value of the 'transactionRequestDatetime' field.
   * @return Acceptor local time (P2S-00074)
   */
  public java.lang.CharSequence getTransactionRequestDatetime() {
    return transactionRequestDatetime;
  }


  /**
   * Sets the value of the 'transactionRequestDatetime' field.
   * Acceptor local time (P2S-00074)
   * @param value the value to set.
   */
  public void setTransactionRequestDatetime(java.lang.CharSequence value) {
    this.transactionRequestDatetime = value;
  }

  /**
   * Gets the value of the 'transactionRequestBillingAmount' field.
   * @return Amount billed in issuer currency (P2S-00075)
   */
  public java.math.BigDecimal getTransactionRequestBillingAmount() {
    return transactionRequestBillingAmount;
  }


  /**
   * Sets the value of the 'transactionRequestBillingAmount' field.
   * Amount billed in issuer currency (P2S-00075)
   * @param value the value to set.
   */
  public void setTransactionRequestBillingAmount(java.math.BigDecimal value) {
    this.transactionRequestBillingAmount = value;
  }

  /**
   * Gets the value of the 'transactionRequestBillingCurrency' field.
   * @return Billing currency (ISO4217) (P2S-00076)
   */
  public java.lang.CharSequence getTransactionRequestBillingCurrency() {
    return transactionRequestBillingCurrency;
  }


  /**
   * Sets the value of the 'transactionRequestBillingCurrency' field.
   * Billing currency (ISO4217) (P2S-00076)
   * @param value the value to set.
   */
  public void setTransactionRequestBillingCurrency(java.lang.CharSequence value) {
    this.transactionRequestBillingCurrency = value;
  }

  /**
   * Gets the value of the 'transactionRequestStan' field.
   * @return Systems Trace Audit Number (P2S-00077)
   */
  public java.lang.CharSequence getTransactionRequestStan() {
    return transactionRequestStan;
  }


  /**
   * Sets the value of the 'transactionRequestStan' field.
   * Systems Trace Audit Number (P2S-00077)
   * @param value the value to set.
   */
  public void setTransactionRequestStan(java.lang.CharSequence value) {
    this.transactionRequestStan = value;
  }

  /**
   * Gets the value of the 'transactionRequestRetrievalReferenceNumber' field.
   * @return Retrieval Reference Number (P2S-00078)
   */
  public java.lang.CharSequence getTransactionRequestRetrievalReferenceNumber() {
    return transactionRequestRetrievalReferenceNumber;
  }


  /**
   * Sets the value of the 'transactionRequestRetrievalReferenceNumber' field.
   * Retrieval Reference Number (P2S-00078)
   * @param value the value to set.
   */
  public void setTransactionRequestRetrievalReferenceNumber(java.lang.CharSequence value) {
    this.transactionRequestRetrievalReferenceNumber = value;
  }

  /**
   * Gets the value of the 'transactionRequestAmount' field.
   * @return Requested amount in local currency (P2S-00079)
   */
  public java.math.BigDecimal getTransactionRequestAmount() {
    return transactionRequestAmount;
  }


  /**
   * Sets the value of the 'transactionRequestAmount' field.
   * Requested amount in local currency (P2S-00079)
   * @param value the value to set.
   */
  public void setTransactionRequestAmount(java.math.BigDecimal value) {
    this.transactionRequestAmount = value;
  }

  /**
   * Gets the value of the 'transactionRequestCurrency' field.
   * @return Currency of requested amount (P2S-00080)
   */
  public java.lang.CharSequence getTransactionRequestCurrency() {
    return transactionRequestCurrency;
  }


  /**
   * Sets the value of the 'transactionRequestCurrency' field.
   * Currency of requested amount (P2S-00080)
   * @param value the value to set.
   */
  public void setTransactionRequestCurrency(java.lang.CharSequence value) {
    this.transactionRequestCurrency = value;
  }

  /**
   * Gets the value of the 'transactionRequestTransmissionDatetime' field.
   * @return UTC transmission datetime (P2S-00081)
   */
  public java.lang.CharSequence getTransactionRequestTransmissionDatetime() {
    return transactionRequestTransmissionDatetime;
  }


  /**
   * Sets the value of the 'transactionRequestTransmissionDatetime' field.
   * UTC transmission datetime (P2S-00081)
   * @param value the value to set.
   */
  public void setTransactionRequestTransmissionDatetime(java.lang.CharSequence value) {
    this.transactionRequestTransmissionDatetime = value;
  }

  /**
   * Gets the value of the 'transactionRequestBillingRate' field.
   * @return Conversion rate (P2S-00082)
   */
  public java.lang.CharSequence getTransactionRequestBillingRate() {
    return transactionRequestBillingRate;
  }


  /**
   * Sets the value of the 'transactionRequestBillingRate' field.
   * Conversion rate (P2S-00082)
   * @param value the value to set.
   */
  public void setTransactionRequestBillingRate(java.lang.CharSequence value) {
    this.transactionRequestBillingRate = value;
  }

  /**
   * Gets the value of the 'transactionRequestScheme' field.
   * @return Scheme processed the transaction (P2S-00083)
   */
  public java.lang.CharSequence getTransactionRequestScheme() {
    return transactionRequestScheme;
  }


  /**
   * Sets the value of the 'transactionRequestScheme' field.
   * Scheme processed the transaction (P2S-00083)
   * @param value the value to set.
   */
  public void setTransactionRequestScheme(java.lang.CharSequence value) {
    this.transactionRequestScheme = value;
  }

  /**
   * Gets the value of the 'recurringFlag' field.
   * @return Recurring payment flag (P2S-00084)
   */
  public java.lang.Boolean getRecurringFlag() {
    return recurringFlag;
  }


  /**
   * Sets the value of the 'recurringFlag' field.
   * Recurring payment flag (P2S-00084)
   * @param value the value to set.
   */
  public void setRecurringFlag(java.lang.Boolean value) {
    this.recurringFlag = value;
  }

  /**
   * Gets the value of the 'technologyentryMode' field.
   * @return Technology entry mode (P2S-00085)
   */
  public java.lang.CharSequence getTechnologyentryMode() {
    return technologyentryMode;
  }


  /**
   * Sets the value of the 'technologyentryMode' field.
   * Technology entry mode (P2S-00085)
   * @param value the value to set.
   */
  public void setTechnologyentryMode(java.lang.CharSequence value) {
    this.technologyentryMode = value;
  }

  /**
   * Gets the value of the 'technologyentryModemagneticStripe' field.
   * @return Indicates if the card was swiped (magnetic stripe entry) (P2S-00086)
   */
  public boolean getTechnologyentryModemagneticStripe() {
    return technologyentryModemagneticStripe;
  }


  /**
   * Sets the value of the 'technologyentryModemagneticStripe' field.
   * Indicates if the card was swiped (magnetic stripe entry) (P2S-00086)
   * @param value the value to set.
   */
  public void setTechnologyentryModemagneticStripe(boolean value) {
    this.technologyentryModemagneticStripe = value;
  }

  /**
   * Gets the value of the 'technologyentryModeEMVChip' field.
   * @return Indicates if the card was inserted for EMV chip-based processing (P2S-00087)
   */
  public boolean getTechnologyentryModeEMVChip() {
    return technologyentryModeEMVChip;
  }


  /**
   * Sets the value of the 'technologyentryModeEMVChip' field.
   * Indicates if the card was inserted for EMV chip-based processing (P2S-00087)
   * @param value the value to set.
   */
  public void setTechnologyentryModeEMVChip(boolean value) {
    this.technologyentryModeEMVChip = value;
  }

  /**
   * Gets the value of the 'technologyentryModeContactless' field.
   * @return Indicates if the card was used for a contactless transaction (NFC) (P2S-00088)
   */
  public boolean getTechnologyentryModeContactless() {
    return technologyentryModeContactless;
  }


  /**
   * Sets the value of the 'technologyentryModeContactless' field.
   * Indicates if the card was used for a contactless transaction (NFC) (P2S-00088)
   * @param value the value to set.
   */
  public void setTechnologyentryModeContactless(boolean value) {
    this.technologyentryModeContactless = value;
  }

  /**
   * Gets the value of the 'technologyentryModemanualEntry' field.
   * @return Indicates if the card details were manually entered (P2S-00089)
   */
  public boolean getTechnologyentryModemanualEntry() {
    return technologyentryModemanualEntry;
  }


  /**
   * Sets the value of the 'technologyentryModemanualEntry' field.
   * Indicates if the card details were manually entered (P2S-00089)
   * @param value the value to set.
   */
  public void setTechnologyentryModemanualEntry(boolean value) {
    this.technologyentryModemanualEntry = value;
  }

  /**
   * Gets the value of the 'technologyentryModeFallback' field.
   * @return Indicates if fallback processing was used (in case of EMV failure) (P2S-00090)
   */
  public boolean getTechnologyentryModeFallback() {
    return technologyentryModeFallback;
  }


  /**
   * Sets the value of the 'technologyentryModeFallback' field.
   * Indicates if fallback processing was used (in case of EMV failure) (P2S-00090)
   * @param value the value to set.
   */
  public void setTechnologyentryModeFallback(boolean value) {
    this.technologyentryModeFallback = value;
  }

  /**
   * Gets the value of the 'technologyentryModeNFC' field.
   * @return Indicates if NFC was used for the transaction (P2S-00091)
   */
  public boolean getTechnologyentryModeNFC() {
    return technologyentryModeNFC;
  }


  /**
   * Sets the value of the 'technologyentryModeNFC' field.
   * Indicates if NFC was used for the transaction (P2S-00091)
   * @param value the value to set.
   */
  public void setTechnologyentryModeNFC(boolean value) {
    this.technologyentryModeNFC = value;
  }

  /**
   * Gets the value of the 'technologyPOSConditionCode' field.
   * @return POS condition code (P2S-00092)
   */
  public java.lang.CharSequence getTechnologyPOSConditionCode() {
    return technologyPOSConditionCode;
  }


  /**
   * Sets the value of the 'technologyPOSConditionCode' field.
   * POS condition code (P2S-00092)
   * @param value the value to set.
   */
  public void setTechnologyPOSConditionCode(java.lang.CharSequence value) {
    this.technologyPOSConditionCode = value;
  }

  /**
   * Gets the value of the 'technologyPOSConditionCodeCardPresent' field.
   * @return Indicates whether the card was physically present during the transaction (P2S-00093)
   */
  public boolean getTechnologyPOSConditionCodeCardPresent() {
    return technologyPOSConditionCodeCardPresent;
  }


  /**
   * Sets the value of the 'technologyPOSConditionCodeCardPresent' field.
   * Indicates whether the card was physically present during the transaction (P2S-00093)
   * @param value the value to set.
   */
  public void setTechnologyPOSConditionCodeCardPresent(boolean value) {
    this.technologyPOSConditionCodeCardPresent = value;
  }

  /**
   * Gets the value of the 'technologyPOSConditionCodetransactionCondition' field.
   * @return Condition of the transaction (e.g., standard, refund) (P2S-00094)
   */
  public java.lang.CharSequence getTechnologyPOSConditionCodetransactionCondition() {
    return technologyPOSConditionCodetransactionCondition;
  }


  /**
   * Sets the value of the 'technologyPOSConditionCodetransactionCondition' field.
   * Condition of the transaction (e.g., standard, refund) (P2S-00094)
   * @param value the value to set.
   */
  public void setTechnologyPOSConditionCodetransactionCondition(java.lang.CharSequence value) {
    this.technologyPOSConditionCodetransactionCondition = value;
  }

  /**
   * Gets the value of the 'technologyPOSConditionCodePinVerification' field.
   * @return Indicates if PIN verification was performed (P2S-00095)
   */
  public boolean getTechnologyPOSConditionCodePinVerification() {
    return technologyPOSConditionCodePinVerification;
  }


  /**
   * Sets the value of the 'technologyPOSConditionCodePinVerification' field.
   * Indicates if PIN verification was performed (P2S-00095)
   * @param value the value to set.
   */
  public void setTechnologyPOSConditionCodePinVerification(boolean value) {
    this.technologyPOSConditionCodePinVerification = value;
  }

  /**
   * Gets the value of the 'technologyPOSConditionCodeSignatureAuthorization' field.
   * @return Indicates if signature authorization was used (P2S-00096)
   */
  public java.lang.Boolean getTechnologyPOSConditionCodeSignatureAuthorization() {
    return technologyPOSConditionCodeSignatureAuthorization;
  }


  /**
   * Sets the value of the 'technologyPOSConditionCodeSignatureAuthorization' field.
   * Indicates if signature authorization was used (P2S-00096)
   * @param value the value to set.
   */
  public void setTechnologyPOSConditionCodeSignatureAuthorization(java.lang.Boolean value) {
    this.technologyPOSConditionCodeSignatureAuthorization = value;
  }

  /**
   * Gets the value of the 'technologyPOSConditionCodeOnlineAuthorization' field.
   * @return Indicates whether online authorization was performed (P2S-00097)
   */
  public boolean getTechnologyPOSConditionCodeOnlineAuthorization() {
    return technologyPOSConditionCodeOnlineAuthorization;
  }


  /**
   * Sets the value of the 'technologyPOSConditionCodeOnlineAuthorization' field.
   * Indicates whether online authorization was performed (P2S-00097)
   * @param value the value to set.
   */
  public void setTechnologyPOSConditionCodeOnlineAuthorization(boolean value) {
    this.technologyPOSConditionCodeOnlineAuthorization = value;
  }

  /**
   * Gets the value of the 'technologyPOSConditionCodeOfflineAuthorization' field.
   * @return Indicates whether offline authorization was used (P2S-00098)
   */
  public java.lang.Boolean getTechnologyPOSConditionCodeOfflineAuthorization() {
    return technologyPOSConditionCodeOfflineAuthorization;
  }


  /**
   * Sets the value of the 'technologyPOSConditionCodeOfflineAuthorization' field.
   * Indicates whether offline authorization was used (P2S-00098)
   * @param value the value to set.
   */
  public void setTechnologyPOSConditionCodeOfflineAuthorization(java.lang.Boolean value) {
    this.technologyPOSConditionCodeOfflineAuthorization = value;
  }

  /**
   * Gets the value of the 'technologyPOSConditionCodeFaceToFace' field.
   * @return Indicates whether the transaction is face-to-face or remote (P2S-00099)
   */
  public java.lang.Boolean getTechnologyPOSConditionCodeFaceToFace() {
    return technologyPOSConditionCodeFaceToFace;
  }


  /**
   * Sets the value of the 'technologyPOSConditionCodeFaceToFace' field.
   * Indicates whether the transaction is face-to-face or remote (P2S-00099)
   * @param value the value to set.
   */
  public void setTechnologyPOSConditionCodeFaceToFace(java.lang.Boolean value) {
    this.technologyPOSConditionCodeFaceToFace = value;
  }

  /**
   * Gets the value of the 'technologyEMVtagsServiceCode' field.
   * @return Specifies the card service type (e.g., debit, credit) (P2S-00101)
   */
  public java.lang.CharSequence getTechnologyEMVtagsServiceCode() {
    return technologyEMVtagsServiceCode;
  }


  /**
   * Sets the value of the 'technologyEMVtagsServiceCode' field.
   * Specifies the card service type (e.g., debit, credit) (P2S-00101)
   * @param value the value to set.
   */
  public void setTechnologyEMVtagsServiceCode(java.lang.CharSequence value) {
    this.technologyEMVtagsServiceCode = value;
  }

  /**
   * Gets the value of the 'technologyEMVtagsTransactionSequenceCounter' field.
   * @return A unique sequence number for the transaction (P2S-00102)
   */
  public java.lang.CharSequence getTechnologyEMVtagsTransactionSequenceCounter() {
    return technologyEMVtagsTransactionSequenceCounter;
  }


  /**
   * Sets the value of the 'technologyEMVtagsTransactionSequenceCounter' field.
   * A unique sequence number for the transaction (P2S-00102)
   * @param value the value to set.
   */
  public void setTechnologyEMVtagsTransactionSequenceCounter(java.lang.CharSequence value) {
    this.technologyEMVtagsTransactionSequenceCounter = value;
  }

  /**
   * Gets the value of the 'technologyEMVtagsTerminalType' field.
   * @return Type of terminal used to process the transaction (e.g., POS, ATM) (P2S-00103)
   */
  public java.lang.CharSequence getTechnologyEMVtagsTerminalType() {
    return technologyEMVtagsTerminalType;
  }


  /**
   * Sets the value of the 'technologyEMVtagsTerminalType' field.
   * Type of terminal used to process the transaction (e.g., POS, ATM) (P2S-00103)
   * @param value the value to set.
   */
  public void setTechnologyEMVtagsTerminalType(java.lang.CharSequence value) {
    this.technologyEMVtagsTerminalType = value;
  }

  /**
   * Gets the value of the 'technologyEMVtagsTerminalCapabilities' field.
   * @return Defines terminal capabilities (e.g., EMV, NFC) (P2S-00104)
   */
  public java.lang.CharSequence getTechnologyEMVtagsTerminalCapabilities() {
    return technologyEMVtagsTerminalCapabilities;
  }


  /**
   * Sets the value of the 'technologyEMVtagsTerminalCapabilities' field.
   * Defines terminal capabilities (e.g., EMV, NFC) (P2S-00104)
   * @param value the value to set.
   */
  public void setTechnologyEMVtagsTerminalCapabilities(java.lang.CharSequence value) {
    this.technologyEMVtagsTerminalCapabilities = value;
  }

  /**
   * Gets the value of the 'technologyEMVtagsIAC' field.
   * @return Issuer Action Code (indicates transaction outcome) (P2S-00105)
   */
  public java.lang.CharSequence getTechnologyEMVtagsIAC() {
    return technologyEMVtagsIAC;
  }


  /**
   * Sets the value of the 'technologyEMVtagsIAC' field.
   * Issuer Action Code (indicates transaction outcome) (P2S-00105)
   * @param value the value to set.
   */
  public void setTechnologyEMVtagsIAC(java.lang.CharSequence value) {
    this.technologyEMVtagsIAC = value;
  }

  /**
   * Gets the value of the 'technologyEMVtagsAC' field.
   * @return Cryptogram used in authorization (ARQC/TC/AAC) (P2S-00106)
   */
  public java.lang.CharSequence getTechnologyEMVtagsAC() {
    return technologyEMVtagsAC;
  }


  /**
   * Sets the value of the 'technologyEMVtagsAC' field.
   * Cryptogram used in authorization (ARQC/TC/AAC) (P2S-00106)
   * @param value the value to set.
   */
  public void setTechnologyEMVtagsAC(java.lang.CharSequence value) {
    this.technologyEMVtagsAC = value;
  }

  /**
   * Gets the value of the 'technologyEMVtagsCID' field.
   * @return Cryptogram Identifier, indicates the type of cryptogram (P2S-00107)
   */
  public java.lang.CharSequence getTechnologyEMVtagsCID() {
    return technologyEMVtagsCID;
  }


  /**
   * Sets the value of the 'technologyEMVtagsCID' field.
   * Cryptogram Identifier, indicates the type of cryptogram (P2S-00107)
   * @param value the value to set.
   */
  public void setTechnologyEMVtagsCID(java.lang.CharSequence value) {
    this.technologyEMVtagsCID = value;
  }

  /**
   * Gets the value of the 'technologyEMVtagsAIP' field.
   * @return Application Interchange Profile, defines card capabilities (P2S-00108)
   */
  public java.lang.CharSequence getTechnologyEMVtagsAIP() {
    return technologyEMVtagsAIP;
  }


  /**
   * Sets the value of the 'technologyEMVtagsAIP' field.
   * Application Interchange Profile, defines card capabilities (P2S-00108)
   * @param value the value to set.
   */
  public void setTechnologyEMVtagsAIP(java.lang.CharSequence value) {
    this.technologyEMVtagsAIP = value;
  }

  /**
   * Gets the value of the 'technologyEMVtagsIAD' field.
   * @return Issuer Application Data, used for issuer-specific risk management (P2S-00109)
   */
  public java.lang.CharSequence getTechnologyEMVtagsIAD() {
    return technologyEMVtagsIAD;
  }


  /**
   * Sets the value of the 'technologyEMVtagsIAD' field.
   * Issuer Application Data, used for issuer-specific risk management (P2S-00109)
   * @param value the value to set.
   */
  public void setTechnologyEMVtagsIAD(java.lang.CharSequence value) {
    this.technologyEMVtagsIAD = value;
  }

  /**
   * Gets the value of the 'technology3DSecureAuthenticationIndicator' field.
   * @return Indicates the result of 3D Secure authentication (e.g., successful, failed) (P2S-00110)
   */
  public java.lang.CharSequence getTechnology3DSecureAuthenticationIndicator() {
    return technology3DSecureAuthenticationIndicator;
  }


  /**
   * Sets the value of the 'technology3DSecureAuthenticationIndicator' field.
   * Indicates the result of 3D Secure authentication (e.g., successful, failed) (P2S-00110)
   * @param value the value to set.
   */
  public void setTechnology3DSecureAuthenticationIndicator(java.lang.CharSequence value) {
    this.technology3DSecureAuthenticationIndicator = value;
  }

  /**
   * Gets the value of the 'technology3DSecure3DSVersion' field.
   * @return Specifies the version of 3D Secure used (P2S-00111)
   */
  public java.lang.CharSequence getTechnology3DSecure3DSVersion() {
    return technology3DSecure3DSVersion;
  }


  /**
   * Sets the value of the 'technology3DSecure3DSVersion' field.
   * Specifies the version of 3D Secure used (P2S-00111)
   * @param value the value to set.
   */
  public void setTechnology3DSecure3DSVersion(java.lang.CharSequence value) {
    this.technology3DSecure3DSVersion = value;
  }

  /**
   * Gets the value of the 'technology3DSecureIssuerAuthenticationData' field.
   * @return Data used by the issuer for authentication (P2S-00112)
   */
  public java.lang.CharSequence getTechnology3DSecureIssuerAuthenticationData() {
    return technology3DSecureIssuerAuthenticationData;
  }


  /**
   * Sets the value of the 'technology3DSecureIssuerAuthenticationData' field.
   * Data used by the issuer for authentication (P2S-00112)
   * @param value the value to set.
   */
  public void setTechnology3DSecureIssuerAuthenticationData(java.lang.CharSequence value) {
    this.technology3DSecureIssuerAuthenticationData = value;
  }

  /**
   * Gets the value of the 'technology3DSecureAuthenticationResponse' field.
   * @return Response from the issuer regarding authentication outcome (P2S-00113)
   */
  public java.lang.CharSequence getTechnology3DSecureAuthenticationResponse() {
    return technology3DSecureAuthenticationResponse;
  }


  /**
   * Sets the value of the 'technology3DSecureAuthenticationResponse' field.
   * Response from the issuer regarding authentication outcome (P2S-00113)
   * @param value the value to set.
   */
  public void setTechnology3DSecureAuthenticationResponse(java.lang.CharSequence value) {
    this.technology3DSecureAuthenticationResponse = value;
  }

  /**
   * Gets the value of the 'technology3DSecureCAVV' field.
   * @return Cardholder Authentication Verification Value (used in 3D Secure) (P2S-00114)
   */
  public java.lang.CharSequence getTechnology3DSecureCAVV() {
    return technology3DSecureCAVV;
  }


  /**
   * Sets the value of the 'technology3DSecureCAVV' field.
   * Cardholder Authentication Verification Value (used in 3D Secure) (P2S-00114)
   * @param value the value to set.
   */
  public void setTechnology3DSecureCAVV(java.lang.CharSequence value) {
    this.technology3DSecureCAVV = value;
  }

  /**
   * Gets the value of the 'technology3DSecureDSTransID' field.
   * @return 3D Secure 2 transaction identifier (P2S-00115)
   */
  public java.lang.CharSequence getTechnology3DSecureDSTransID() {
    return technology3DSecureDSTransID;
  }


  /**
   * Sets the value of the 'technology3DSecureDSTransID' field.
   * 3D Secure 2 transaction identifier (P2S-00115)
   * @param value the value to set.
   */
  public void setTechnology3DSecureDSTransID(java.lang.CharSequence value) {
    this.technology3DSecureDSTransID = value;
  }

  /**
   * Gets the value of the 'technology3DSecureDeviceChannel' field.
   * @return Indicates whether the transaction was made using a mobile device or desktop (P2S-00116)
   */
  public java.lang.CharSequence getTechnology3DSecureDeviceChannel() {
    return technology3DSecureDeviceChannel;
  }


  /**
   * Sets the value of the 'technology3DSecureDeviceChannel' field.
   * Indicates whether the transaction was made using a mobile device or desktop (P2S-00116)
   * @param value the value to set.
   */
  public void setTechnology3DSecureDeviceChannel(java.lang.CharSequence value) {
    this.technology3DSecureDeviceChannel = value;
  }

  /**
   * Gets the value of the 'technology3DSecureAMID' field.
   * @return Authentication Method Indicator used in 3D Secure (e.g., biometric, PIN) (P2S-00117)
   */
  public java.lang.CharSequence getTechnology3DSecureAMID() {
    return technology3DSecureAMID;
  }


  /**
   * Sets the value of the 'technology3DSecureAMID' field.
   * Authentication Method Indicator used in 3D Secure (e.g., biometric, PIN) (P2S-00117)
   * @param value the value to set.
   */
  public void setTechnology3DSecureAMID(java.lang.CharSequence value) {
    this.technology3DSecureAMID = value;
  }

  /**
   * Gets the value of the 'technology3DSecureAAV' field.
   * @return Mastercard's equivalent of CAVV used in 3D Secure for cardholder authentication (P2S-00118)
   */
  public java.lang.CharSequence getTechnology3DSecureAAV() {
    return technology3DSecureAAV;
  }


  /**
   * Sets the value of the 'technology3DSecureAAV' field.
   * Mastercard's equivalent of CAVV used in 3D Secure for cardholder authentication (P2S-00118)
   * @param value the value to set.
   */
  public void setTechnology3DSecureAAV(java.lang.CharSequence value) {
    this.technology3DSecureAAV = value;
  }

  /**
   * Gets the value of the 'technology3DSecureECI' field.
   * @return Electronic Commerce Indicator used in 3D Secure transactions (P2S-00119)
   */
  public java.lang.CharSequence getTechnology3DSecureECI() {
    return technology3DSecureECI;
  }


  /**
   * Sets the value of the 'technology3DSecureECI' field.
   * Electronic Commerce Indicator used in 3D Secure transactions (P2S-00119)
   * @param value the value to set.
   */
  public void setTechnology3DSecureECI(java.lang.CharSequence value) {
    this.technology3DSecureECI = value;
  }

  /**
   * Gets the value of the 'xPayWalletWalletID' field.
   * @return Unique identifier for the wallet user in the xPay system (P2S-00120)
   */
  public java.lang.CharSequence getXPayWalletWalletID() {
    return xPayWalletWalletID;
  }


  /**
   * Sets the value of the 'xPayWalletWalletID' field.
   * Unique identifier for the wallet user in the xPay system (P2S-00120)
   * @param value the value to set.
   */
  public void setXPayWalletWalletID(java.lang.CharSequence value) {
    this.xPayWalletWalletID = value;
  }

  /**
   * Gets the value of the 'xPayWalletTokenizedPAN' field.
   * @return Token representing the actual PAN (Primary Account Number) for the transaction (P2S-00121)
   */
  public java.lang.CharSequence getXPayWalletTokenizedPAN() {
    return xPayWalletTokenizedPAN;
  }


  /**
   * Sets the value of the 'xPayWalletTokenizedPAN' field.
   * Token representing the actual PAN (Primary Account Number) for the transaction (P2S-00121)
   * @param value the value to set.
   */
  public void setXPayWalletTokenizedPAN(java.lang.CharSequence value) {
    this.xPayWalletTokenizedPAN = value;
  }

  /**
   * Gets the value of the 'xPayWalletDeviceId' field.
   * @return Identifier for the mobile device used for the transaction (P2S-00122)
   */
  public java.lang.CharSequence getXPayWalletDeviceId() {
    return xPayWalletDeviceId;
  }


  /**
   * Sets the value of the 'xPayWalletDeviceId' field.
   * Identifier for the mobile device used for the transaction (P2S-00122)
   * @param value the value to set.
   */
  public void setXPayWalletDeviceId(java.lang.CharSequence value) {
    this.xPayWalletDeviceId = value;
  }

  /**
   * Gets the value of the 'xPayWalletTransactionToken' field.
   * @return One-time token used for this specific transaction (P2S-00123)
   */
  public java.lang.CharSequence getXPayWalletTransactionToken() {
    return xPayWalletTransactionToken;
  }


  /**
   * Sets the value of the 'xPayWalletTransactionToken' field.
   * One-time token used for this specific transaction (P2S-00123)
   * @param value the value to set.
   */
  public void setXPayWalletTransactionToken(java.lang.CharSequence value) {
    this.xPayWalletTransactionToken = value;
  }

  /**
   * Gets the value of the 'xPayWalletWalletType' field.
   * @return Identifies the wallet provider (e.g., Apple Pay, Google Pay) (P2S-00124)
   */
  public java.lang.CharSequence getXPayWalletWalletType() {
    return xPayWalletWalletType;
  }


  /**
   * Sets the value of the 'xPayWalletWalletType' field.
   * Identifies the wallet provider (e.g., Apple Pay, Google Pay) (P2S-00124)
   * @param value the value to set.
   */
  public void setXPayWalletWalletType(java.lang.CharSequence value) {
    this.xPayWalletWalletType = value;
  }

  /**
   * Creates a new TransactionRequest RecordBuilder.
   * @return A new TransactionRequest RecordBuilder
   */
  public static effyis.partners.p2s.shared.avro.meta.input.TransactionRequest.Builder newBuilder() {
    return new effyis.partners.p2s.shared.avro.meta.input.TransactionRequest.Builder();
  }

  /**
   * Creates a new TransactionRequest RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new TransactionRequest RecordBuilder
   */
  public static effyis.partners.p2s.shared.avro.meta.input.TransactionRequest.Builder newBuilder(effyis.partners.p2s.shared.avro.meta.input.TransactionRequest.Builder other) {
    if (other == null) {
      return new effyis.partners.p2s.shared.avro.meta.input.TransactionRequest.Builder();
    } else {
      return new effyis.partners.p2s.shared.avro.meta.input.TransactionRequest.Builder(other);
    }
  }

  /**
   * Creates a new TransactionRequest RecordBuilder by copying an existing TransactionRequest instance.
   * @param other The existing instance to copy.
   * @return A new TransactionRequest RecordBuilder
   */
  public static effyis.partners.p2s.shared.avro.meta.input.TransactionRequest.Builder newBuilder(effyis.partners.p2s.shared.avro.meta.input.TransactionRequest other) {
    if (other == null) {
      return new effyis.partners.p2s.shared.avro.meta.input.TransactionRequest.Builder();
    } else {
      return new effyis.partners.p2s.shared.avro.meta.input.TransactionRequest.Builder(other);
    }
  }

  /**
   * RecordBuilder for TransactionRequest instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<TransactionRequest>
    implements org.apache.avro.data.RecordBuilder<TransactionRequest> {

    /** Authentication method used in the wallet transaction (e.g., biometric, PIN) (P2S-00073) */
    private java.lang.CharSequence xPayWalletAuthMethod;
    /** Acceptor local time (P2S-00074) */
    private java.lang.CharSequence transactionRequestDatetime;
    /** Amount billed in issuer currency (P2S-00075) */
    private java.math.BigDecimal transactionRequestBillingAmount;
    /** Billing currency (ISO4217) (P2S-00076) */
    private java.lang.CharSequence transactionRequestBillingCurrency;
    /** Systems Trace Audit Number (P2S-00077) */
    private java.lang.CharSequence transactionRequestStan;
    /** Retrieval Reference Number (P2S-00078) */
    private java.lang.CharSequence transactionRequestRetrievalReferenceNumber;
    /** Requested amount in local currency (P2S-00079) */
    private java.math.BigDecimal transactionRequestAmount;
    /** Currency of requested amount (P2S-00080) */
    private java.lang.CharSequence transactionRequestCurrency;
    /** UTC transmission datetime (P2S-00081) */
    private java.lang.CharSequence transactionRequestTransmissionDatetime;
    /** Conversion rate (P2S-00082) */
    private java.lang.CharSequence transactionRequestBillingRate;
    /** Scheme processed the transaction (P2S-00083) */
    private java.lang.CharSequence transactionRequestScheme;
    /** Recurring payment flag (P2S-00084) */
    private java.lang.Boolean recurringFlag;
    /** Technology entry mode (P2S-00085) */
    private java.lang.CharSequence technologyentryMode;
    /** Indicates if the card was swiped (magnetic stripe entry) (P2S-00086) */
    private boolean technologyentryModemagneticStripe;
    /** Indicates if the card was inserted for EMV chip-based processing (P2S-00087) */
    private boolean technologyentryModeEMVChip;
    /** Indicates if the card was used for a contactless transaction (NFC) (P2S-00088) */
    private boolean technologyentryModeContactless;
    /** Indicates if the card details were manually entered (P2S-00089) */
    private boolean technologyentryModemanualEntry;
    /** Indicates if fallback processing was used (in case of EMV failure) (P2S-00090) */
    private boolean technologyentryModeFallback;
    /** Indicates if NFC was used for the transaction (P2S-00091) */
    private boolean technologyentryModeNFC;
    /** POS condition code (P2S-00092) */
    private java.lang.CharSequence technologyPOSConditionCode;
    /** Indicates whether the card was physically present during the transaction (P2S-00093) */
    private boolean technologyPOSConditionCodeCardPresent;
    /** Condition of the transaction (e.g., standard, refund) (P2S-00094) */
    private java.lang.CharSequence technologyPOSConditionCodetransactionCondition;
    /** Indicates if PIN verification was performed (P2S-00095) */
    private boolean technologyPOSConditionCodePinVerification;
    /** Indicates if signature authorization was used (P2S-00096) */
    private java.lang.Boolean technologyPOSConditionCodeSignatureAuthorization;
    /** Indicates whether online authorization was performed (P2S-00097) */
    private boolean technologyPOSConditionCodeOnlineAuthorization;
    /** Indicates whether offline authorization was used (P2S-00098) */
    private java.lang.Boolean technologyPOSConditionCodeOfflineAuthorization;
    /** Indicates whether the transaction is face-to-face or remote (P2S-00099) */
    private java.lang.Boolean technologyPOSConditionCodeFaceToFace;
    /** Specifies the card service type (e.g., debit, credit) (P2S-00101) */
    private java.lang.CharSequence technologyEMVtagsServiceCode;
    /** A unique sequence number for the transaction (P2S-00102) */
    private java.lang.CharSequence technologyEMVtagsTransactionSequenceCounter;
    /** Type of terminal used to process the transaction (e.g., POS, ATM) (P2S-00103) */
    private java.lang.CharSequence technologyEMVtagsTerminalType;
    /** Defines terminal capabilities (e.g., EMV, NFC) (P2S-00104) */
    private java.lang.CharSequence technologyEMVtagsTerminalCapabilities;
    /** Issuer Action Code (indicates transaction outcome) (P2S-00105) */
    private java.lang.CharSequence technologyEMVtagsIAC;
    /** Cryptogram used in authorization (ARQC/TC/AAC) (P2S-00106) */
    private java.lang.CharSequence technologyEMVtagsAC;
    /** Cryptogram Identifier, indicates the type of cryptogram (P2S-00107) */
    private java.lang.CharSequence technologyEMVtagsCID;
    /** Application Interchange Profile, defines card capabilities (P2S-00108) */
    private java.lang.CharSequence technologyEMVtagsAIP;
    /** Issuer Application Data, used for issuer-specific risk management (P2S-00109) */
    private java.lang.CharSequence technologyEMVtagsIAD;
    /** Indicates the result of 3D Secure authentication (e.g., successful, failed) (P2S-00110) */
    private java.lang.CharSequence technology3DSecureAuthenticationIndicator;
    /** Specifies the version of 3D Secure used (P2S-00111) */
    private java.lang.CharSequence technology3DSecure3DSVersion;
    /** Data used by the issuer for authentication (P2S-00112) */
    private java.lang.CharSequence technology3DSecureIssuerAuthenticationData;
    /** Response from the issuer regarding authentication outcome (P2S-00113) */
    private java.lang.CharSequence technology3DSecureAuthenticationResponse;
    /** Cardholder Authentication Verification Value (used in 3D Secure) (P2S-00114) */
    private java.lang.CharSequence technology3DSecureCAVV;
    /** 3D Secure 2 transaction identifier (P2S-00115) */
    private java.lang.CharSequence technology3DSecureDSTransID;
    /** Indicates whether the transaction was made using a mobile device or desktop (P2S-00116) */
    private java.lang.CharSequence technology3DSecureDeviceChannel;
    /** Authentication Method Indicator used in 3D Secure (e.g., biometric, PIN) (P2S-00117) */
    private java.lang.CharSequence technology3DSecureAMID;
    /** Mastercard's equivalent of CAVV used in 3D Secure for cardholder authentication (P2S-00118) */
    private java.lang.CharSequence technology3DSecureAAV;
    /** Electronic Commerce Indicator used in 3D Secure transactions (P2S-00119) */
    private java.lang.CharSequence technology3DSecureECI;
    /** Unique identifier for the wallet user in the xPay system (P2S-00120) */
    private java.lang.CharSequence xPayWalletWalletID;
    /** Token representing the actual PAN (Primary Account Number) for the transaction (P2S-00121) */
    private java.lang.CharSequence xPayWalletTokenizedPAN;
    /** Identifier for the mobile device used for the transaction (P2S-00122) */
    private java.lang.CharSequence xPayWalletDeviceId;
    /** One-time token used for this specific transaction (P2S-00123) */
    private java.lang.CharSequence xPayWalletTransactionToken;
    /** Identifies the wallet provider (e.g., Apple Pay, Google Pay) (P2S-00124) */
    private java.lang.CharSequence xPayWalletWalletType;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(effyis.partners.p2s.shared.avro.meta.input.TransactionRequest.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.xPayWalletAuthMethod)) {
        this.xPayWalletAuthMethod = data().deepCopy(fields()[0].schema(), other.xPayWalletAuthMethod);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.transactionRequestDatetime)) {
        this.transactionRequestDatetime = data().deepCopy(fields()[1].schema(), other.transactionRequestDatetime);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.transactionRequestBillingAmount)) {
        this.transactionRequestBillingAmount = data().deepCopy(fields()[2].schema(), other.transactionRequestBillingAmount);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.transactionRequestBillingCurrency)) {
        this.transactionRequestBillingCurrency = data().deepCopy(fields()[3].schema(), other.transactionRequestBillingCurrency);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.transactionRequestStan)) {
        this.transactionRequestStan = data().deepCopy(fields()[4].schema(), other.transactionRequestStan);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.transactionRequestRetrievalReferenceNumber)) {
        this.transactionRequestRetrievalReferenceNumber = data().deepCopy(fields()[5].schema(), other.transactionRequestRetrievalReferenceNumber);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.transactionRequestAmount)) {
        this.transactionRequestAmount = data().deepCopy(fields()[6].schema(), other.transactionRequestAmount);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.transactionRequestCurrency)) {
        this.transactionRequestCurrency = data().deepCopy(fields()[7].schema(), other.transactionRequestCurrency);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.transactionRequestTransmissionDatetime)) {
        this.transactionRequestTransmissionDatetime = data().deepCopy(fields()[8].schema(), other.transactionRequestTransmissionDatetime);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (isValidValue(fields()[9], other.transactionRequestBillingRate)) {
        this.transactionRequestBillingRate = data().deepCopy(fields()[9].schema(), other.transactionRequestBillingRate);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
      if (isValidValue(fields()[10], other.transactionRequestScheme)) {
        this.transactionRequestScheme = data().deepCopy(fields()[10].schema(), other.transactionRequestScheme);
        fieldSetFlags()[10] = other.fieldSetFlags()[10];
      }
      if (isValidValue(fields()[11], other.recurringFlag)) {
        this.recurringFlag = data().deepCopy(fields()[11].schema(), other.recurringFlag);
        fieldSetFlags()[11] = other.fieldSetFlags()[11];
      }
      if (isValidValue(fields()[12], other.technologyentryMode)) {
        this.technologyentryMode = data().deepCopy(fields()[12].schema(), other.technologyentryMode);
        fieldSetFlags()[12] = other.fieldSetFlags()[12];
      }
      if (isValidValue(fields()[13], other.technologyentryModemagneticStripe)) {
        this.technologyentryModemagneticStripe = data().deepCopy(fields()[13].schema(), other.technologyentryModemagneticStripe);
        fieldSetFlags()[13] = other.fieldSetFlags()[13];
      }
      if (isValidValue(fields()[14], other.technologyentryModeEMVChip)) {
        this.technologyentryModeEMVChip = data().deepCopy(fields()[14].schema(), other.technologyentryModeEMVChip);
        fieldSetFlags()[14] = other.fieldSetFlags()[14];
      }
      if (isValidValue(fields()[15], other.technologyentryModeContactless)) {
        this.technologyentryModeContactless = data().deepCopy(fields()[15].schema(), other.technologyentryModeContactless);
        fieldSetFlags()[15] = other.fieldSetFlags()[15];
      }
      if (isValidValue(fields()[16], other.technologyentryModemanualEntry)) {
        this.technologyentryModemanualEntry = data().deepCopy(fields()[16].schema(), other.technologyentryModemanualEntry);
        fieldSetFlags()[16] = other.fieldSetFlags()[16];
      }
      if (isValidValue(fields()[17], other.technologyentryModeFallback)) {
        this.technologyentryModeFallback = data().deepCopy(fields()[17].schema(), other.technologyentryModeFallback);
        fieldSetFlags()[17] = other.fieldSetFlags()[17];
      }
      if (isValidValue(fields()[18], other.technologyentryModeNFC)) {
        this.technologyentryModeNFC = data().deepCopy(fields()[18].schema(), other.technologyentryModeNFC);
        fieldSetFlags()[18] = other.fieldSetFlags()[18];
      }
      if (isValidValue(fields()[19], other.technologyPOSConditionCode)) {
        this.technologyPOSConditionCode = data().deepCopy(fields()[19].schema(), other.technologyPOSConditionCode);
        fieldSetFlags()[19] = other.fieldSetFlags()[19];
      }
      if (isValidValue(fields()[20], other.technologyPOSConditionCodeCardPresent)) {
        this.technologyPOSConditionCodeCardPresent = data().deepCopy(fields()[20].schema(), other.technologyPOSConditionCodeCardPresent);
        fieldSetFlags()[20] = other.fieldSetFlags()[20];
      }
      if (isValidValue(fields()[21], other.technologyPOSConditionCodetransactionCondition)) {
        this.technologyPOSConditionCodetransactionCondition = data().deepCopy(fields()[21].schema(), other.technologyPOSConditionCodetransactionCondition);
        fieldSetFlags()[21] = other.fieldSetFlags()[21];
      }
      if (isValidValue(fields()[22], other.technologyPOSConditionCodePinVerification)) {
        this.technologyPOSConditionCodePinVerification = data().deepCopy(fields()[22].schema(), other.technologyPOSConditionCodePinVerification);
        fieldSetFlags()[22] = other.fieldSetFlags()[22];
      }
      if (isValidValue(fields()[23], other.technologyPOSConditionCodeSignatureAuthorization)) {
        this.technologyPOSConditionCodeSignatureAuthorization = data().deepCopy(fields()[23].schema(), other.technologyPOSConditionCodeSignatureAuthorization);
        fieldSetFlags()[23] = other.fieldSetFlags()[23];
      }
      if (isValidValue(fields()[24], other.technologyPOSConditionCodeOnlineAuthorization)) {
        this.technologyPOSConditionCodeOnlineAuthorization = data().deepCopy(fields()[24].schema(), other.technologyPOSConditionCodeOnlineAuthorization);
        fieldSetFlags()[24] = other.fieldSetFlags()[24];
      }
      if (isValidValue(fields()[25], other.technologyPOSConditionCodeOfflineAuthorization)) {
        this.technologyPOSConditionCodeOfflineAuthorization = data().deepCopy(fields()[25].schema(), other.technologyPOSConditionCodeOfflineAuthorization);
        fieldSetFlags()[25] = other.fieldSetFlags()[25];
      }
      if (isValidValue(fields()[26], other.technologyPOSConditionCodeFaceToFace)) {
        this.technologyPOSConditionCodeFaceToFace = data().deepCopy(fields()[26].schema(), other.technologyPOSConditionCodeFaceToFace);
        fieldSetFlags()[26] = other.fieldSetFlags()[26];
      }
      if (isValidValue(fields()[27], other.technologyEMVtagsServiceCode)) {
        this.technologyEMVtagsServiceCode = data().deepCopy(fields()[27].schema(), other.technologyEMVtagsServiceCode);
        fieldSetFlags()[27] = other.fieldSetFlags()[27];
      }
      if (isValidValue(fields()[28], other.technologyEMVtagsTransactionSequenceCounter)) {
        this.technologyEMVtagsTransactionSequenceCounter = data().deepCopy(fields()[28].schema(), other.technologyEMVtagsTransactionSequenceCounter);
        fieldSetFlags()[28] = other.fieldSetFlags()[28];
      }
      if (isValidValue(fields()[29], other.technologyEMVtagsTerminalType)) {
        this.technologyEMVtagsTerminalType = data().deepCopy(fields()[29].schema(), other.technologyEMVtagsTerminalType);
        fieldSetFlags()[29] = other.fieldSetFlags()[29];
      }
      if (isValidValue(fields()[30], other.technologyEMVtagsTerminalCapabilities)) {
        this.technologyEMVtagsTerminalCapabilities = data().deepCopy(fields()[30].schema(), other.technologyEMVtagsTerminalCapabilities);
        fieldSetFlags()[30] = other.fieldSetFlags()[30];
      }
      if (isValidValue(fields()[31], other.technologyEMVtagsIAC)) {
        this.technologyEMVtagsIAC = data().deepCopy(fields()[31].schema(), other.technologyEMVtagsIAC);
        fieldSetFlags()[31] = other.fieldSetFlags()[31];
      }
      if (isValidValue(fields()[32], other.technologyEMVtagsAC)) {
        this.technologyEMVtagsAC = data().deepCopy(fields()[32].schema(), other.technologyEMVtagsAC);
        fieldSetFlags()[32] = other.fieldSetFlags()[32];
      }
      if (isValidValue(fields()[33], other.technologyEMVtagsCID)) {
        this.technologyEMVtagsCID = data().deepCopy(fields()[33].schema(), other.technologyEMVtagsCID);
        fieldSetFlags()[33] = other.fieldSetFlags()[33];
      }
      if (isValidValue(fields()[34], other.technologyEMVtagsAIP)) {
        this.technologyEMVtagsAIP = data().deepCopy(fields()[34].schema(), other.technologyEMVtagsAIP);
        fieldSetFlags()[34] = other.fieldSetFlags()[34];
      }
      if (isValidValue(fields()[35], other.technologyEMVtagsIAD)) {
        this.technologyEMVtagsIAD = data().deepCopy(fields()[35].schema(), other.technologyEMVtagsIAD);
        fieldSetFlags()[35] = other.fieldSetFlags()[35];
      }
      if (isValidValue(fields()[36], other.technology3DSecureAuthenticationIndicator)) {
        this.technology3DSecureAuthenticationIndicator = data().deepCopy(fields()[36].schema(), other.technology3DSecureAuthenticationIndicator);
        fieldSetFlags()[36] = other.fieldSetFlags()[36];
      }
      if (isValidValue(fields()[37], other.technology3DSecure3DSVersion)) {
        this.technology3DSecure3DSVersion = data().deepCopy(fields()[37].schema(), other.technology3DSecure3DSVersion);
        fieldSetFlags()[37] = other.fieldSetFlags()[37];
      }
      if (isValidValue(fields()[38], other.technology3DSecureIssuerAuthenticationData)) {
        this.technology3DSecureIssuerAuthenticationData = data().deepCopy(fields()[38].schema(), other.technology3DSecureIssuerAuthenticationData);
        fieldSetFlags()[38] = other.fieldSetFlags()[38];
      }
      if (isValidValue(fields()[39], other.technology3DSecureAuthenticationResponse)) {
        this.technology3DSecureAuthenticationResponse = data().deepCopy(fields()[39].schema(), other.technology3DSecureAuthenticationResponse);
        fieldSetFlags()[39] = other.fieldSetFlags()[39];
      }
      if (isValidValue(fields()[40], other.technology3DSecureCAVV)) {
        this.technology3DSecureCAVV = data().deepCopy(fields()[40].schema(), other.technology3DSecureCAVV);
        fieldSetFlags()[40] = other.fieldSetFlags()[40];
      }
      if (isValidValue(fields()[41], other.technology3DSecureDSTransID)) {
        this.technology3DSecureDSTransID = data().deepCopy(fields()[41].schema(), other.technology3DSecureDSTransID);
        fieldSetFlags()[41] = other.fieldSetFlags()[41];
      }
      if (isValidValue(fields()[42], other.technology3DSecureDeviceChannel)) {
        this.technology3DSecureDeviceChannel = data().deepCopy(fields()[42].schema(), other.technology3DSecureDeviceChannel);
        fieldSetFlags()[42] = other.fieldSetFlags()[42];
      }
      if (isValidValue(fields()[43], other.technology3DSecureAMID)) {
        this.technology3DSecureAMID = data().deepCopy(fields()[43].schema(), other.technology3DSecureAMID);
        fieldSetFlags()[43] = other.fieldSetFlags()[43];
      }
      if (isValidValue(fields()[44], other.technology3DSecureAAV)) {
        this.technology3DSecureAAV = data().deepCopy(fields()[44].schema(), other.technology3DSecureAAV);
        fieldSetFlags()[44] = other.fieldSetFlags()[44];
      }
      if (isValidValue(fields()[45], other.technology3DSecureECI)) {
        this.technology3DSecureECI = data().deepCopy(fields()[45].schema(), other.technology3DSecureECI);
        fieldSetFlags()[45] = other.fieldSetFlags()[45];
      }
      if (isValidValue(fields()[46], other.xPayWalletWalletID)) {
        this.xPayWalletWalletID = data().deepCopy(fields()[46].schema(), other.xPayWalletWalletID);
        fieldSetFlags()[46] = other.fieldSetFlags()[46];
      }
      if (isValidValue(fields()[47], other.xPayWalletTokenizedPAN)) {
        this.xPayWalletTokenizedPAN = data().deepCopy(fields()[47].schema(), other.xPayWalletTokenizedPAN);
        fieldSetFlags()[47] = other.fieldSetFlags()[47];
      }
      if (isValidValue(fields()[48], other.xPayWalletDeviceId)) {
        this.xPayWalletDeviceId = data().deepCopy(fields()[48].schema(), other.xPayWalletDeviceId);
        fieldSetFlags()[48] = other.fieldSetFlags()[48];
      }
      if (isValidValue(fields()[49], other.xPayWalletTransactionToken)) {
        this.xPayWalletTransactionToken = data().deepCopy(fields()[49].schema(), other.xPayWalletTransactionToken);
        fieldSetFlags()[49] = other.fieldSetFlags()[49];
      }
      if (isValidValue(fields()[50], other.xPayWalletWalletType)) {
        this.xPayWalletWalletType = data().deepCopy(fields()[50].schema(), other.xPayWalletWalletType);
        fieldSetFlags()[50] = other.fieldSetFlags()[50];
      }
    }

    /**
     * Creates a Builder by copying an existing TransactionRequest instance
     * @param other The existing instance to copy.
     */
    private Builder(effyis.partners.p2s.shared.avro.meta.input.TransactionRequest other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.xPayWalletAuthMethod)) {
        this.xPayWalletAuthMethod = data().deepCopy(fields()[0].schema(), other.xPayWalletAuthMethod);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.transactionRequestDatetime)) {
        this.transactionRequestDatetime = data().deepCopy(fields()[1].schema(), other.transactionRequestDatetime);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.transactionRequestBillingAmount)) {
        this.transactionRequestBillingAmount = data().deepCopy(fields()[2].schema(), other.transactionRequestBillingAmount);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.transactionRequestBillingCurrency)) {
        this.transactionRequestBillingCurrency = data().deepCopy(fields()[3].schema(), other.transactionRequestBillingCurrency);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.transactionRequestStan)) {
        this.transactionRequestStan = data().deepCopy(fields()[4].schema(), other.transactionRequestStan);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.transactionRequestRetrievalReferenceNumber)) {
        this.transactionRequestRetrievalReferenceNumber = data().deepCopy(fields()[5].schema(), other.transactionRequestRetrievalReferenceNumber);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.transactionRequestAmount)) {
        this.transactionRequestAmount = data().deepCopy(fields()[6].schema(), other.transactionRequestAmount);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.transactionRequestCurrency)) {
        this.transactionRequestCurrency = data().deepCopy(fields()[7].schema(), other.transactionRequestCurrency);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.transactionRequestTransmissionDatetime)) {
        this.transactionRequestTransmissionDatetime = data().deepCopy(fields()[8].schema(), other.transactionRequestTransmissionDatetime);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.transactionRequestBillingRate)) {
        this.transactionRequestBillingRate = data().deepCopy(fields()[9].schema(), other.transactionRequestBillingRate);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.transactionRequestScheme)) {
        this.transactionRequestScheme = data().deepCopy(fields()[10].schema(), other.transactionRequestScheme);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.recurringFlag)) {
        this.recurringFlag = data().deepCopy(fields()[11].schema(), other.recurringFlag);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.technologyentryMode)) {
        this.technologyentryMode = data().deepCopy(fields()[12].schema(), other.technologyentryMode);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.technologyentryModemagneticStripe)) {
        this.technologyentryModemagneticStripe = data().deepCopy(fields()[13].schema(), other.technologyentryModemagneticStripe);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.technologyentryModeEMVChip)) {
        this.technologyentryModeEMVChip = data().deepCopy(fields()[14].schema(), other.technologyentryModeEMVChip);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.technologyentryModeContactless)) {
        this.technologyentryModeContactless = data().deepCopy(fields()[15].schema(), other.technologyentryModeContactless);
        fieldSetFlags()[15] = true;
      }
      if (isValidValue(fields()[16], other.technologyentryModemanualEntry)) {
        this.technologyentryModemanualEntry = data().deepCopy(fields()[16].schema(), other.technologyentryModemanualEntry);
        fieldSetFlags()[16] = true;
      }
      if (isValidValue(fields()[17], other.technologyentryModeFallback)) {
        this.technologyentryModeFallback = data().deepCopy(fields()[17].schema(), other.technologyentryModeFallback);
        fieldSetFlags()[17] = true;
      }
      if (isValidValue(fields()[18], other.technologyentryModeNFC)) {
        this.technologyentryModeNFC = data().deepCopy(fields()[18].schema(), other.technologyentryModeNFC);
        fieldSetFlags()[18] = true;
      }
      if (isValidValue(fields()[19], other.technologyPOSConditionCode)) {
        this.technologyPOSConditionCode = data().deepCopy(fields()[19].schema(), other.technologyPOSConditionCode);
        fieldSetFlags()[19] = true;
      }
      if (isValidValue(fields()[20], other.technologyPOSConditionCodeCardPresent)) {
        this.technologyPOSConditionCodeCardPresent = data().deepCopy(fields()[20].schema(), other.technologyPOSConditionCodeCardPresent);
        fieldSetFlags()[20] = true;
      }
      if (isValidValue(fields()[21], other.technologyPOSConditionCodetransactionCondition)) {
        this.technologyPOSConditionCodetransactionCondition = data().deepCopy(fields()[21].schema(), other.technologyPOSConditionCodetransactionCondition);
        fieldSetFlags()[21] = true;
      }
      if (isValidValue(fields()[22], other.technologyPOSConditionCodePinVerification)) {
        this.technologyPOSConditionCodePinVerification = data().deepCopy(fields()[22].schema(), other.technologyPOSConditionCodePinVerification);
        fieldSetFlags()[22] = true;
      }
      if (isValidValue(fields()[23], other.technologyPOSConditionCodeSignatureAuthorization)) {
        this.technologyPOSConditionCodeSignatureAuthorization = data().deepCopy(fields()[23].schema(), other.technologyPOSConditionCodeSignatureAuthorization);
        fieldSetFlags()[23] = true;
      }
      if (isValidValue(fields()[24], other.technologyPOSConditionCodeOnlineAuthorization)) {
        this.technologyPOSConditionCodeOnlineAuthorization = data().deepCopy(fields()[24].schema(), other.technologyPOSConditionCodeOnlineAuthorization);
        fieldSetFlags()[24] = true;
      }
      if (isValidValue(fields()[25], other.technologyPOSConditionCodeOfflineAuthorization)) {
        this.technologyPOSConditionCodeOfflineAuthorization = data().deepCopy(fields()[25].schema(), other.technologyPOSConditionCodeOfflineAuthorization);
        fieldSetFlags()[25] = true;
      }
      if (isValidValue(fields()[26], other.technologyPOSConditionCodeFaceToFace)) {
        this.technologyPOSConditionCodeFaceToFace = data().deepCopy(fields()[26].schema(), other.technologyPOSConditionCodeFaceToFace);
        fieldSetFlags()[26] = true;
      }
      if (isValidValue(fields()[27], other.technologyEMVtagsServiceCode)) {
        this.technologyEMVtagsServiceCode = data().deepCopy(fields()[27].schema(), other.technologyEMVtagsServiceCode);
        fieldSetFlags()[27] = true;
      }
      if (isValidValue(fields()[28], other.technologyEMVtagsTransactionSequenceCounter)) {
        this.technologyEMVtagsTransactionSequenceCounter = data().deepCopy(fields()[28].schema(), other.technologyEMVtagsTransactionSequenceCounter);
        fieldSetFlags()[28] = true;
      }
      if (isValidValue(fields()[29], other.technologyEMVtagsTerminalType)) {
        this.technologyEMVtagsTerminalType = data().deepCopy(fields()[29].schema(), other.technologyEMVtagsTerminalType);
        fieldSetFlags()[29] = true;
      }
      if (isValidValue(fields()[30], other.technologyEMVtagsTerminalCapabilities)) {
        this.technologyEMVtagsTerminalCapabilities = data().deepCopy(fields()[30].schema(), other.technologyEMVtagsTerminalCapabilities);
        fieldSetFlags()[30] = true;
      }
      if (isValidValue(fields()[31], other.technologyEMVtagsIAC)) {
        this.technologyEMVtagsIAC = data().deepCopy(fields()[31].schema(), other.technologyEMVtagsIAC);
        fieldSetFlags()[31] = true;
      }
      if (isValidValue(fields()[32], other.technologyEMVtagsAC)) {
        this.technologyEMVtagsAC = data().deepCopy(fields()[32].schema(), other.technologyEMVtagsAC);
        fieldSetFlags()[32] = true;
      }
      if (isValidValue(fields()[33], other.technologyEMVtagsCID)) {
        this.technologyEMVtagsCID = data().deepCopy(fields()[33].schema(), other.technologyEMVtagsCID);
        fieldSetFlags()[33] = true;
      }
      if (isValidValue(fields()[34], other.technologyEMVtagsAIP)) {
        this.technologyEMVtagsAIP = data().deepCopy(fields()[34].schema(), other.technologyEMVtagsAIP);
        fieldSetFlags()[34] = true;
      }
      if (isValidValue(fields()[35], other.technologyEMVtagsIAD)) {
        this.technologyEMVtagsIAD = data().deepCopy(fields()[35].schema(), other.technologyEMVtagsIAD);
        fieldSetFlags()[35] = true;
      }
      if (isValidValue(fields()[36], other.technology3DSecureAuthenticationIndicator)) {
        this.technology3DSecureAuthenticationIndicator = data().deepCopy(fields()[36].schema(), other.technology3DSecureAuthenticationIndicator);
        fieldSetFlags()[36] = true;
      }
      if (isValidValue(fields()[37], other.technology3DSecure3DSVersion)) {
        this.technology3DSecure3DSVersion = data().deepCopy(fields()[37].schema(), other.technology3DSecure3DSVersion);
        fieldSetFlags()[37] = true;
      }
      if (isValidValue(fields()[38], other.technology3DSecureIssuerAuthenticationData)) {
        this.technology3DSecureIssuerAuthenticationData = data().deepCopy(fields()[38].schema(), other.technology3DSecureIssuerAuthenticationData);
        fieldSetFlags()[38] = true;
      }
      if (isValidValue(fields()[39], other.technology3DSecureAuthenticationResponse)) {
        this.technology3DSecureAuthenticationResponse = data().deepCopy(fields()[39].schema(), other.technology3DSecureAuthenticationResponse);
        fieldSetFlags()[39] = true;
      }
      if (isValidValue(fields()[40], other.technology3DSecureCAVV)) {
        this.technology3DSecureCAVV = data().deepCopy(fields()[40].schema(), other.technology3DSecureCAVV);
        fieldSetFlags()[40] = true;
      }
      if (isValidValue(fields()[41], other.technology3DSecureDSTransID)) {
        this.technology3DSecureDSTransID = data().deepCopy(fields()[41].schema(), other.technology3DSecureDSTransID);
        fieldSetFlags()[41] = true;
      }
      if (isValidValue(fields()[42], other.technology3DSecureDeviceChannel)) {
        this.technology3DSecureDeviceChannel = data().deepCopy(fields()[42].schema(), other.technology3DSecureDeviceChannel);
        fieldSetFlags()[42] = true;
      }
      if (isValidValue(fields()[43], other.technology3DSecureAMID)) {
        this.technology3DSecureAMID = data().deepCopy(fields()[43].schema(), other.technology3DSecureAMID);
        fieldSetFlags()[43] = true;
      }
      if (isValidValue(fields()[44], other.technology3DSecureAAV)) {
        this.technology3DSecureAAV = data().deepCopy(fields()[44].schema(), other.technology3DSecureAAV);
        fieldSetFlags()[44] = true;
      }
      if (isValidValue(fields()[45], other.technology3DSecureECI)) {
        this.technology3DSecureECI = data().deepCopy(fields()[45].schema(), other.technology3DSecureECI);
        fieldSetFlags()[45] = true;
      }
      if (isValidValue(fields()[46], other.xPayWalletWalletID)) {
        this.xPayWalletWalletID = data().deepCopy(fields()[46].schema(), other.xPayWalletWalletID);
        fieldSetFlags()[46] = true;
      }
      if (isValidValue(fields()[47], other.xPayWalletTokenizedPAN)) {
        this.xPayWalletTokenizedPAN = data().deepCopy(fields()[47].schema(), other.xPayWalletTokenizedPAN);
        fieldSetFlags()[47] = true;
      }
      if (isValidValue(fields()[48], other.xPayWalletDeviceId)) {
        this.xPayWalletDeviceId = data().deepCopy(fields()[48].schema(), other.xPayWalletDeviceId);
        fieldSetFlags()[48] = true;
      }
      if (isValidValue(fields()[49], other.xPayWalletTransactionToken)) {
        this.xPayWalletTransactionToken = data().deepCopy(fields()[49].schema(), other.xPayWalletTransactionToken);
        fieldSetFlags()[49] = true;
      }
      if (isValidValue(fields()[50], other.xPayWalletWalletType)) {
        this.xPayWalletWalletType = data().deepCopy(fields()[50].schema(), other.xPayWalletWalletType);
        fieldSetFlags()[50] = true;
      }
    }

    /**
      * Gets the value of the 'xPayWalletAuthMethod' field.
      * Authentication method used in the wallet transaction (e.g., biometric, PIN) (P2S-00073)
      * @return The value.
      */
    public java.lang.CharSequence getXPayWalletAuthMethod() {
      return xPayWalletAuthMethod;
    }


    /**
      * Sets the value of the 'xPayWalletAuthMethod' field.
      * Authentication method used in the wallet transaction (e.g., biometric, PIN) (P2S-00073)
      * @param value The value of 'xPayWalletAuthMethod'.
      * @return This builder.
      */
    public effyis.partners.p2s.shared.avro.meta.input.TransactionRequest.Builder setXPayWalletAuthMethod(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.xPayWalletAuthMethod = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'xPayWalletAuthMethod' field has been set.
      * Authentication method used in the wallet transaction (e.g., biometric, PIN) (P2S-00073)
      * @return True if the 'xPayWalletAuthMethod' field has been set, false otherwise.
      */
    public boolean hasXPayWalletAuthMethod() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'xPayWalletAuthMethod' field.
      * Authentication method used in the wallet transaction (e.g., biometric, PIN) (P2S-00073)
      * @return This builder.
      */
    public effyis.partners.p2s.shared.avro.meta.input.TransactionRequest.Builder clearXPayWalletAuthMethod() {
      xPayWalletAuthMethod = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'transactionRequestDatetime' field.
      * Acceptor local time (P2S-00074)
      * @return The value.
      */
    public java.lang.CharSequence getTransactionRequestDatetime() {
      return transactionRequestDatetime;
    }


    /**
      * Sets the value of the 'transactionRequestDatetime' field.
      * Acceptor local time (P2S-00074)
      * @param value The value of 'transactionRequestDatetime'.
      * @return This builder.
      */
    public effyis.partners.p2s.shared.avro.meta.input.TransactionRequest.Builder setTransactionRequestDatetime(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.transactionRequestDatetime = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'transactionRequestDatetime' field has been set.
      * Acceptor local time (P2S-00074)
      * @return True if the 'transactionRequestDatetime' field has been set, false otherwise.
      */
    public boolean hasTransactionRequestDatetime() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'transactionRequestDatetime' field.
      * Acceptor local time (P2S-00074)
      * @return This builder.
      */
    public effyis.partners.p2s.shared.avro.meta.input.TransactionRequest.Builder clearTransactionRequestDatetime() {
      transactionRequestDatetime = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'transactionRequestBillingAmount' field.
      * Amount billed in issuer currency (P2S-00075)
      * @return The value.
      */
    public java.math.BigDecimal getTransactionRequestBillingAmount() {
      return transactionRequestBillingAmount;
    }


    /**
      * Sets the value of the 'transactionRequestBillingAmount' field.
      * Amount billed in issuer currency (P2S-00075)
      * @param value The value of 'transactionRequestBillingAmount'.
      * @return This builder.
      */
    public effyis.partners.p2s.shared.avro.meta.input.TransactionRequest.Builder setTransactionRequestBillingAmount(java.math.BigDecimal value) {
      validate(fields()[2], value);
      this.transactionRequestBillingAmount = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'transactionRequestBillingAmount' field has been set.
      * Amount billed in issuer currency (P2S-00075)
      * @return True if the 'transactionRequestBillingAmount' field has been set, false otherwise.
      */
    public boolean hasTransactionRequestBillingAmount() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'transactionRequestBillingAmount' field.
      * Amount billed in issuer currency (P2S-00075)
      * @return This builder.
      */
    public effyis.partners.p2s.shared.avro.meta.input.TransactionRequest.Builder clearTransactionRequestBillingAmount() {
      transactionRequestBillingAmount = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'transactionRequestBillingCurrency' field.
      * Billing currency (ISO4217) (P2S-00076)
      * @return The value.
      */
    public java.lang.CharSequence getTransactionRequestBillingCurrency() {
      return transactionRequestBillingCurrency;
    }


    /**
      * Sets the value of the 'transactionRequestBillingCurrency' field.
      * Billing currency (ISO4217) (P2S-00076)
      * @param value The value of 'transactionRequestBillingCurrency'.
      * @return This builder.
      */
    public effyis.partners.p2s.shared.avro.meta.input.TransactionRequest.Builder setTransactionRequestBillingCurrency(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.transactionRequestBillingCurrency = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'transactionRequestBillingCurrency' field has been set.
      * Billing currency (ISO4217) (P2S-00076)
      * @return True if the 'transactionRequestBillingCurrency' field has been set, false otherwise.
      */
    public boolean hasTransactionRequestBillingCurrency() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'transactionRequestBillingCurrency' field.
      * Billing currency (ISO4217) (P2S-00076)
      * @return This builder.
      */
    public effyis.partners.p2s.shared.avro.meta.input.TransactionRequest.Builder clearTransactionRequestBillingCurrency() {
      transactionRequestBillingCurrency = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'transactionRequestStan' field.
      * Systems Trace Audit Number (P2S-00077)
      * @return The value.
      */
    public java.lang.CharSequence getTransactionRequestStan() {
      return transactionRequestStan;
    }


    /**
      * Sets the value of the 'transactionRequestStan' field.
      * Systems Trace Audit Number (P2S-00077)
      * @param value The value of 'transactionRequestStan'.
      * @return This builder.
      */
    public effyis.partners.p2s.shared.avro.meta.input.TransactionRequest.Builder setTransactionRequestStan(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.transactionRequestStan = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'transactionRequestStan' field has been set.
      * Systems Trace Audit Number (P2S-00077)
      * @return True if the 'transactionRequestStan' field has been set, false otherwise.
      */
    public boolean hasTransactionRequestStan() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'transactionRequestStan' field.
      * Systems Trace Audit Number (P2S-00077)
      * @return This builder.
      */
    public effyis.partners.p2s.shared.avro.meta.input.TransactionRequest.Builder clearTransactionRequestStan() {
      transactionRequestStan = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'transactionRequestRetrievalReferenceNumber' field.
      * Retrieval Reference Number (P2S-00078)
      * @return The value.
      */
    public java.lang.CharSequence getTransactionRequestRetrievalReferenceNumber() {
      return transactionRequestRetrievalReferenceNumber;
    }


    /**
      * Sets the value of the 'transactionRequestRetrievalReferenceNumber' field.
      * Retrieval Reference Number (P2S-00078)
      * @param value The value of 'transactionRequestRetrievalReferenceNumber'.
      * @return This builder.
      */
    public effyis.partners.p2s.shared.avro.meta.input.TransactionRequest.Builder setTransactionRequestRetrievalReferenceNumber(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.transactionRequestRetrievalReferenceNumber = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'transactionRequestRetrievalReferenceNumber' field has been set.
      * Retrieval Reference Number (P2S-00078)
      * @return True if the 'transactionRequestRetrievalReferenceNumber' field has been set, false otherwise.
      */
    public boolean hasTransactionRequestRetrievalReferenceNumber() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'transactionRequestRetrievalReferenceNumber' field.
      * Retrieval Reference Number (P2S-00078)
      * @return This builder.
      */
    public effyis.partners.p2s.shared.avro.meta.input.TransactionRequest.Builder clearTransactionRequestRetrievalReferenceNumber() {
      transactionRequestRetrievalReferenceNumber = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'transactionRequestAmount' field.
      * Requested amount in local currency (P2S-00079)
      * @return The value.
      */
    public java.math.BigDecimal getTransactionRequestAmount() {
      return transactionRequestAmount;
    }


    /**
      * Sets the value of the 'transactionRequestAmount' field.
      * Requested amount in local currency (P2S-00079)
      * @param value The value of 'transactionRequestAmount'.
      * @return This builder.
      */
    public effyis.partners.p2s.shared.avro.meta.input.TransactionRequest.Builder setTransactionRequestAmount(java.math.BigDecimal value) {
      validate(fields()[6], value);
      this.transactionRequestAmount = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'transactionRequestAmount' field has been set.
      * Requested amount in local currency (P2S-00079)
      * @return True if the 'transactionRequestAmount' field has been set, false otherwise.
      */
    public boolean hasTransactionRequestAmount() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'transactionRequestAmount' field.
      * Requested amount in local currency (P2S-00079)
      * @return This builder.
      */
    public effyis.partners.p2s.shared.avro.meta.input.TransactionRequest.Builder clearTransactionRequestAmount() {
      transactionRequestAmount = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'transactionRequestCurrency' field.
      * Currency of requested amount (P2S-00080)
      * @return The value.
      */
    public java.lang.CharSequence getTransactionRequestCurrency() {
      return transactionRequestCurrency;
    }


    /**
      * Sets the value of the 'transactionRequestCurrency' field.
      * Currency of requested amount (P2S-00080)
      * @param value The value of 'transactionRequestCurrency'.
      * @return This builder.
      */
    public effyis.partners.p2s.shared.avro.meta.input.TransactionRequest.Builder setTransactionRequestCurrency(java.lang.CharSequence value) {
      validate(fields()[7], value);
      this.transactionRequestCurrency = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'transactionRequestCurrency' field has been set.
      * Currency of requested amount (P2S-00080)
      * @return True if the 'transactionRequestCurrency' field has been set, false otherwise.
      */
    public boolean hasTransactionRequestCurrency() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'transactionRequestCurrency' field.
      * Currency of requested amount (P2S-00080)
      * @return This builder.
      */
    public effyis.partners.p2s.shared.avro.meta.input.TransactionRequest.Builder clearTransactionRequestCurrency() {
      transactionRequestCurrency = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'transactionRequestTransmissionDatetime' field.
      * UTC transmission datetime (P2S-00081)
      * @return The value.
      */
    public java.lang.CharSequence getTransactionRequestTransmissionDatetime() {
      return transactionRequestTransmissionDatetime;
    }


    /**
      * Sets the value of the 'transactionRequestTransmissionDatetime' field.
      * UTC transmission datetime (P2S-00081)
      * @param value The value of 'transactionRequestTransmissionDatetime'.
      * @return This builder.
      */
    public effyis.partners.p2s.shared.avro.meta.input.TransactionRequest.Builder setTransactionRequestTransmissionDatetime(java.lang.CharSequence value) {
      validate(fields()[8], value);
      this.transactionRequestTransmissionDatetime = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'transactionRequestTransmissionDatetime' field has been set.
      * UTC transmission datetime (P2S-00081)
      * @return True if the 'transactionRequestTransmissionDatetime' field has been set, false otherwise.
      */
    public boolean hasTransactionRequestTransmissionDatetime() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'transactionRequestTransmissionDatetime' field.
      * UTC transmission datetime (P2S-00081)
      * @return This builder.
      */
    public effyis.partners.p2s.shared.avro.meta.input.TransactionRequest.Builder clearTransactionRequestTransmissionDatetime() {
      transactionRequestTransmissionDatetime = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'transactionRequestBillingRate' field.
      * Conversion rate (P2S-00082)
      * @return The value.
      */
    public java.lang.CharSequence getTransactionRequestBillingRate() {
      return transactionRequestBillingRate;
    }


    /**
      * Sets the value of the 'transactionRequestBillingRate' field.
      * Conversion rate (P2S-00082)
      * @param value The value of 'transactionRequestBillingRate'.
      * @return This builder.
      */
    public effyis.partners.p2s.shared.avro.meta.input.TransactionRequest.Builder setTransactionRequestBillingRate(java.lang.CharSequence value) {
      validate(fields()[9], value);
      this.transactionRequestBillingRate = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'transactionRequestBillingRate' field has been set.
      * Conversion rate (P2S-00082)
      * @return True if the 'transactionRequestBillingRate' field has been set, false otherwise.
      */
    public boolean hasTransactionRequestBillingRate() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'transactionRequestBillingRate' field.
      * Conversion rate (P2S-00082)
      * @return This builder.
      */
    public effyis.partners.p2s.shared.avro.meta.input.TransactionRequest.Builder clearTransactionRequestBillingRate() {
      transactionRequestBillingRate = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'transactionRequestScheme' field.
      * Scheme processed the transaction (P2S-00083)
      * @return The value.
      */
    public java.lang.CharSequence getTransactionRequestScheme() {
      return transactionRequestScheme;
    }


    /**
      * Sets the value of the 'transactionRequestScheme' field.
      * Scheme processed the transaction (P2S-00083)
      * @param value The value of 'transactionRequestScheme'.
      * @return This builder.
      */
    public effyis.partners.p2s.shared.avro.meta.input.TransactionRequest.Builder setTransactionRequestScheme(java.lang.CharSequence value) {
      validate(fields()[10], value);
      this.transactionRequestScheme = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'transactionRequestScheme' field has been set.
      * Scheme processed the transaction (P2S-00083)
      * @return True if the 'transactionRequestScheme' field has been set, false otherwise.
      */
    public boolean hasTransactionRequestScheme() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'transactionRequestScheme' field.
      * Scheme processed the transaction (P2S-00083)
      * @return This builder.
      */
    public effyis.partners.p2s.shared.avro.meta.input.TransactionRequest.Builder clearTransactionRequestScheme() {
      transactionRequestScheme = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'recurringFlag' field.
      * Recurring payment flag (P2S-00084)
      * @return The value.
      */
    public java.lang.Boolean getRecurringFlag() {
      return recurringFlag;
    }


    /**
      * Sets the value of the 'recurringFlag' field.
      * Recurring payment flag (P2S-00084)
      * @param value The value of 'recurringFlag'.
      * @return This builder.
      */
    public effyis.partners.p2s.shared.avro.meta.input.TransactionRequest.Builder setRecurringFlag(java.lang.Boolean value) {
      validate(fields()[11], value);
      this.recurringFlag = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'recurringFlag' field has been set.
      * Recurring payment flag (P2S-00084)
      * @return True if the 'recurringFlag' field has been set, false otherwise.
      */
    public boolean hasRecurringFlag() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'recurringFlag' field.
      * Recurring payment flag (P2S-00084)
      * @return This builder.
      */
    public effyis.partners.p2s.shared.avro.meta.input.TransactionRequest.Builder clearRecurringFlag() {
      recurringFlag = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'technologyentryMode' field.
      * Technology entry mode (P2S-00085)
      * @return The value.
      */
    public java.lang.CharSequence getTechnologyentryMode() {
      return technologyentryMode;
    }


    /**
      * Sets the value of the 'technologyentryMode' field.
      * Technology entry mode (P2S-00085)
      * @param value The value of 'technologyentryMode'.
      * @return This builder.
      */
    public effyis.partners.p2s.shared.avro.meta.input.TransactionRequest.Builder setTechnologyentryMode(java.lang.CharSequence value) {
      validate(fields()[12], value);
      this.technologyentryMode = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'technologyentryMode' field has been set.
      * Technology entry mode (P2S-00085)
      * @return True if the 'technologyentryMode' field has been set, false otherwise.
      */
    public boolean hasTechnologyentryMode() {
      return fieldSetFlags()[12];
    }


    /**
      * Clears the value of the 'technologyentryMode' field.
      * Technology entry mode (P2S-00085)
      * @return This builder.
      */
    public effyis.partners.p2s.shared.avro.meta.input.TransactionRequest.Builder clearTechnologyentryMode() {
      technologyentryMode = null;
      fieldSetFlags()[12] = false;
      return this;
    }

    /**
      * Gets the value of the 'technologyentryModemagneticStripe' field.
      * Indicates if the card was swiped (magnetic stripe entry) (P2S-00086)
      * @return The value.
      */
    public boolean getTechnologyentryModemagneticStripe() {
      return technologyentryModemagneticStripe;
    }


    /**
      * Sets the value of the 'technologyentryModemagneticStripe' field.
      * Indicates if the card was swiped (magnetic stripe entry) (P2S-00086)
      * @param value The value of 'technologyentryModemagneticStripe'.
      * @return This builder.
      */
    public effyis.partners.p2s.shared.avro.meta.input.TransactionRequest.Builder setTechnologyentryModemagneticStripe(boolean value) {
      validate(fields()[13], value);
      this.technologyentryModemagneticStripe = value;
      fieldSetFlags()[13] = true;
      return this;
    }

    /**
      * Checks whether the 'technologyentryModemagneticStripe' field has been set.
      * Indicates if the card was swiped (magnetic stripe entry) (P2S-00086)
      * @return True if the 'technologyentryModemagneticStripe' field has been set, false otherwise.
      */
    public boolean hasTechnologyentryModemagneticStripe() {
      return fieldSetFlags()[13];
    }


    /**
      * Clears the value of the 'technologyentryModemagneticStripe' field.
      * Indicates if the card was swiped (magnetic stripe entry) (P2S-00086)
      * @return This builder.
      */
    public effyis.partners.p2s.shared.avro.meta.input.TransactionRequest.Builder clearTechnologyentryModemagneticStripe() {
      fieldSetFlags()[13] = false;
      return this;
    }

    /**
      * Gets the value of the 'technologyentryModeEMVChip' field.
      * Indicates if the card was inserted for EMV chip-based processing (P2S-00087)
      * @return The value.
      */
    public boolean getTechnologyentryModeEMVChip() {
      return technologyentryModeEMVChip;
    }


    /**
      * Sets the value of the 'technologyentryModeEMVChip' field.
      * Indicates if the card was inserted for EMV chip-based processing (P2S-00087)
      * @param value The value of 'technologyentryModeEMVChip'.
      * @return This builder.
      */
    public effyis.partners.p2s.shared.avro.meta.input.TransactionRequest.Builder setTechnologyentryModeEMVChip(boolean value) {
      validate(fields()[14], value);
      this.technologyentryModeEMVChip = value;
      fieldSetFlags()[14] = true;
      return this;
    }

    /**
      * Checks whether the 'technologyentryModeEMVChip' field has been set.
      * Indicates if the card was inserted for EMV chip-based processing (P2S-00087)
      * @return True if the 'technologyentryModeEMVChip' field has been set, false otherwise.
      */
    public boolean hasTechnologyentryModeEMVChip() {
      return fieldSetFlags()[14];
    }


    /**
      * Clears the value of the 'technologyentryModeEMVChip' field.
      * Indicates if the card was inserted for EMV chip-based processing (P2S-00087)
      * @return This builder.
      */
    public effyis.partners.p2s.shared.avro.meta.input.TransactionRequest.Builder clearTechnologyentryModeEMVChip() {
      fieldSetFlags()[14] = false;
      return this;
    }

    /**
      * Gets the value of the 'technologyentryModeContactless' field.
      * Indicates if the card was used for a contactless transaction (NFC) (P2S-00088)
      * @return The value.
      */
    public boolean getTechnologyentryModeContactless() {
      return technologyentryModeContactless;
    }


    /**
      * Sets the value of the 'technologyentryModeContactless' field.
      * Indicates if the card was used for a contactless transaction (NFC) (P2S-00088)
      * @param value The value of 'technologyentryModeContactless'.
      * @return This builder.
      */
    public effyis.partners.p2s.shared.avro.meta.input.TransactionRequest.Builder setTechnologyentryModeContactless(boolean value) {
      validate(fields()[15], value);
      this.technologyentryModeContactless = value;
      fieldSetFlags()[15] = true;
      return this;
    }

    /**
      * Checks whether the 'technologyentryModeContactless' field has been set.
      * Indicates if the card was used for a contactless transaction (NFC) (P2S-00088)
      * @return True if the 'technologyentryModeContactless' field has been set, false otherwise.
      */
    public boolean hasTechnologyentryModeContactless() {
      return fieldSetFlags()[15];
    }


    /**
      * Clears the value of the 'technologyentryModeContactless' field.
      * Indicates if the card was used for a contactless transaction (NFC) (P2S-00088)
      * @return This builder.
      */
    public effyis.partners.p2s.shared.avro.meta.input.TransactionRequest.Builder clearTechnologyentryModeContactless() {
      fieldSetFlags()[15] = false;
      return this;
    }

    /**
      * Gets the value of the 'technologyentryModemanualEntry' field.
      * Indicates if the card details were manually entered (P2S-00089)
      * @return The value.
      */
    public boolean getTechnologyentryModemanualEntry() {
      return technologyentryModemanualEntry;
    }


    /**
      * Sets the value of the 'technologyentryModemanualEntry' field.
      * Indicates if the card details were manually entered (P2S-00089)
      * @param value The value of 'technologyentryModemanualEntry'.
      * @return This builder.
      */
    public effyis.partners.p2s.shared.avro.meta.input.TransactionRequest.Builder setTechnologyentryModemanualEntry(boolean value) {
      validate(fields()[16], value);
      this.technologyentryModemanualEntry = value;
      fieldSetFlags()[16] = true;
      return this;
    }

    /**
      * Checks whether the 'technologyentryModemanualEntry' field has been set.
      * Indicates if the card details were manually entered (P2S-00089)
      * @return True if the 'technologyentryModemanualEntry' field has been set, false otherwise.
      */
    public boolean hasTechnologyentryModemanualEntry() {
      return fieldSetFlags()[16];
    }


    /**
      * Clears the value of the 'technologyentryModemanualEntry' field.
      * Indicates if the card details were manually entered (P2S-00089)
      * @return This builder.
      */
    public effyis.partners.p2s.shared.avro.meta.input.TransactionRequest.Builder clearTechnologyentryModemanualEntry() {
      fieldSetFlags()[16] = false;
      return this;
    }

    /**
      * Gets the value of the 'technologyentryModeFallback' field.
      * Indicates if fallback processing was used (in case of EMV failure) (P2S-00090)
      * @return The value.
      */
    public boolean getTechnologyentryModeFallback() {
      return technologyentryModeFallback;
    }


    /**
      * Sets the value of the 'technologyentryModeFallback' field.
      * Indicates if fallback processing was used (in case of EMV failure) (P2S-00090)
      * @param value The value of 'technologyentryModeFallback'.
      * @return This builder.
      */
    public effyis.partners.p2s.shared.avro.meta.input.TransactionRequest.Builder setTechnologyentryModeFallback(boolean value) {
      validate(fields()[17], value);
      this.technologyentryModeFallback = value;
      fieldSetFlags()[17] = true;
      return this;
    }

    /**
      * Checks whether the 'technologyentryModeFallback' field has been set.
      * Indicates if fallback processing was used (in case of EMV failure) (P2S-00090)
      * @return True if the 'technologyentryModeFallback' field has been set, false otherwise.
      */
    public boolean hasTechnologyentryModeFallback() {
      return fieldSetFlags()[17];
    }


    /**
      * Clears the value of the 'technologyentryModeFallback' field.
      * Indicates if fallback processing was used (in case of EMV failure) (P2S-00090)
      * @return This builder.
      */
    public effyis.partners.p2s.shared.avro.meta.input.TransactionRequest.Builder clearTechnologyentryModeFallback() {
      fieldSetFlags()[17] = false;
      return this;
    }

    /**
      * Gets the value of the 'technologyentryModeNFC' field.
      * Indicates if NFC was used for the transaction (P2S-00091)
      * @return The value.
      */
    public boolean getTechnologyentryModeNFC() {
      return technologyentryModeNFC;
    }


    /**
      * Sets the value of the 'technologyentryModeNFC' field.
      * Indicates if NFC was used for the transaction (P2S-00091)
      * @param value The value of 'technologyentryModeNFC'.
      * @return This builder.
      */
    public effyis.partners.p2s.shared.avro.meta.input.TransactionRequest.Builder setTechnologyentryModeNFC(boolean value) {
      validate(fields()[18], value);
      this.technologyentryModeNFC = value;
      fieldSetFlags()[18] = true;
      return this;
    }

    /**
      * Checks whether the 'technologyentryModeNFC' field has been set.
      * Indicates if NFC was used for the transaction (P2S-00091)
      * @return True if the 'technologyentryModeNFC' field has been set, false otherwise.
      */
    public boolean hasTechnologyentryModeNFC() {
      return fieldSetFlags()[18];
    }


    /**
      * Clears the value of the 'technologyentryModeNFC' field.
      * Indicates if NFC was used for the transaction (P2S-00091)
      * @return This builder.
      */
    public effyis.partners.p2s.shared.avro.meta.input.TransactionRequest.Builder clearTechnologyentryModeNFC() {
      fieldSetFlags()[18] = false;
      return this;
    }

    /**
      * Gets the value of the 'technologyPOSConditionCode' field.
      * POS condition code (P2S-00092)
      * @return The value.
      */
    public java.lang.CharSequence getTechnologyPOSConditionCode() {
      return technologyPOSConditionCode;
    }


    /**
      * Sets the value of the 'technologyPOSConditionCode' field.
      * POS condition code (P2S-00092)
      * @param value The value of 'technologyPOSConditionCode'.
      * @return This builder.
      */
    public effyis.partners.p2s.shared.avro.meta.input.TransactionRequest.Builder setTechnologyPOSConditionCode(java.lang.CharSequence value) {
      validate(fields()[19], value);
      this.technologyPOSConditionCode = value;
      fieldSetFlags()[19] = true;
      return this;
    }

    /**
      * Checks whether the 'technologyPOSConditionCode' field has been set.
      * POS condition code (P2S-00092)
      * @return True if the 'technologyPOSConditionCode' field has been set, false otherwise.
      */
    public boolean hasTechnologyPOSConditionCode() {
      return fieldSetFlags()[19];
    }


    /**
      * Clears the value of the 'technologyPOSConditionCode' field.
      * POS condition code (P2S-00092)
      * @return This builder.
      */
    public effyis.partners.p2s.shared.avro.meta.input.TransactionRequest.Builder clearTechnologyPOSConditionCode() {
      technologyPOSConditionCode = null;
      fieldSetFlags()[19] = false;
      return this;
    }

    /**
      * Gets the value of the 'technologyPOSConditionCodeCardPresent' field.
      * Indicates whether the card was physically present during the transaction (P2S-00093)
      * @return The value.
      */
    public boolean getTechnologyPOSConditionCodeCardPresent() {
      return technologyPOSConditionCodeCardPresent;
    }


    /**
      * Sets the value of the 'technologyPOSConditionCodeCardPresent' field.
      * Indicates whether the card was physically present during the transaction (P2S-00093)
      * @param value The value of 'technologyPOSConditionCodeCardPresent'.
      * @return This builder.
      */
    public effyis.partners.p2s.shared.avro.meta.input.TransactionRequest.Builder setTechnologyPOSConditionCodeCardPresent(boolean value) {
      validate(fields()[20], value);
      this.technologyPOSConditionCodeCardPresent = value;
      fieldSetFlags()[20] = true;
      return this;
    }

    /**
      * Checks whether the 'technologyPOSConditionCodeCardPresent' field has been set.
      * Indicates whether the card was physically present during the transaction (P2S-00093)
      * @return True if the 'technologyPOSConditionCodeCardPresent' field has been set, false otherwise.
      */
    public boolean hasTechnologyPOSConditionCodeCardPresent() {
      return fieldSetFlags()[20];
    }


    /**
      * Clears the value of the 'technologyPOSConditionCodeCardPresent' field.
      * Indicates whether the card was physically present during the transaction (P2S-00093)
      * @return This builder.
      */
    public effyis.partners.p2s.shared.avro.meta.input.TransactionRequest.Builder clearTechnologyPOSConditionCodeCardPresent() {
      fieldSetFlags()[20] = false;
      return this;
    }

    /**
      * Gets the value of the 'technologyPOSConditionCodetransactionCondition' field.
      * Condition of the transaction (e.g., standard, refund) (P2S-00094)
      * @return The value.
      */
    public java.lang.CharSequence getTechnologyPOSConditionCodetransactionCondition() {
      return technologyPOSConditionCodetransactionCondition;
    }


    /**
      * Sets the value of the 'technologyPOSConditionCodetransactionCondition' field.
      * Condition of the transaction (e.g., standard, refund) (P2S-00094)
      * @param value The value of 'technologyPOSConditionCodetransactionCondition'.
      * @return This builder.
      */
    public effyis.partners.p2s.shared.avro.meta.input.TransactionRequest.Builder setTechnologyPOSConditionCodetransactionCondition(java.lang.CharSequence value) {
      validate(fields()[21], value);
      this.technologyPOSConditionCodetransactionCondition = value;
      fieldSetFlags()[21] = true;
      return this;
    }

    /**
      * Checks whether the 'technologyPOSConditionCodetransactionCondition' field has been set.
      * Condition of the transaction (e.g., standard, refund) (P2S-00094)
      * @return True if the 'technologyPOSConditionCodetransactionCondition' field has been set, false otherwise.
      */
    public boolean hasTechnologyPOSConditionCodetransactionCondition() {
      return fieldSetFlags()[21];
    }


    /**
      * Clears the value of the 'technologyPOSConditionCodetransactionCondition' field.
      * Condition of the transaction (e.g., standard, refund) (P2S-00094)
      * @return This builder.
      */
    public effyis.partners.p2s.shared.avro.meta.input.TransactionRequest.Builder clearTechnologyPOSConditionCodetransactionCondition() {
      technologyPOSConditionCodetransactionCondition = null;
      fieldSetFlags()[21] = false;
      return this;
    }

    /**
      * Gets the value of the 'technologyPOSConditionCodePinVerification' field.
      * Indicates if PIN verification was performed (P2S-00095)
      * @return The value.
      */
    public boolean getTechnologyPOSConditionCodePinVerification() {
      return technologyPOSConditionCodePinVerification;
    }


    /**
      * Sets the value of the 'technologyPOSConditionCodePinVerification' field.
      * Indicates if PIN verification was performed (P2S-00095)
      * @param value The value of 'technologyPOSConditionCodePinVerification'.
      * @return This builder.
      */
    public effyis.partners.p2s.shared.avro.meta.input.TransactionRequest.Builder setTechnologyPOSConditionCodePinVerification(boolean value) {
      validate(fields()[22], value);
      this.technologyPOSConditionCodePinVerification = value;
      fieldSetFlags()[22] = true;
      return this;
    }

    /**
      * Checks whether the 'technologyPOSConditionCodePinVerification' field has been set.
      * Indicates if PIN verification was performed (P2S-00095)
      * @return True if the 'technologyPOSConditionCodePinVerification' field has been set, false otherwise.
      */
    public boolean hasTechnologyPOSConditionCodePinVerification() {
      return fieldSetFlags()[22];
    }


    /**
      * Clears the value of the 'technologyPOSConditionCodePinVerification' field.
      * Indicates if PIN verification was performed (P2S-00095)
      * @return This builder.
      */
    public effyis.partners.p2s.shared.avro.meta.input.TransactionRequest.Builder clearTechnologyPOSConditionCodePinVerification() {
      fieldSetFlags()[22] = false;
      return this;
    }

    /**
      * Gets the value of the 'technologyPOSConditionCodeSignatureAuthorization' field.
      * Indicates if signature authorization was used (P2S-00096)
      * @return The value.
      */
    public java.lang.Boolean getTechnologyPOSConditionCodeSignatureAuthorization() {
      return technologyPOSConditionCodeSignatureAuthorization;
    }


    /**
      * Sets the value of the 'technologyPOSConditionCodeSignatureAuthorization' field.
      * Indicates if signature authorization was used (P2S-00096)
      * @param value The value of 'technologyPOSConditionCodeSignatureAuthorization'.
      * @return This builder.
      */
    public effyis.partners.p2s.shared.avro.meta.input.TransactionRequest.Builder setTechnologyPOSConditionCodeSignatureAuthorization(java.lang.Boolean value) {
      validate(fields()[23], value);
      this.technologyPOSConditionCodeSignatureAuthorization = value;
      fieldSetFlags()[23] = true;
      return this;
    }

    /**
      * Checks whether the 'technologyPOSConditionCodeSignatureAuthorization' field has been set.
      * Indicates if signature authorization was used (P2S-00096)
      * @return True if the 'technologyPOSConditionCodeSignatureAuthorization' field has been set, false otherwise.
      */
    public boolean hasTechnologyPOSConditionCodeSignatureAuthorization() {
      return fieldSetFlags()[23];
    }


    /**
      * Clears the value of the 'technologyPOSConditionCodeSignatureAuthorization' field.
      * Indicates if signature authorization was used (P2S-00096)
      * @return This builder.
      */
    public effyis.partners.p2s.shared.avro.meta.input.TransactionRequest.Builder clearTechnologyPOSConditionCodeSignatureAuthorization() {
      technologyPOSConditionCodeSignatureAuthorization = null;
      fieldSetFlags()[23] = false;
      return this;
    }

    /**
      * Gets the value of the 'technologyPOSConditionCodeOnlineAuthorization' field.
      * Indicates whether online authorization was performed (P2S-00097)
      * @return The value.
      */
    public boolean getTechnologyPOSConditionCodeOnlineAuthorization() {
      return technologyPOSConditionCodeOnlineAuthorization;
    }


    /**
      * Sets the value of the 'technologyPOSConditionCodeOnlineAuthorization' field.
      * Indicates whether online authorization was performed (P2S-00097)
      * @param value The value of 'technologyPOSConditionCodeOnlineAuthorization'.
      * @return This builder.
      */
    public effyis.partners.p2s.shared.avro.meta.input.TransactionRequest.Builder setTechnologyPOSConditionCodeOnlineAuthorization(boolean value) {
      validate(fields()[24], value);
      this.technologyPOSConditionCodeOnlineAuthorization = value;
      fieldSetFlags()[24] = true;
      return this;
    }

    /**
      * Checks whether the 'technologyPOSConditionCodeOnlineAuthorization' field has been set.
      * Indicates whether online authorization was performed (P2S-00097)
      * @return True if the 'technologyPOSConditionCodeOnlineAuthorization' field has been set, false otherwise.
      */
    public boolean hasTechnologyPOSConditionCodeOnlineAuthorization() {
      return fieldSetFlags()[24];
    }


    /**
      * Clears the value of the 'technologyPOSConditionCodeOnlineAuthorization' field.
      * Indicates whether online authorization was performed (P2S-00097)
      * @return This builder.
      */
    public effyis.partners.p2s.shared.avro.meta.input.TransactionRequest.Builder clearTechnologyPOSConditionCodeOnlineAuthorization() {
      fieldSetFlags()[24] = false;
      return this;
    }

    /**
      * Gets the value of the 'technologyPOSConditionCodeOfflineAuthorization' field.
      * Indicates whether offline authorization was used (P2S-00098)
      * @return The value.
      */
    public java.lang.Boolean getTechnologyPOSConditionCodeOfflineAuthorization() {
      return technologyPOSConditionCodeOfflineAuthorization;
    }


    /**
      * Sets the value of the 'technologyPOSConditionCodeOfflineAuthorization' field.
      * Indicates whether offline authorization was used (P2S-00098)
      * @param value The value of 'technologyPOSConditionCodeOfflineAuthorization'.
      * @return This builder.
      */
    public effyis.partners.p2s.shared.avro.meta.input.TransactionRequest.Builder setTechnologyPOSConditionCodeOfflineAuthorization(java.lang.Boolean value) {
      validate(fields()[25], value);
      this.technologyPOSConditionCodeOfflineAuthorization = value;
      fieldSetFlags()[25] = true;
      return this;
    }

    /**
      * Checks whether the 'technologyPOSConditionCodeOfflineAuthorization' field has been set.
      * Indicates whether offline authorization was used (P2S-00098)
      * @return True if the 'technologyPOSConditionCodeOfflineAuthorization' field has been set, false otherwise.
      */
    public boolean hasTechnologyPOSConditionCodeOfflineAuthorization() {
      return fieldSetFlags()[25];
    }


    /**
      * Clears the value of the 'technologyPOSConditionCodeOfflineAuthorization' field.
      * Indicates whether offline authorization was used (P2S-00098)
      * @return This builder.
      */
    public effyis.partners.p2s.shared.avro.meta.input.TransactionRequest.Builder clearTechnologyPOSConditionCodeOfflineAuthorization() {
      technologyPOSConditionCodeOfflineAuthorization = null;
      fieldSetFlags()[25] = false;
      return this;
    }

    /**
      * Gets the value of the 'technologyPOSConditionCodeFaceToFace' field.
      * Indicates whether the transaction is face-to-face or remote (P2S-00099)
      * @return The value.
      */
    public java.lang.Boolean getTechnologyPOSConditionCodeFaceToFace() {
      return technologyPOSConditionCodeFaceToFace;
    }


    /**
      * Sets the value of the 'technologyPOSConditionCodeFaceToFace' field.
      * Indicates whether the transaction is face-to-face or remote (P2S-00099)
      * @param value The value of 'technologyPOSConditionCodeFaceToFace'.
      * @return This builder.
      */
    public effyis.partners.p2s.shared.avro.meta.input.TransactionRequest.Builder setTechnologyPOSConditionCodeFaceToFace(java.lang.Boolean value) {
      validate(fields()[26], value);
      this.technologyPOSConditionCodeFaceToFace = value;
      fieldSetFlags()[26] = true;
      return this;
    }

    /**
      * Checks whether the 'technologyPOSConditionCodeFaceToFace' field has been set.
      * Indicates whether the transaction is face-to-face or remote (P2S-00099)
      * @return True if the 'technologyPOSConditionCodeFaceToFace' field has been set, false otherwise.
      */
    public boolean hasTechnologyPOSConditionCodeFaceToFace() {
      return fieldSetFlags()[26];
    }


    /**
      * Clears the value of the 'technologyPOSConditionCodeFaceToFace' field.
      * Indicates whether the transaction is face-to-face or remote (P2S-00099)
      * @return This builder.
      */
    public effyis.partners.p2s.shared.avro.meta.input.TransactionRequest.Builder clearTechnologyPOSConditionCodeFaceToFace() {
      technologyPOSConditionCodeFaceToFace = null;
      fieldSetFlags()[26] = false;
      return this;
    }

    /**
      * Gets the value of the 'technologyEMVtagsServiceCode' field.
      * Specifies the card service type (e.g., debit, credit) (P2S-00101)
      * @return The value.
      */
    public java.lang.CharSequence getTechnologyEMVtagsServiceCode() {
      return technologyEMVtagsServiceCode;
    }


    /**
      * Sets the value of the 'technologyEMVtagsServiceCode' field.
      * Specifies the card service type (e.g., debit, credit) (P2S-00101)
      * @param value The value of 'technologyEMVtagsServiceCode'.
      * @return This builder.
      */
    public effyis.partners.p2s.shared.avro.meta.input.TransactionRequest.Builder setTechnologyEMVtagsServiceCode(java.lang.CharSequence value) {
      validate(fields()[27], value);
      this.technologyEMVtagsServiceCode = value;
      fieldSetFlags()[27] = true;
      return this;
    }

    /**
      * Checks whether the 'technologyEMVtagsServiceCode' field has been set.
      * Specifies the card service type (e.g., debit, credit) (P2S-00101)
      * @return True if the 'technologyEMVtagsServiceCode' field has been set, false otherwise.
      */
    public boolean hasTechnologyEMVtagsServiceCode() {
      return fieldSetFlags()[27];
    }


    /**
      * Clears the value of the 'technologyEMVtagsServiceCode' field.
      * Specifies the card service type (e.g., debit, credit) (P2S-00101)
      * @return This builder.
      */
    public effyis.partners.p2s.shared.avro.meta.input.TransactionRequest.Builder clearTechnologyEMVtagsServiceCode() {
      technologyEMVtagsServiceCode = null;
      fieldSetFlags()[27] = false;
      return this;
    }

    /**
      * Gets the value of the 'technologyEMVtagsTransactionSequenceCounter' field.
      * A unique sequence number for the transaction (P2S-00102)
      * @return The value.
      */
    public java.lang.CharSequence getTechnologyEMVtagsTransactionSequenceCounter() {
      return technologyEMVtagsTransactionSequenceCounter;
    }


    /**
      * Sets the value of the 'technologyEMVtagsTransactionSequenceCounter' field.
      * A unique sequence number for the transaction (P2S-00102)
      * @param value The value of 'technologyEMVtagsTransactionSequenceCounter'.
      * @return This builder.
      */
    public effyis.partners.p2s.shared.avro.meta.input.TransactionRequest.Builder setTechnologyEMVtagsTransactionSequenceCounter(java.lang.CharSequence value) {
      validate(fields()[28], value);
      this.technologyEMVtagsTransactionSequenceCounter = value;
      fieldSetFlags()[28] = true;
      return this;
    }

    /**
      * Checks whether the 'technologyEMVtagsTransactionSequenceCounter' field has been set.
      * A unique sequence number for the transaction (P2S-00102)
      * @return True if the 'technologyEMVtagsTransactionSequenceCounter' field has been set, false otherwise.
      */
    public boolean hasTechnologyEMVtagsTransactionSequenceCounter() {
      return fieldSetFlags()[28];
    }


    /**
      * Clears the value of the 'technologyEMVtagsTransactionSequenceCounter' field.
      * A unique sequence number for the transaction (P2S-00102)
      * @return This builder.
      */
    public effyis.partners.p2s.shared.avro.meta.input.TransactionRequest.Builder clearTechnologyEMVtagsTransactionSequenceCounter() {
      technologyEMVtagsTransactionSequenceCounter = null;
      fieldSetFlags()[28] = false;
      return this;
    }

    /**
      * Gets the value of the 'technologyEMVtagsTerminalType' field.
      * Type of terminal used to process the transaction (e.g., POS, ATM) (P2S-00103)
      * @return The value.
      */
    public java.lang.CharSequence getTechnologyEMVtagsTerminalType() {
      return technologyEMVtagsTerminalType;
    }


    /**
      * Sets the value of the 'technologyEMVtagsTerminalType' field.
      * Type of terminal used to process the transaction (e.g., POS, ATM) (P2S-00103)
      * @param value The value of 'technologyEMVtagsTerminalType'.
      * @return This builder.
      */
    public effyis.partners.p2s.shared.avro.meta.input.TransactionRequest.Builder setTechnologyEMVtagsTerminalType(java.lang.CharSequence value) {
      validate(fields()[29], value);
      this.technologyEMVtagsTerminalType = value;
      fieldSetFlags()[29] = true;
      return this;
    }

    /**
      * Checks whether the 'technologyEMVtagsTerminalType' field has been set.
      * Type of terminal used to process the transaction (e.g., POS, ATM) (P2S-00103)
      * @return True if the 'technologyEMVtagsTerminalType' field has been set, false otherwise.
      */
    public boolean hasTechnologyEMVtagsTerminalType() {
      return fieldSetFlags()[29];
    }


    /**
      * Clears the value of the 'technologyEMVtagsTerminalType' field.
      * Type of terminal used to process the transaction (e.g., POS, ATM) (P2S-00103)
      * @return This builder.
      */
    public effyis.partners.p2s.shared.avro.meta.input.TransactionRequest.Builder clearTechnologyEMVtagsTerminalType() {
      technologyEMVtagsTerminalType = null;
      fieldSetFlags()[29] = false;
      return this;
    }

    /**
      * Gets the value of the 'technologyEMVtagsTerminalCapabilities' field.
      * Defines terminal capabilities (e.g., EMV, NFC) (P2S-00104)
      * @return The value.
      */
    public java.lang.CharSequence getTechnologyEMVtagsTerminalCapabilities() {
      return technologyEMVtagsTerminalCapabilities;
    }


    /**
      * Sets the value of the 'technologyEMVtagsTerminalCapabilities' field.
      * Defines terminal capabilities (e.g., EMV, NFC) (P2S-00104)
      * @param value The value of 'technologyEMVtagsTerminalCapabilities'.
      * @return This builder.
      */
    public effyis.partners.p2s.shared.avro.meta.input.TransactionRequest.Builder setTechnologyEMVtagsTerminalCapabilities(java.lang.CharSequence value) {
      validate(fields()[30], value);
      this.technologyEMVtagsTerminalCapabilities = value;
      fieldSetFlags()[30] = true;
      return this;
    }

    /**
      * Checks whether the 'technologyEMVtagsTerminalCapabilities' field has been set.
      * Defines terminal capabilities (e.g., EMV, NFC) (P2S-00104)
      * @return True if the 'technologyEMVtagsTerminalCapabilities' field has been set, false otherwise.
      */
    public boolean hasTechnologyEMVtagsTerminalCapabilities() {
      return fieldSetFlags()[30];
    }


    /**
      * Clears the value of the 'technologyEMVtagsTerminalCapabilities' field.
      * Defines terminal capabilities (e.g., EMV, NFC) (P2S-00104)
      * @return This builder.
      */
    public effyis.partners.p2s.shared.avro.meta.input.TransactionRequest.Builder clearTechnologyEMVtagsTerminalCapabilities() {
      technologyEMVtagsTerminalCapabilities = null;
      fieldSetFlags()[30] = false;
      return this;
    }

    /**
      * Gets the value of the 'technologyEMVtagsIAC' field.
      * Issuer Action Code (indicates transaction outcome) (P2S-00105)
      * @return The value.
      */
    public java.lang.CharSequence getTechnologyEMVtagsIAC() {
      return technologyEMVtagsIAC;
    }


    /**
      * Sets the value of the 'technologyEMVtagsIAC' field.
      * Issuer Action Code (indicates transaction outcome) (P2S-00105)
      * @param value The value of 'technologyEMVtagsIAC'.
      * @return This builder.
      */
    public effyis.partners.p2s.shared.avro.meta.input.TransactionRequest.Builder setTechnologyEMVtagsIAC(java.lang.CharSequence value) {
      validate(fields()[31], value);
      this.technologyEMVtagsIAC = value;
      fieldSetFlags()[31] = true;
      return this;
    }

    /**
      * Checks whether the 'technologyEMVtagsIAC' field has been set.
      * Issuer Action Code (indicates transaction outcome) (P2S-00105)
      * @return True if the 'technologyEMVtagsIAC' field has been set, false otherwise.
      */
    public boolean hasTechnologyEMVtagsIAC() {
      return fieldSetFlags()[31];
    }


    /**
      * Clears the value of the 'technologyEMVtagsIAC' field.
      * Issuer Action Code (indicates transaction outcome) (P2S-00105)
      * @return This builder.
      */
    public effyis.partners.p2s.shared.avro.meta.input.TransactionRequest.Builder clearTechnologyEMVtagsIAC() {
      technologyEMVtagsIAC = null;
      fieldSetFlags()[31] = false;
      return this;
    }

    /**
      * Gets the value of the 'technologyEMVtagsAC' field.
      * Cryptogram used in authorization (ARQC/TC/AAC) (P2S-00106)
      * @return The value.
      */
    public java.lang.CharSequence getTechnologyEMVtagsAC() {
      return technologyEMVtagsAC;
    }


    /**
      * Sets the value of the 'technologyEMVtagsAC' field.
      * Cryptogram used in authorization (ARQC/TC/AAC) (P2S-00106)
      * @param value The value of 'technologyEMVtagsAC'.
      * @return This builder.
      */
    public effyis.partners.p2s.shared.avro.meta.input.TransactionRequest.Builder setTechnologyEMVtagsAC(java.lang.CharSequence value) {
      validate(fields()[32], value);
      this.technologyEMVtagsAC = value;
      fieldSetFlags()[32] = true;
      return this;
    }

    /**
      * Checks whether the 'technologyEMVtagsAC' field has been set.
      * Cryptogram used in authorization (ARQC/TC/AAC) (P2S-00106)
      * @return True if the 'technologyEMVtagsAC' field has been set, false otherwise.
      */
    public boolean hasTechnologyEMVtagsAC() {
      return fieldSetFlags()[32];
    }


    /**
      * Clears the value of the 'technologyEMVtagsAC' field.
      * Cryptogram used in authorization (ARQC/TC/AAC) (P2S-00106)
      * @return This builder.
      */
    public effyis.partners.p2s.shared.avro.meta.input.TransactionRequest.Builder clearTechnologyEMVtagsAC() {
      technologyEMVtagsAC = null;
      fieldSetFlags()[32] = false;
      return this;
    }

    /**
      * Gets the value of the 'technologyEMVtagsCID' field.
      * Cryptogram Identifier, indicates the type of cryptogram (P2S-00107)
      * @return The value.
      */
    public java.lang.CharSequence getTechnologyEMVtagsCID() {
      return technologyEMVtagsCID;
    }


    /**
      * Sets the value of the 'technologyEMVtagsCID' field.
      * Cryptogram Identifier, indicates the type of cryptogram (P2S-00107)
      * @param value The value of 'technologyEMVtagsCID'.
      * @return This builder.
      */
    public effyis.partners.p2s.shared.avro.meta.input.TransactionRequest.Builder setTechnologyEMVtagsCID(java.lang.CharSequence value) {
      validate(fields()[33], value);
      this.technologyEMVtagsCID = value;
      fieldSetFlags()[33] = true;
      return this;
    }

    /**
      * Checks whether the 'technologyEMVtagsCID' field has been set.
      * Cryptogram Identifier, indicates the type of cryptogram (P2S-00107)
      * @return True if the 'technologyEMVtagsCID' field has been set, false otherwise.
      */
    public boolean hasTechnologyEMVtagsCID() {
      return fieldSetFlags()[33];
    }


    /**
      * Clears the value of the 'technologyEMVtagsCID' field.
      * Cryptogram Identifier, indicates the type of cryptogram (P2S-00107)
      * @return This builder.
      */
    public effyis.partners.p2s.shared.avro.meta.input.TransactionRequest.Builder clearTechnologyEMVtagsCID() {
      technologyEMVtagsCID = null;
      fieldSetFlags()[33] = false;
      return this;
    }

    /**
      * Gets the value of the 'technologyEMVtagsAIP' field.
      * Application Interchange Profile, defines card capabilities (P2S-00108)
      * @return The value.
      */
    public java.lang.CharSequence getTechnologyEMVtagsAIP() {
      return technologyEMVtagsAIP;
    }


    /**
      * Sets the value of the 'technologyEMVtagsAIP' field.
      * Application Interchange Profile, defines card capabilities (P2S-00108)
      * @param value The value of 'technologyEMVtagsAIP'.
      * @return This builder.
      */
    public effyis.partners.p2s.shared.avro.meta.input.TransactionRequest.Builder setTechnologyEMVtagsAIP(java.lang.CharSequence value) {
      validate(fields()[34], value);
      this.technologyEMVtagsAIP = value;
      fieldSetFlags()[34] = true;
      return this;
    }

    /**
      * Checks whether the 'technologyEMVtagsAIP' field has been set.
      * Application Interchange Profile, defines card capabilities (P2S-00108)
      * @return True if the 'technologyEMVtagsAIP' field has been set, false otherwise.
      */
    public boolean hasTechnologyEMVtagsAIP() {
      return fieldSetFlags()[34];
    }


    /**
      * Clears the value of the 'technologyEMVtagsAIP' field.
      * Application Interchange Profile, defines card capabilities (P2S-00108)
      * @return This builder.
      */
    public effyis.partners.p2s.shared.avro.meta.input.TransactionRequest.Builder clearTechnologyEMVtagsAIP() {
      technologyEMVtagsAIP = null;
      fieldSetFlags()[34] = false;
      return this;
    }

    /**
      * Gets the value of the 'technologyEMVtagsIAD' field.
      * Issuer Application Data, used for issuer-specific risk management (P2S-00109)
      * @return The value.
      */
    public java.lang.CharSequence getTechnologyEMVtagsIAD() {
      return technologyEMVtagsIAD;
    }


    /**
      * Sets the value of the 'technologyEMVtagsIAD' field.
      * Issuer Application Data, used for issuer-specific risk management (P2S-00109)
      * @param value The value of 'technologyEMVtagsIAD'.
      * @return This builder.
      */
    public effyis.partners.p2s.shared.avro.meta.input.TransactionRequest.Builder setTechnologyEMVtagsIAD(java.lang.CharSequence value) {
      validate(fields()[35], value);
      this.technologyEMVtagsIAD = value;
      fieldSetFlags()[35] = true;
      return this;
    }

    /**
      * Checks whether the 'technologyEMVtagsIAD' field has been set.
      * Issuer Application Data, used for issuer-specific risk management (P2S-00109)
      * @return True if the 'technologyEMVtagsIAD' field has been set, false otherwise.
      */
    public boolean hasTechnologyEMVtagsIAD() {
      return fieldSetFlags()[35];
    }


    /**
      * Clears the value of the 'technologyEMVtagsIAD' field.
      * Issuer Application Data, used for issuer-specific risk management (P2S-00109)
      * @return This builder.
      */
    public effyis.partners.p2s.shared.avro.meta.input.TransactionRequest.Builder clearTechnologyEMVtagsIAD() {
      technologyEMVtagsIAD = null;
      fieldSetFlags()[35] = false;
      return this;
    }

    /**
      * Gets the value of the 'technology3DSecureAuthenticationIndicator' field.
      * Indicates the result of 3D Secure authentication (e.g., successful, failed) (P2S-00110)
      * @return The value.
      */
    public java.lang.CharSequence getTechnology3DSecureAuthenticationIndicator() {
      return technology3DSecureAuthenticationIndicator;
    }


    /**
      * Sets the value of the 'technology3DSecureAuthenticationIndicator' field.
      * Indicates the result of 3D Secure authentication (e.g., successful, failed) (P2S-00110)
      * @param value The value of 'technology3DSecureAuthenticationIndicator'.
      * @return This builder.
      */
    public effyis.partners.p2s.shared.avro.meta.input.TransactionRequest.Builder setTechnology3DSecureAuthenticationIndicator(java.lang.CharSequence value) {
      validate(fields()[36], value);
      this.technology3DSecureAuthenticationIndicator = value;
      fieldSetFlags()[36] = true;
      return this;
    }

    /**
      * Checks whether the 'technology3DSecureAuthenticationIndicator' field has been set.
      * Indicates the result of 3D Secure authentication (e.g., successful, failed) (P2S-00110)
      * @return True if the 'technology3DSecureAuthenticationIndicator' field has been set, false otherwise.
      */
    public boolean hasTechnology3DSecureAuthenticationIndicator() {
      return fieldSetFlags()[36];
    }


    /**
      * Clears the value of the 'technology3DSecureAuthenticationIndicator' field.
      * Indicates the result of 3D Secure authentication (e.g., successful, failed) (P2S-00110)
      * @return This builder.
      */
    public effyis.partners.p2s.shared.avro.meta.input.TransactionRequest.Builder clearTechnology3DSecureAuthenticationIndicator() {
      technology3DSecureAuthenticationIndicator = null;
      fieldSetFlags()[36] = false;
      return this;
    }

    /**
      * Gets the value of the 'technology3DSecure3DSVersion' field.
      * Specifies the version of 3D Secure used (P2S-00111)
      * @return The value.
      */
    public java.lang.CharSequence getTechnology3DSecure3DSVersion() {
      return technology3DSecure3DSVersion;
    }


    /**
      * Sets the value of the 'technology3DSecure3DSVersion' field.
      * Specifies the version of 3D Secure used (P2S-00111)
      * @param value The value of 'technology3DSecure3DSVersion'.
      * @return This builder.
      */
    public effyis.partners.p2s.shared.avro.meta.input.TransactionRequest.Builder setTechnology3DSecure3DSVersion(java.lang.CharSequence value) {
      validate(fields()[37], value);
      this.technology3DSecure3DSVersion = value;
      fieldSetFlags()[37] = true;
      return this;
    }

    /**
      * Checks whether the 'technology3DSecure3DSVersion' field has been set.
      * Specifies the version of 3D Secure used (P2S-00111)
      * @return True if the 'technology3DSecure3DSVersion' field has been set, false otherwise.
      */
    public boolean hasTechnology3DSecure3DSVersion() {
      return fieldSetFlags()[37];
    }


    /**
      * Clears the value of the 'technology3DSecure3DSVersion' field.
      * Specifies the version of 3D Secure used (P2S-00111)
      * @return This builder.
      */
    public effyis.partners.p2s.shared.avro.meta.input.TransactionRequest.Builder clearTechnology3DSecure3DSVersion() {
      technology3DSecure3DSVersion = null;
      fieldSetFlags()[37] = false;
      return this;
    }

    /**
      * Gets the value of the 'technology3DSecureIssuerAuthenticationData' field.
      * Data used by the issuer for authentication (P2S-00112)
      * @return The value.
      */
    public java.lang.CharSequence getTechnology3DSecureIssuerAuthenticationData() {
      return technology3DSecureIssuerAuthenticationData;
    }


    /**
      * Sets the value of the 'technology3DSecureIssuerAuthenticationData' field.
      * Data used by the issuer for authentication (P2S-00112)
      * @param value The value of 'technology3DSecureIssuerAuthenticationData'.
      * @return This builder.
      */
    public effyis.partners.p2s.shared.avro.meta.input.TransactionRequest.Builder setTechnology3DSecureIssuerAuthenticationData(java.lang.CharSequence value) {
      validate(fields()[38], value);
      this.technology3DSecureIssuerAuthenticationData = value;
      fieldSetFlags()[38] = true;
      return this;
    }

    /**
      * Checks whether the 'technology3DSecureIssuerAuthenticationData' field has been set.
      * Data used by the issuer for authentication (P2S-00112)
      * @return True if the 'technology3DSecureIssuerAuthenticationData' field has been set, false otherwise.
      */
    public boolean hasTechnology3DSecureIssuerAuthenticationData() {
      return fieldSetFlags()[38];
    }


    /**
      * Clears the value of the 'technology3DSecureIssuerAuthenticationData' field.
      * Data used by the issuer for authentication (P2S-00112)
      * @return This builder.
      */
    public effyis.partners.p2s.shared.avro.meta.input.TransactionRequest.Builder clearTechnology3DSecureIssuerAuthenticationData() {
      technology3DSecureIssuerAuthenticationData = null;
      fieldSetFlags()[38] = false;
      return this;
    }

    /**
      * Gets the value of the 'technology3DSecureAuthenticationResponse' field.
      * Response from the issuer regarding authentication outcome (P2S-00113)
      * @return The value.
      */
    public java.lang.CharSequence getTechnology3DSecureAuthenticationResponse() {
      return technology3DSecureAuthenticationResponse;
    }


    /**
      * Sets the value of the 'technology3DSecureAuthenticationResponse' field.
      * Response from the issuer regarding authentication outcome (P2S-00113)
      * @param value The value of 'technology3DSecureAuthenticationResponse'.
      * @return This builder.
      */
    public effyis.partners.p2s.shared.avro.meta.input.TransactionRequest.Builder setTechnology3DSecureAuthenticationResponse(java.lang.CharSequence value) {
      validate(fields()[39], value);
      this.technology3DSecureAuthenticationResponse = value;
      fieldSetFlags()[39] = true;
      return this;
    }

    /**
      * Checks whether the 'technology3DSecureAuthenticationResponse' field has been set.
      * Response from the issuer regarding authentication outcome (P2S-00113)
      * @return True if the 'technology3DSecureAuthenticationResponse' field has been set, false otherwise.
      */
    public boolean hasTechnology3DSecureAuthenticationResponse() {
      return fieldSetFlags()[39];
    }


    /**
      * Clears the value of the 'technology3DSecureAuthenticationResponse' field.
      * Response from the issuer regarding authentication outcome (P2S-00113)
      * @return This builder.
      */
    public effyis.partners.p2s.shared.avro.meta.input.TransactionRequest.Builder clearTechnology3DSecureAuthenticationResponse() {
      technology3DSecureAuthenticationResponse = null;
      fieldSetFlags()[39] = false;
      return this;
    }

    /**
      * Gets the value of the 'technology3DSecureCAVV' field.
      * Cardholder Authentication Verification Value (used in 3D Secure) (P2S-00114)
      * @return The value.
      */
    public java.lang.CharSequence getTechnology3DSecureCAVV() {
      return technology3DSecureCAVV;
    }


    /**
      * Sets the value of the 'technology3DSecureCAVV' field.
      * Cardholder Authentication Verification Value (used in 3D Secure) (P2S-00114)
      * @param value The value of 'technology3DSecureCAVV'.
      * @return This builder.
      */
    public effyis.partners.p2s.shared.avro.meta.input.TransactionRequest.Builder setTechnology3DSecureCAVV(java.lang.CharSequence value) {
      validate(fields()[40], value);
      this.technology3DSecureCAVV = value;
      fieldSetFlags()[40] = true;
      return this;
    }

    /**
      * Checks whether the 'technology3DSecureCAVV' field has been set.
      * Cardholder Authentication Verification Value (used in 3D Secure) (P2S-00114)
      * @return True if the 'technology3DSecureCAVV' field has been set, false otherwise.
      */
    public boolean hasTechnology3DSecureCAVV() {
      return fieldSetFlags()[40];
    }


    /**
      * Clears the value of the 'technology3DSecureCAVV' field.
      * Cardholder Authentication Verification Value (used in 3D Secure) (P2S-00114)
      * @return This builder.
      */
    public effyis.partners.p2s.shared.avro.meta.input.TransactionRequest.Builder clearTechnology3DSecureCAVV() {
      technology3DSecureCAVV = null;
      fieldSetFlags()[40] = false;
      return this;
    }

    /**
      * Gets the value of the 'technology3DSecureDSTransID' field.
      * 3D Secure 2 transaction identifier (P2S-00115)
      * @return The value.
      */
    public java.lang.CharSequence getTechnology3DSecureDSTransID() {
      return technology3DSecureDSTransID;
    }


    /**
      * Sets the value of the 'technology3DSecureDSTransID' field.
      * 3D Secure 2 transaction identifier (P2S-00115)
      * @param value The value of 'technology3DSecureDSTransID'.
      * @return This builder.
      */
    public effyis.partners.p2s.shared.avro.meta.input.TransactionRequest.Builder setTechnology3DSecureDSTransID(java.lang.CharSequence value) {
      validate(fields()[41], value);
      this.technology3DSecureDSTransID = value;
      fieldSetFlags()[41] = true;
      return this;
    }

    /**
      * Checks whether the 'technology3DSecureDSTransID' field has been set.
      * 3D Secure 2 transaction identifier (P2S-00115)
      * @return True if the 'technology3DSecureDSTransID' field has been set, false otherwise.
      */
    public boolean hasTechnology3DSecureDSTransID() {
      return fieldSetFlags()[41];
    }


    /**
      * Clears the value of the 'technology3DSecureDSTransID' field.
      * 3D Secure 2 transaction identifier (P2S-00115)
      * @return This builder.
      */
    public effyis.partners.p2s.shared.avro.meta.input.TransactionRequest.Builder clearTechnology3DSecureDSTransID() {
      technology3DSecureDSTransID = null;
      fieldSetFlags()[41] = false;
      return this;
    }

    /**
      * Gets the value of the 'technology3DSecureDeviceChannel' field.
      * Indicates whether the transaction was made using a mobile device or desktop (P2S-00116)
      * @return The value.
      */
    public java.lang.CharSequence getTechnology3DSecureDeviceChannel() {
      return technology3DSecureDeviceChannel;
    }


    /**
      * Sets the value of the 'technology3DSecureDeviceChannel' field.
      * Indicates whether the transaction was made using a mobile device or desktop (P2S-00116)
      * @param value The value of 'technology3DSecureDeviceChannel'.
      * @return This builder.
      */
    public effyis.partners.p2s.shared.avro.meta.input.TransactionRequest.Builder setTechnology3DSecureDeviceChannel(java.lang.CharSequence value) {
      validate(fields()[42], value);
      this.technology3DSecureDeviceChannel = value;
      fieldSetFlags()[42] = true;
      return this;
    }

    /**
      * Checks whether the 'technology3DSecureDeviceChannel' field has been set.
      * Indicates whether the transaction was made using a mobile device or desktop (P2S-00116)
      * @return True if the 'technology3DSecureDeviceChannel' field has been set, false otherwise.
      */
    public boolean hasTechnology3DSecureDeviceChannel() {
      return fieldSetFlags()[42];
    }


    /**
      * Clears the value of the 'technology3DSecureDeviceChannel' field.
      * Indicates whether the transaction was made using a mobile device or desktop (P2S-00116)
      * @return This builder.
      */
    public effyis.partners.p2s.shared.avro.meta.input.TransactionRequest.Builder clearTechnology3DSecureDeviceChannel() {
      technology3DSecureDeviceChannel = null;
      fieldSetFlags()[42] = false;
      return this;
    }

    /**
      * Gets the value of the 'technology3DSecureAMID' field.
      * Authentication Method Indicator used in 3D Secure (e.g., biometric, PIN) (P2S-00117)
      * @return The value.
      */
    public java.lang.CharSequence getTechnology3DSecureAMID() {
      return technology3DSecureAMID;
    }


    /**
      * Sets the value of the 'technology3DSecureAMID' field.
      * Authentication Method Indicator used in 3D Secure (e.g., biometric, PIN) (P2S-00117)
      * @param value The value of 'technology3DSecureAMID'.
      * @return This builder.
      */
    public effyis.partners.p2s.shared.avro.meta.input.TransactionRequest.Builder setTechnology3DSecureAMID(java.lang.CharSequence value) {
      validate(fields()[43], value);
      this.technology3DSecureAMID = value;
      fieldSetFlags()[43] = true;
      return this;
    }

    /**
      * Checks whether the 'technology3DSecureAMID' field has been set.
      * Authentication Method Indicator used in 3D Secure (e.g., biometric, PIN) (P2S-00117)
      * @return True if the 'technology3DSecureAMID' field has been set, false otherwise.
      */
    public boolean hasTechnology3DSecureAMID() {
      return fieldSetFlags()[43];
    }


    /**
      * Clears the value of the 'technology3DSecureAMID' field.
      * Authentication Method Indicator used in 3D Secure (e.g., biometric, PIN) (P2S-00117)
      * @return This builder.
      */
    public effyis.partners.p2s.shared.avro.meta.input.TransactionRequest.Builder clearTechnology3DSecureAMID() {
      technology3DSecureAMID = null;
      fieldSetFlags()[43] = false;
      return this;
    }

    /**
      * Gets the value of the 'technology3DSecureAAV' field.
      * Mastercard's equivalent of CAVV used in 3D Secure for cardholder authentication (P2S-00118)
      * @return The value.
      */
    public java.lang.CharSequence getTechnology3DSecureAAV() {
      return technology3DSecureAAV;
    }


    /**
      * Sets the value of the 'technology3DSecureAAV' field.
      * Mastercard's equivalent of CAVV used in 3D Secure for cardholder authentication (P2S-00118)
      * @param value The value of 'technology3DSecureAAV'.
      * @return This builder.
      */
    public effyis.partners.p2s.shared.avro.meta.input.TransactionRequest.Builder setTechnology3DSecureAAV(java.lang.CharSequence value) {
      validate(fields()[44], value);
      this.technology3DSecureAAV = value;
      fieldSetFlags()[44] = true;
      return this;
    }

    /**
      * Checks whether the 'technology3DSecureAAV' field has been set.
      * Mastercard's equivalent of CAVV used in 3D Secure for cardholder authentication (P2S-00118)
      * @return True if the 'technology3DSecureAAV' field has been set, false otherwise.
      */
    public boolean hasTechnology3DSecureAAV() {
      return fieldSetFlags()[44];
    }


    /**
      * Clears the value of the 'technology3DSecureAAV' field.
      * Mastercard's equivalent of CAVV used in 3D Secure for cardholder authentication (P2S-00118)
      * @return This builder.
      */
    public effyis.partners.p2s.shared.avro.meta.input.TransactionRequest.Builder clearTechnology3DSecureAAV() {
      technology3DSecureAAV = null;
      fieldSetFlags()[44] = false;
      return this;
    }

    /**
      * Gets the value of the 'technology3DSecureECI' field.
      * Electronic Commerce Indicator used in 3D Secure transactions (P2S-00119)
      * @return The value.
      */
    public java.lang.CharSequence getTechnology3DSecureECI() {
      return technology3DSecureECI;
    }


    /**
      * Sets the value of the 'technology3DSecureECI' field.
      * Electronic Commerce Indicator used in 3D Secure transactions (P2S-00119)
      * @param value The value of 'technology3DSecureECI'.
      * @return This builder.
      */
    public effyis.partners.p2s.shared.avro.meta.input.TransactionRequest.Builder setTechnology3DSecureECI(java.lang.CharSequence value) {
      validate(fields()[45], value);
      this.technology3DSecureECI = value;
      fieldSetFlags()[45] = true;
      return this;
    }

    /**
      * Checks whether the 'technology3DSecureECI' field has been set.
      * Electronic Commerce Indicator used in 3D Secure transactions (P2S-00119)
      * @return True if the 'technology3DSecureECI' field has been set, false otherwise.
      */
    public boolean hasTechnology3DSecureECI() {
      return fieldSetFlags()[45];
    }


    /**
      * Clears the value of the 'technology3DSecureECI' field.
      * Electronic Commerce Indicator used in 3D Secure transactions (P2S-00119)
      * @return This builder.
      */
    public effyis.partners.p2s.shared.avro.meta.input.TransactionRequest.Builder clearTechnology3DSecureECI() {
      technology3DSecureECI = null;
      fieldSetFlags()[45] = false;
      return this;
    }

    /**
      * Gets the value of the 'xPayWalletWalletID' field.
      * Unique identifier for the wallet user in the xPay system (P2S-00120)
      * @return The value.
      */
    public java.lang.CharSequence getXPayWalletWalletID() {
      return xPayWalletWalletID;
    }


    /**
      * Sets the value of the 'xPayWalletWalletID' field.
      * Unique identifier for the wallet user in the xPay system (P2S-00120)
      * @param value The value of 'xPayWalletWalletID'.
      * @return This builder.
      */
    public effyis.partners.p2s.shared.avro.meta.input.TransactionRequest.Builder setXPayWalletWalletID(java.lang.CharSequence value) {
      validate(fields()[46], value);
      this.xPayWalletWalletID = value;
      fieldSetFlags()[46] = true;
      return this;
    }

    /**
      * Checks whether the 'xPayWalletWalletID' field has been set.
      * Unique identifier for the wallet user in the xPay system (P2S-00120)
      * @return True if the 'xPayWalletWalletID' field has been set, false otherwise.
      */
    public boolean hasXPayWalletWalletID() {
      return fieldSetFlags()[46];
    }


    /**
      * Clears the value of the 'xPayWalletWalletID' field.
      * Unique identifier for the wallet user in the xPay system (P2S-00120)
      * @return This builder.
      */
    public effyis.partners.p2s.shared.avro.meta.input.TransactionRequest.Builder clearXPayWalletWalletID() {
      xPayWalletWalletID = null;
      fieldSetFlags()[46] = false;
      return this;
    }

    /**
      * Gets the value of the 'xPayWalletTokenizedPAN' field.
      * Token representing the actual PAN (Primary Account Number) for the transaction (P2S-00121)
      * @return The value.
      */
    public java.lang.CharSequence getXPayWalletTokenizedPAN() {
      return xPayWalletTokenizedPAN;
    }


    /**
      * Sets the value of the 'xPayWalletTokenizedPAN' field.
      * Token representing the actual PAN (Primary Account Number) for the transaction (P2S-00121)
      * @param value The value of 'xPayWalletTokenizedPAN'.
      * @return This builder.
      */
    public effyis.partners.p2s.shared.avro.meta.input.TransactionRequest.Builder setXPayWalletTokenizedPAN(java.lang.CharSequence value) {
      validate(fields()[47], value);
      this.xPayWalletTokenizedPAN = value;
      fieldSetFlags()[47] = true;
      return this;
    }

    /**
      * Checks whether the 'xPayWalletTokenizedPAN' field has been set.
      * Token representing the actual PAN (Primary Account Number) for the transaction (P2S-00121)
      * @return True if the 'xPayWalletTokenizedPAN' field has been set, false otherwise.
      */
    public boolean hasXPayWalletTokenizedPAN() {
      return fieldSetFlags()[47];
    }


    /**
      * Clears the value of the 'xPayWalletTokenizedPAN' field.
      * Token representing the actual PAN (Primary Account Number) for the transaction (P2S-00121)
      * @return This builder.
      */
    public effyis.partners.p2s.shared.avro.meta.input.TransactionRequest.Builder clearXPayWalletTokenizedPAN() {
      xPayWalletTokenizedPAN = null;
      fieldSetFlags()[47] = false;
      return this;
    }

    /**
      * Gets the value of the 'xPayWalletDeviceId' field.
      * Identifier for the mobile device used for the transaction (P2S-00122)
      * @return The value.
      */
    public java.lang.CharSequence getXPayWalletDeviceId() {
      return xPayWalletDeviceId;
    }


    /**
      * Sets the value of the 'xPayWalletDeviceId' field.
      * Identifier for the mobile device used for the transaction (P2S-00122)
      * @param value The value of 'xPayWalletDeviceId'.
      * @return This builder.
      */
    public effyis.partners.p2s.shared.avro.meta.input.TransactionRequest.Builder setXPayWalletDeviceId(java.lang.CharSequence value) {
      validate(fields()[48], value);
      this.xPayWalletDeviceId = value;
      fieldSetFlags()[48] = true;
      return this;
    }

    /**
      * Checks whether the 'xPayWalletDeviceId' field has been set.
      * Identifier for the mobile device used for the transaction (P2S-00122)
      * @return True if the 'xPayWalletDeviceId' field has been set, false otherwise.
      */
    public boolean hasXPayWalletDeviceId() {
      return fieldSetFlags()[48];
    }


    /**
      * Clears the value of the 'xPayWalletDeviceId' field.
      * Identifier for the mobile device used for the transaction (P2S-00122)
      * @return This builder.
      */
    public effyis.partners.p2s.shared.avro.meta.input.TransactionRequest.Builder clearXPayWalletDeviceId() {
      xPayWalletDeviceId = null;
      fieldSetFlags()[48] = false;
      return this;
    }

    /**
      * Gets the value of the 'xPayWalletTransactionToken' field.
      * One-time token used for this specific transaction (P2S-00123)
      * @return The value.
      */
    public java.lang.CharSequence getXPayWalletTransactionToken() {
      return xPayWalletTransactionToken;
    }


    /**
      * Sets the value of the 'xPayWalletTransactionToken' field.
      * One-time token used for this specific transaction (P2S-00123)
      * @param value The value of 'xPayWalletTransactionToken'.
      * @return This builder.
      */
    public effyis.partners.p2s.shared.avro.meta.input.TransactionRequest.Builder setXPayWalletTransactionToken(java.lang.CharSequence value) {
      validate(fields()[49], value);
      this.xPayWalletTransactionToken = value;
      fieldSetFlags()[49] = true;
      return this;
    }

    /**
      * Checks whether the 'xPayWalletTransactionToken' field has been set.
      * One-time token used for this specific transaction (P2S-00123)
      * @return True if the 'xPayWalletTransactionToken' field has been set, false otherwise.
      */
    public boolean hasXPayWalletTransactionToken() {
      return fieldSetFlags()[49];
    }


    /**
      * Clears the value of the 'xPayWalletTransactionToken' field.
      * One-time token used for this specific transaction (P2S-00123)
      * @return This builder.
      */
    public effyis.partners.p2s.shared.avro.meta.input.TransactionRequest.Builder clearXPayWalletTransactionToken() {
      xPayWalletTransactionToken = null;
      fieldSetFlags()[49] = false;
      return this;
    }

    /**
      * Gets the value of the 'xPayWalletWalletType' field.
      * Identifies the wallet provider (e.g., Apple Pay, Google Pay) (P2S-00124)
      * @return The value.
      */
    public java.lang.CharSequence getXPayWalletWalletType() {
      return xPayWalletWalletType;
    }


    /**
      * Sets the value of the 'xPayWalletWalletType' field.
      * Identifies the wallet provider (e.g., Apple Pay, Google Pay) (P2S-00124)
      * @param value The value of 'xPayWalletWalletType'.
      * @return This builder.
      */
    public effyis.partners.p2s.shared.avro.meta.input.TransactionRequest.Builder setXPayWalletWalletType(java.lang.CharSequence value) {
      validate(fields()[50], value);
      this.xPayWalletWalletType = value;
      fieldSetFlags()[50] = true;
      return this;
    }

    /**
      * Checks whether the 'xPayWalletWalletType' field has been set.
      * Identifies the wallet provider (e.g., Apple Pay, Google Pay) (P2S-00124)
      * @return True if the 'xPayWalletWalletType' field has been set, false otherwise.
      */
    public boolean hasXPayWalletWalletType() {
      return fieldSetFlags()[50];
    }


    /**
      * Clears the value of the 'xPayWalletWalletType' field.
      * Identifies the wallet provider (e.g., Apple Pay, Google Pay) (P2S-00124)
      * @return This builder.
      */
    public effyis.partners.p2s.shared.avro.meta.input.TransactionRequest.Builder clearXPayWalletWalletType() {
      xPayWalletWalletType = null;
      fieldSetFlags()[50] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public TransactionRequest build() {
      try {
        TransactionRequest record = new TransactionRequest();
        record.xPayWalletAuthMethod = fieldSetFlags()[0] ? this.xPayWalletAuthMethod : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.transactionRequestDatetime = fieldSetFlags()[1] ? this.transactionRequestDatetime : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.transactionRequestBillingAmount = fieldSetFlags()[2] ? this.transactionRequestBillingAmount : (java.math.BigDecimal) defaultValue(fields()[2]);
        record.transactionRequestBillingCurrency = fieldSetFlags()[3] ? this.transactionRequestBillingCurrency : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.transactionRequestStan = fieldSetFlags()[4] ? this.transactionRequestStan : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.transactionRequestRetrievalReferenceNumber = fieldSetFlags()[5] ? this.transactionRequestRetrievalReferenceNumber : (java.lang.CharSequence) defaultValue(fields()[5]);
        record.transactionRequestAmount = fieldSetFlags()[6] ? this.transactionRequestAmount : (java.math.BigDecimal) defaultValue(fields()[6]);
        record.transactionRequestCurrency = fieldSetFlags()[7] ? this.transactionRequestCurrency : (java.lang.CharSequence) defaultValue(fields()[7]);
        record.transactionRequestTransmissionDatetime = fieldSetFlags()[8] ? this.transactionRequestTransmissionDatetime : (java.lang.CharSequence) defaultValue(fields()[8]);
        record.transactionRequestBillingRate = fieldSetFlags()[9] ? this.transactionRequestBillingRate : (java.lang.CharSequence) defaultValue(fields()[9]);
        record.transactionRequestScheme = fieldSetFlags()[10] ? this.transactionRequestScheme : (java.lang.CharSequence) defaultValue(fields()[10]);
        record.recurringFlag = fieldSetFlags()[11] ? this.recurringFlag : (java.lang.Boolean) defaultValue(fields()[11]);
        record.technologyentryMode = fieldSetFlags()[12] ? this.technologyentryMode : (java.lang.CharSequence) defaultValue(fields()[12]);
        record.technologyentryModemagneticStripe = fieldSetFlags()[13] ? this.technologyentryModemagneticStripe : (java.lang.Boolean) defaultValue(fields()[13]);
        record.technologyentryModeEMVChip = fieldSetFlags()[14] ? this.technologyentryModeEMVChip : (java.lang.Boolean) defaultValue(fields()[14]);
        record.technologyentryModeContactless = fieldSetFlags()[15] ? this.technologyentryModeContactless : (java.lang.Boolean) defaultValue(fields()[15]);
        record.technologyentryModemanualEntry = fieldSetFlags()[16] ? this.technologyentryModemanualEntry : (java.lang.Boolean) defaultValue(fields()[16]);
        record.technologyentryModeFallback = fieldSetFlags()[17] ? this.technologyentryModeFallback : (java.lang.Boolean) defaultValue(fields()[17]);
        record.technologyentryModeNFC = fieldSetFlags()[18] ? this.technologyentryModeNFC : (java.lang.Boolean) defaultValue(fields()[18]);
        record.technologyPOSConditionCode = fieldSetFlags()[19] ? this.technologyPOSConditionCode : (java.lang.CharSequence) defaultValue(fields()[19]);
        record.technologyPOSConditionCodeCardPresent = fieldSetFlags()[20] ? this.technologyPOSConditionCodeCardPresent : (java.lang.Boolean) defaultValue(fields()[20]);
        record.technologyPOSConditionCodetransactionCondition = fieldSetFlags()[21] ? this.technologyPOSConditionCodetransactionCondition : (java.lang.CharSequence) defaultValue(fields()[21]);
        record.technologyPOSConditionCodePinVerification = fieldSetFlags()[22] ? this.technologyPOSConditionCodePinVerification : (java.lang.Boolean) defaultValue(fields()[22]);
        record.technologyPOSConditionCodeSignatureAuthorization = fieldSetFlags()[23] ? this.technologyPOSConditionCodeSignatureAuthorization : (java.lang.Boolean) defaultValue(fields()[23]);
        record.technologyPOSConditionCodeOnlineAuthorization = fieldSetFlags()[24] ? this.technologyPOSConditionCodeOnlineAuthorization : (java.lang.Boolean) defaultValue(fields()[24]);
        record.technologyPOSConditionCodeOfflineAuthorization = fieldSetFlags()[25] ? this.technologyPOSConditionCodeOfflineAuthorization : (java.lang.Boolean) defaultValue(fields()[25]);
        record.technologyPOSConditionCodeFaceToFace = fieldSetFlags()[26] ? this.technologyPOSConditionCodeFaceToFace : (java.lang.Boolean) defaultValue(fields()[26]);
        record.technologyEMVtagsServiceCode = fieldSetFlags()[27] ? this.technologyEMVtagsServiceCode : (java.lang.CharSequence) defaultValue(fields()[27]);
        record.technologyEMVtagsTransactionSequenceCounter = fieldSetFlags()[28] ? this.technologyEMVtagsTransactionSequenceCounter : (java.lang.CharSequence) defaultValue(fields()[28]);
        record.technologyEMVtagsTerminalType = fieldSetFlags()[29] ? this.technologyEMVtagsTerminalType : (java.lang.CharSequence) defaultValue(fields()[29]);
        record.technologyEMVtagsTerminalCapabilities = fieldSetFlags()[30] ? this.technologyEMVtagsTerminalCapabilities : (java.lang.CharSequence) defaultValue(fields()[30]);
        record.technologyEMVtagsIAC = fieldSetFlags()[31] ? this.technologyEMVtagsIAC : (java.lang.CharSequence) defaultValue(fields()[31]);
        record.technologyEMVtagsAC = fieldSetFlags()[32] ? this.technologyEMVtagsAC : (java.lang.CharSequence) defaultValue(fields()[32]);
        record.technologyEMVtagsCID = fieldSetFlags()[33] ? this.technologyEMVtagsCID : (java.lang.CharSequence) defaultValue(fields()[33]);
        record.technologyEMVtagsAIP = fieldSetFlags()[34] ? this.technologyEMVtagsAIP : (java.lang.CharSequence) defaultValue(fields()[34]);
        record.technologyEMVtagsIAD = fieldSetFlags()[35] ? this.technologyEMVtagsIAD : (java.lang.CharSequence) defaultValue(fields()[35]);
        record.technology3DSecureAuthenticationIndicator = fieldSetFlags()[36] ? this.technology3DSecureAuthenticationIndicator : (java.lang.CharSequence) defaultValue(fields()[36]);
        record.technology3DSecure3DSVersion = fieldSetFlags()[37] ? this.technology3DSecure3DSVersion : (java.lang.CharSequence) defaultValue(fields()[37]);
        record.technology3DSecureIssuerAuthenticationData = fieldSetFlags()[38] ? this.technology3DSecureIssuerAuthenticationData : (java.lang.CharSequence) defaultValue(fields()[38]);
        record.technology3DSecureAuthenticationResponse = fieldSetFlags()[39] ? this.technology3DSecureAuthenticationResponse : (java.lang.CharSequence) defaultValue(fields()[39]);
        record.technology3DSecureCAVV = fieldSetFlags()[40] ? this.technology3DSecureCAVV : (java.lang.CharSequence) defaultValue(fields()[40]);
        record.technology3DSecureDSTransID = fieldSetFlags()[41] ? this.technology3DSecureDSTransID : (java.lang.CharSequence) defaultValue(fields()[41]);
        record.technology3DSecureDeviceChannel = fieldSetFlags()[42] ? this.technology3DSecureDeviceChannel : (java.lang.CharSequence) defaultValue(fields()[42]);
        record.technology3DSecureAMID = fieldSetFlags()[43] ? this.technology3DSecureAMID : (java.lang.CharSequence) defaultValue(fields()[43]);
        record.technology3DSecureAAV = fieldSetFlags()[44] ? this.technology3DSecureAAV : (java.lang.CharSequence) defaultValue(fields()[44]);
        record.technology3DSecureECI = fieldSetFlags()[45] ? this.technology3DSecureECI : (java.lang.CharSequence) defaultValue(fields()[45]);
        record.xPayWalletWalletID = fieldSetFlags()[46] ? this.xPayWalletWalletID : (java.lang.CharSequence) defaultValue(fields()[46]);
        record.xPayWalletTokenizedPAN = fieldSetFlags()[47] ? this.xPayWalletTokenizedPAN : (java.lang.CharSequence) defaultValue(fields()[47]);
        record.xPayWalletDeviceId = fieldSetFlags()[48] ? this.xPayWalletDeviceId : (java.lang.CharSequence) defaultValue(fields()[48]);
        record.xPayWalletTransactionToken = fieldSetFlags()[49] ? this.xPayWalletTransactionToken : (java.lang.CharSequence) defaultValue(fields()[49]);
        record.xPayWalletWalletType = fieldSetFlags()[50] ? this.xPayWalletWalletType : (java.lang.CharSequence) defaultValue(fields()[50]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<TransactionRequest>
    WRITER$ = (org.apache.avro.io.DatumWriter<TransactionRequest>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<TransactionRequest>
    READER$ = (org.apache.avro.io.DatumReader<TransactionRequest>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










