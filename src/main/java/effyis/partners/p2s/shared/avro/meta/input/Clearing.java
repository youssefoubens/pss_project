/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package effyis.partners.p2s.shared.avro.meta.input;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

/** Clearing information for the transaction */
@org.apache.avro.specific.AvroGenerated
public class Clearing extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -5212987729408111120L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Clearing\",\"namespace\":\"effyis.partners.p2s.shared.avro.meta.input\",\"doc\":\"Clearing information for the transaction\",\"fields\":[{\"name\":\"idPreClearing\",\"type\":\"string\",\"doc\":\"Unique identifier for the clearing entry (P2S-00030)\"},{\"name\":\"settlementAmount\",\"type\":\"string\",\"doc\":\"The currency of the settlement amount (P2S-00035)\"},{\"name\":\"dcc\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"DynamicCurrencyConversion\",\"doc\":\"Dynamic Currency Conversion details\",\"fields\":[{\"name\":\"isDcc\",\"type\":\"boolean\",\"doc\":\"Indicates if this is a DCC (Dynamic Currency Conversion) transaction (P2S-00038)\"},{\"name\":\"dccCurrency\",\"type\":[\"null\",\"string\"],\"doc\":\"The DCC currency used in the transaction (P2S-00039)\",\"default\":null},{\"name\":\"dccMarkup\",\"type\":[\"null\",\"string\"],\"doc\":\"The markup added to the DCC transaction (P2S-00040)\",\"default\":null}]}],\"doc\":\"Dynamic currency conversion details if applicable\",\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Clearing> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Clearing> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Clearing> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Clearing> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Clearing> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Clearing to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Clearing from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Clearing instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Clearing fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Unique identifier for the clearing entry (P2S-00030) */
  private java.lang.CharSequence idPreClearing;
  /** The currency of the settlement amount (P2S-00035) */
  private java.lang.CharSequence settlementAmount;
  /** Dynamic currency conversion details if applicable */
  private effyis.partners.p2s.shared.avro.meta.input.DynamicCurrencyConversion dcc;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Clearing() {}

  /**
   * All-args constructor.
   * @param idPreClearing Unique identifier for the clearing entry (P2S-00030)
   * @param settlementAmount The currency of the settlement amount (P2S-00035)
   * @param dcc Dynamic currency conversion details if applicable
   */
  public Clearing(java.lang.CharSequence idPreClearing, java.lang.CharSequence settlementAmount, effyis.partners.p2s.shared.avro.meta.input.DynamicCurrencyConversion dcc) {
    this.idPreClearing = idPreClearing;
    this.settlementAmount = settlementAmount;
    this.dcc = dcc;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return idPreClearing;
    case 1: return settlementAmount;
    case 2: return dcc;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: idPreClearing = (java.lang.CharSequence)value$; break;
    case 1: settlementAmount = (java.lang.CharSequence)value$; break;
    case 2: dcc = (effyis.partners.p2s.shared.avro.meta.input.DynamicCurrencyConversion)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'idPreClearing' field.
   * @return Unique identifier for the clearing entry (P2S-00030)
   */
  public java.lang.CharSequence getIdPreClearing() {
    return idPreClearing;
  }


  /**
   * Sets the value of the 'idPreClearing' field.
   * Unique identifier for the clearing entry (P2S-00030)
   * @param value the value to set.
   */
  public void setIdPreClearing(java.lang.CharSequence value) {
    this.idPreClearing = value;
  }

  /**
   * Gets the value of the 'settlementAmount' field.
   * @return The currency of the settlement amount (P2S-00035)
   */
  public java.lang.CharSequence getSettlementAmount() {
    return settlementAmount;
  }


  /**
   * Sets the value of the 'settlementAmount' field.
   * The currency of the settlement amount (P2S-00035)
   * @param value the value to set.
   */
  public void setSettlementAmount(java.lang.CharSequence value) {
    this.settlementAmount = value;
  }

  /**
   * Gets the value of the 'dcc' field.
   * @return Dynamic currency conversion details if applicable
   */
  public effyis.partners.p2s.shared.avro.meta.input.DynamicCurrencyConversion getDcc() {
    return dcc;
  }


  /**
   * Sets the value of the 'dcc' field.
   * Dynamic currency conversion details if applicable
   * @param value the value to set.
   */
  public void setDcc(effyis.partners.p2s.shared.avro.meta.input.DynamicCurrencyConversion value) {
    this.dcc = value;
  }

  /**
   * Creates a new Clearing RecordBuilder.
   * @return A new Clearing RecordBuilder
   */
  public static effyis.partners.p2s.shared.avro.meta.input.Clearing.Builder newBuilder() {
    return new effyis.partners.p2s.shared.avro.meta.input.Clearing.Builder();
  }

  /**
   * Creates a new Clearing RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Clearing RecordBuilder
   */
  public static effyis.partners.p2s.shared.avro.meta.input.Clearing.Builder newBuilder(effyis.partners.p2s.shared.avro.meta.input.Clearing.Builder other) {
    if (other == null) {
      return new effyis.partners.p2s.shared.avro.meta.input.Clearing.Builder();
    } else {
      return new effyis.partners.p2s.shared.avro.meta.input.Clearing.Builder(other);
    }
  }

  /**
   * Creates a new Clearing RecordBuilder by copying an existing Clearing instance.
   * @param other The existing instance to copy.
   * @return A new Clearing RecordBuilder
   */
  public static effyis.partners.p2s.shared.avro.meta.input.Clearing.Builder newBuilder(effyis.partners.p2s.shared.avro.meta.input.Clearing other) {
    if (other == null) {
      return new effyis.partners.p2s.shared.avro.meta.input.Clearing.Builder();
    } else {
      return new effyis.partners.p2s.shared.avro.meta.input.Clearing.Builder(other);
    }
  }

  /**
   * RecordBuilder for Clearing instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Clearing>
    implements org.apache.avro.data.RecordBuilder<Clearing> {

    /** Unique identifier for the clearing entry (P2S-00030) */
    private java.lang.CharSequence idPreClearing;
    /** The currency of the settlement amount (P2S-00035) */
    private java.lang.CharSequence settlementAmount;
    /** Dynamic currency conversion details if applicable */
    private effyis.partners.p2s.shared.avro.meta.input.DynamicCurrencyConversion dcc;
    private effyis.partners.p2s.shared.avro.meta.input.DynamicCurrencyConversion.Builder dccBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(effyis.partners.p2s.shared.avro.meta.input.Clearing.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.idPreClearing)) {
        this.idPreClearing = data().deepCopy(fields()[0].schema(), other.idPreClearing);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.settlementAmount)) {
        this.settlementAmount = data().deepCopy(fields()[1].schema(), other.settlementAmount);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.dcc)) {
        this.dcc = data().deepCopy(fields()[2].schema(), other.dcc);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (other.hasDccBuilder()) {
        this.dccBuilder = effyis.partners.p2s.shared.avro.meta.input.DynamicCurrencyConversion.newBuilder(other.getDccBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing Clearing instance
     * @param other The existing instance to copy.
     */
    private Builder(effyis.partners.p2s.shared.avro.meta.input.Clearing other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.idPreClearing)) {
        this.idPreClearing = data().deepCopy(fields()[0].schema(), other.idPreClearing);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.settlementAmount)) {
        this.settlementAmount = data().deepCopy(fields()[1].schema(), other.settlementAmount);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.dcc)) {
        this.dcc = data().deepCopy(fields()[2].schema(), other.dcc);
        fieldSetFlags()[2] = true;
      }
      this.dccBuilder = null;
    }

    /**
      * Gets the value of the 'idPreClearing' field.
      * Unique identifier for the clearing entry (P2S-00030)
      * @return The value.
      */
    public java.lang.CharSequence getIdPreClearing() {
      return idPreClearing;
    }


    /**
      * Sets the value of the 'idPreClearing' field.
      * Unique identifier for the clearing entry (P2S-00030)
      * @param value The value of 'idPreClearing'.
      * @return This builder.
      */
    public effyis.partners.p2s.shared.avro.meta.input.Clearing.Builder setIdPreClearing(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.idPreClearing = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'idPreClearing' field has been set.
      * Unique identifier for the clearing entry (P2S-00030)
      * @return True if the 'idPreClearing' field has been set, false otherwise.
      */
    public boolean hasIdPreClearing() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'idPreClearing' field.
      * Unique identifier for the clearing entry (P2S-00030)
      * @return This builder.
      */
    public effyis.partners.p2s.shared.avro.meta.input.Clearing.Builder clearIdPreClearing() {
      idPreClearing = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'settlementAmount' field.
      * The currency of the settlement amount (P2S-00035)
      * @return The value.
      */
    public java.lang.CharSequence getSettlementAmount() {
      return settlementAmount;
    }


    /**
      * Sets the value of the 'settlementAmount' field.
      * The currency of the settlement amount (P2S-00035)
      * @param value The value of 'settlementAmount'.
      * @return This builder.
      */
    public effyis.partners.p2s.shared.avro.meta.input.Clearing.Builder setSettlementAmount(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.settlementAmount = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'settlementAmount' field has been set.
      * The currency of the settlement amount (P2S-00035)
      * @return True if the 'settlementAmount' field has been set, false otherwise.
      */
    public boolean hasSettlementAmount() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'settlementAmount' field.
      * The currency of the settlement amount (P2S-00035)
      * @return This builder.
      */
    public effyis.partners.p2s.shared.avro.meta.input.Clearing.Builder clearSettlementAmount() {
      settlementAmount = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'dcc' field.
      * Dynamic currency conversion details if applicable
      * @return The value.
      */
    public effyis.partners.p2s.shared.avro.meta.input.DynamicCurrencyConversion getDcc() {
      return dcc;
    }


    /**
      * Sets the value of the 'dcc' field.
      * Dynamic currency conversion details if applicable
      * @param value The value of 'dcc'.
      * @return This builder.
      */
    public effyis.partners.p2s.shared.avro.meta.input.Clearing.Builder setDcc(effyis.partners.p2s.shared.avro.meta.input.DynamicCurrencyConversion value) {
      validate(fields()[2], value);
      this.dccBuilder = null;
      this.dcc = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'dcc' field has been set.
      * Dynamic currency conversion details if applicable
      * @return True if the 'dcc' field has been set, false otherwise.
      */
    public boolean hasDcc() {
      return fieldSetFlags()[2];
    }

    /**
     * Gets the Builder instance for the 'dcc' field and creates one if it doesn't exist yet.
     * Dynamic currency conversion details if applicable
     * @return This builder.
     */
    public effyis.partners.p2s.shared.avro.meta.input.DynamicCurrencyConversion.Builder getDccBuilder() {
      if (dccBuilder == null) {
        if (hasDcc()) {
          setDccBuilder(effyis.partners.p2s.shared.avro.meta.input.DynamicCurrencyConversion.newBuilder(dcc));
        } else {
          setDccBuilder(effyis.partners.p2s.shared.avro.meta.input.DynamicCurrencyConversion.newBuilder());
        }
      }
      return dccBuilder;
    }

    /**
     * Sets the Builder instance for the 'dcc' field
     * Dynamic currency conversion details if applicable
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public effyis.partners.p2s.shared.avro.meta.input.Clearing.Builder setDccBuilder(effyis.partners.p2s.shared.avro.meta.input.DynamicCurrencyConversion.Builder value) {
      clearDcc();
      dccBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'dcc' field has an active Builder instance
     * Dynamic currency conversion details if applicable
     * @return True if the 'dcc' field has an active Builder instance
     */
    public boolean hasDccBuilder() {
      return dccBuilder != null;
    }

    /**
      * Clears the value of the 'dcc' field.
      * Dynamic currency conversion details if applicable
      * @return This builder.
      */
    public effyis.partners.p2s.shared.avro.meta.input.Clearing.Builder clearDcc() {
      dcc = null;
      dccBuilder = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Clearing build() {
      try {
        Clearing record = new Clearing();
        record.idPreClearing = fieldSetFlags()[0] ? this.idPreClearing : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.settlementAmount = fieldSetFlags()[1] ? this.settlementAmount : (java.lang.CharSequence) defaultValue(fields()[1]);
        if (dccBuilder != null) {
          try {
            record.dcc = this.dccBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("dcc"));
            throw e;
          }
        } else {
          record.dcc = fieldSetFlags()[2] ? this.dcc : (effyis.partners.p2s.shared.avro.meta.input.DynamicCurrencyConversion) defaultValue(fields()[2]);
        }
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Clearing>
    WRITER$ = (org.apache.avro.io.DatumWriter<Clearing>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Clearing>
    READER$ = (org.apache.avro.io.DatumReader<Clearing>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.idPreClearing);

    out.writeString(this.settlementAmount);

    if (this.dcc == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      this.dcc.customEncode(out);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.idPreClearing = in.readString(this.idPreClearing instanceof Utf8 ? (Utf8)this.idPreClearing : null);

      this.settlementAmount = in.readString(this.settlementAmount instanceof Utf8 ? (Utf8)this.settlementAmount : null);

      if (in.readIndex() != 1) {
        in.readNull();
        this.dcc = null;
      } else {
        if (this.dcc == null) {
          this.dcc = new effyis.partners.p2s.shared.avro.meta.input.DynamicCurrencyConversion();
        }
        this.dcc.customDecode(in);
      }

    } else {
      for (int i = 0; i < 3; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.idPreClearing = in.readString(this.idPreClearing instanceof Utf8 ? (Utf8)this.idPreClearing : null);
          break;

        case 1:
          this.settlementAmount = in.readString(this.settlementAmount instanceof Utf8 ? (Utf8)this.settlementAmount : null);
          break;

        case 2:
          if (in.readIndex() != 1) {
            in.readNull();
            this.dcc = null;
          } else {
            if (this.dcc == null) {
              this.dcc = new effyis.partners.p2s.shared.avro.meta.input.DynamicCurrencyConversion();
            }
            this.dcc.customDecode(in);
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










